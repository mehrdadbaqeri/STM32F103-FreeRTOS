
STM32F103-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084e4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  080085f8  080085f8  000185f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800899c  0800899c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800899c  0800899c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800899c  0800899c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800899c  0800899c  0001899c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089a0  080089a0  000189a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080089a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ad8  200001e0  08008b84  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cb8  08008b84  00021cb8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ee23  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b58  00000000  00000000  0003f02c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001830  00000000  00000000  00042b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016a0  00000000  00000000  000443b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a675  00000000  00000000  00045a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014bc8  00000000  00000000  000600cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009bc40  00000000  00000000  00074c95  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001108d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fac  00000000  00000000  00110950  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080085dc 	.word	0x080085dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080085dc 	.word	0x080085dc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <StringCompare>:
 * @param char* str2 The second string.
 *
 * @return uint8_t
 */
static uint8_t StringCompare (char str1[], char str2[], uint16_t length)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	4613      	mov	r3, r2
 8000b08:	80fb      	strh	r3, [r7, #6]
  uint8_t comVAR = 0, i;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	75fb      	strb	r3, [r7, #23]
  StringToLowerCase (str1);
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	f000 f82a 	bl	8000b68 <StringToLowerCase>
  StringToLowerCase (str2);
 8000b14:	68b8      	ldr	r0, [r7, #8]
 8000b16:	f000 f827 	bl	8000b68 <StringToLowerCase>
  for (i = 0; i < length; i++)
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	75bb      	strb	r3, [r7, #22]
 8000b1e:	e012      	b.n	8000b46 <StringCompare+0x4a>
    {
      if (str1[i] == str2[i])
 8000b20:	7dbb      	ldrb	r3, [r7, #22]
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	4413      	add	r3, r2
 8000b26:	781a      	ldrb	r2, [r3, #0]
 8000b28:	7dbb      	ldrb	r3, [r7, #22]
 8000b2a:	68b9      	ldr	r1, [r7, #8]
 8000b2c:	440b      	add	r3, r1
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d103      	bne.n	8000b3c <StringCompare+0x40>
	comVAR++;
 8000b34:	7dfb      	ldrb	r3, [r7, #23]
 8000b36:	3301      	adds	r3, #1
 8000b38:	75fb      	strb	r3, [r7, #23]
 8000b3a:	e001      	b.n	8000b40 <StringCompare+0x44>
      else
	comVAR = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	75fb      	strb	r3, [r7, #23]
  for (i = 0; i < length; i++)
 8000b40:	7dbb      	ldrb	r3, [r7, #22]
 8000b42:	3301      	adds	r3, #1
 8000b44:	75bb      	strb	r3, [r7, #22]
 8000b46:	7dbb      	ldrb	r3, [r7, #22]
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	88fa      	ldrh	r2, [r7, #6]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d8e7      	bhi.n	8000b20 <StringCompare+0x24>
    }

  if (comVAR == length)
 8000b50:	7dfb      	ldrb	r3, [r7, #23]
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	88fa      	ldrh	r2, [r7, #6]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d101      	bne.n	8000b5e <StringCompare+0x62>
    return 1;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e000      	b.n	8000b60 <StringCompare+0x64>
  else
    return 0;
 8000b5e:	2300      	movs	r3, #0
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <StringToLowerCase>:
 * Converts the given string to lower case.
 *
 * @param char* str The given string.
 */
inline static void StringToLowerCase (char *str)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  int i = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
  while (str[i] != '\0')
 8000b74:	e018      	b.n	8000ba8 <StringToLowerCase+0x40>
    {
      if (str[i] >= 'A' && str[i] <= 'Z')
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b40      	cmp	r3, #64	; 0x40
 8000b80:	d90f      	bls.n	8000ba2 <StringToLowerCase+0x3a>
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	4413      	add	r3, r2
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b5a      	cmp	r3, #90	; 0x5a
 8000b8c:	d809      	bhi.n	8000ba2 <StringToLowerCase+0x3a>
	{
	  str[i] = str[i] + 32;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	4413      	add	r3, r2
 8000b94:	781a      	ldrb	r2, [r3, #0]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	6879      	ldr	r1, [r7, #4]
 8000b9a:	440b      	add	r3, r1
 8000b9c:	3220      	adds	r2, #32
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	701a      	strb	r2, [r3, #0]
	}
      ++i;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
  while (str[i] != '\0')
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d1e0      	bne.n	8000b76 <StringToLowerCase+0xe>
    }
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr
	...

08000bc0 <StringCommandSpliter>:
 * @param char** cmdParams An output parameter as a list of string to return the
 * command and its parameter. The first element is always the command which is
 * followed by maximum 4 parameters.
 */
static void StringCommandSpliter (char **cmdParams)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	73fb      	strb	r3, [r7, #15]
  char *cmdLine = strtok (bluetoothReceiveCommand, " ");
 8000bcc:	4912      	ldr	r1, [pc, #72]	; (8000c18 <StringCommandSpliter+0x58>)
 8000bce:	4813      	ldr	r0, [pc, #76]	; (8000c1c <StringCommandSpliter+0x5c>)
 8000bd0:	f006 f8f2 	bl	8006db8 <strtok>
 8000bd4:	60b8      	str	r0, [r7, #8]
  while (cmdLine != NULL)
 8000bd6:	e017      	b.n	8000c08 <StringCommandSpliter+0x48>
    {
      cmdParams[i++] = cmdLine;
 8000bd8:	7bfb      	ldrb	r3, [r7, #15]
 8000bda:	1c5a      	adds	r2, r3, #1
 8000bdc:	73fa      	strb	r2, [r7, #15]
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	4413      	add	r3, r2
 8000be4:	68ba      	ldr	r2, [r7, #8]
 8000be6:	601a      	str	r2, [r3, #0]
      HAL_UART_Transmit(&huart2, (uint8_t*)cmdLine, strlen(cmdLine), 500);
 8000be8:	68b8      	ldr	r0, [r7, #8]
 8000bea:	f7ff fab1 	bl	8000150 <strlen>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bf6:	68b9      	ldr	r1, [r7, #8]
 8000bf8:	4809      	ldr	r0, [pc, #36]	; (8000c20 <StringCommandSpliter+0x60>)
 8000bfa:	f002 ffa2 	bl	8003b42 <HAL_UART_Transmit>
      cmdLine = strtok (NULL, " ");
 8000bfe:	4906      	ldr	r1, [pc, #24]	; (8000c18 <StringCommandSpliter+0x58>)
 8000c00:	2000      	movs	r0, #0
 8000c02:	f006 f8d9 	bl	8006db8 <strtok>
 8000c06:	60b8      	str	r0, [r7, #8]
  while (cmdLine != NULL)
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1e4      	bne.n	8000bd8 <StringCommandSpliter+0x18>
    }
}
 8000c0e:	bf00      	nop
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	080085f8 	.word	0x080085f8
 8000c1c:	20001b20 	.word	0x20001b20
 8000c20:	20001be4 	.word	0x20001be4

08000c24 <SendInvalidCommandMsg>:

/*
 * Send not valid message to UART
 */
static void SendInvalidCommandMsg(){
 8000c24:	b5b0      	push	{r4, r5, r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  strcat (bluetoothReceiveCommand, " is not a valid command!!!\n");
 8000c28:	480b      	ldr	r0, [pc, #44]	; (8000c58 <SendInvalidCommandMsg+0x34>)
 8000c2a:	f7ff fa91 	bl	8000150 <strlen>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	461a      	mov	r2, r3
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <SendInvalidCommandMsg+0x34>)
 8000c34:	4413      	add	r3, r2
 8000c36:	4a09      	ldr	r2, [pc, #36]	; (8000c5c <SendInvalidCommandMsg+0x38>)
 8000c38:	461d      	mov	r5, r3
 8000c3a:	4614      	mov	r4, r2
 8000c3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c3e:	6028      	str	r0, [r5, #0]
 8000c40:	6069      	str	r1, [r5, #4]
 8000c42:	60aa      	str	r2, [r5, #8]
 8000c44:	60eb      	str	r3, [r5, #12]
 8000c46:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000c48:	6128      	str	r0, [r5, #16]
 8000c4a:	6169      	str	r1, [r5, #20]
 8000c4c:	61aa      	str	r2, [r5, #24]
  UARTWriteString(bluetoothReceiveCommand);
 8000c4e:	4802      	ldr	r0, [pc, #8]	; (8000c58 <SendInvalidCommandMsg+0x34>)
 8000c50:	f000 f8b0 	bl	8000db4 <UARTWriteString>
}
 8000c54:	bf00      	nop
 8000c56:	bdb0      	pop	{r4, r5, r7, pc}
 8000c58:	20001b20 	.word	0x20001b20
 8000c5c:	080085fc 	.word	0x080085fc

08000c60 <WriteLedPin>:
 * Write LED pin status
 *
 * @param ledIdx The LED index
 * @param flagStatus The LED status to write
 */
static void WriteLedPin(LED_IDX ledIdx, FlagStatus flagStat){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	460a      	mov	r2, r1
 8000c6a:	71fb      	strb	r3, [r7, #7]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	71bb      	strb	r3, [r7, #6]
  ledBlinkRatePerSecond[ledIdx] = 0;
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	4a14      	ldr	r2, [pc, #80]	; (8000cc4 <WriteLedPin+0x64>)
 8000c74:	2100      	movs	r1, #0
 8000c76:	54d1      	strb	r1, [r2, r3]
  if( ledIdx == LED_ONBOARD){
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d107      	bne.n	8000c8e <WriteLedPin+0x2e>
    HAL_GPIO_WritePin(LED_OnBoard_GPIO_Port, LED_OnBoard_Pin, flagStat);
 8000c7e:	79bb      	ldrb	r3, [r7, #6]
 8000c80:	461a      	mov	r2, r3
 8000c82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c86:	4810      	ldr	r0, [pc, #64]	; (8000cc8 <WriteLedPin+0x68>)
 8000c88:	f001 fd9d 	bl	80027c6 <HAL_GPIO_WritePin>
  else if(ledIdx == LED_RED){
    HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, flagStat);
  }
  else
    SendInvalidCommandMsg();
}
 8000c8c:	e015      	b.n	8000cba <WriteLedPin+0x5a>
  else if(ledIdx == LED_GREEN){
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d106      	bne.n	8000ca2 <WriteLedPin+0x42>
    HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, flagStat);
 8000c94:	79bb      	ldrb	r3, [r7, #6]
 8000c96:	461a      	mov	r2, r3
 8000c98:	2110      	movs	r1, #16
 8000c9a:	480c      	ldr	r0, [pc, #48]	; (8000ccc <WriteLedPin+0x6c>)
 8000c9c:	f001 fd93 	bl	80027c6 <HAL_GPIO_WritePin>
}
 8000ca0:	e00b      	b.n	8000cba <WriteLedPin+0x5a>
  else if(ledIdx == LED_RED){
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	d106      	bne.n	8000cb6 <WriteLedPin+0x56>
    HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, flagStat);
 8000ca8:	79bb      	ldrb	r3, [r7, #6]
 8000caa:	461a      	mov	r2, r3
 8000cac:	2108      	movs	r1, #8
 8000cae:	4807      	ldr	r0, [pc, #28]	; (8000ccc <WriteLedPin+0x6c>)
 8000cb0:	f001 fd89 	bl	80027c6 <HAL_GPIO_WritePin>
}
 8000cb4:	e001      	b.n	8000cba <WriteLedPin+0x5a>
    SendInvalidCommandMsg();
 8000cb6:	f7ff ffb5 	bl	8000c24 <SendInvalidCommandMsg>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000200 	.word	0x20000200
 8000cc8:	40011000 	.word	0x40011000
 8000ccc:	40010c00 	.word	0x40010c00

08000cd0 <URATCommandParser>:
 *
 *@Note: The command should look like:
 *[component e.g. led] [cmd like on/off] [component index e.g. 1] [extra params]
 */
void URATCommandParser ()
{
 8000cd0:	b5b0      	push	{r4, r5, r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
  char *cmd[5] = { "", "", "", "", "" };
 8000cd6:	4b2f      	ldr	r3, [pc, #188]	; (8000d94 <URATCommandParser+0xc4>)
 8000cd8:	463c      	mov	r4, r7
 8000cda:	461d      	mov	r5, r3
 8000cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce0:	682b      	ldr	r3, [r5, #0]
 8000ce2:	6023      	str	r3, [r4, #0]
  StringCommandSpliter (cmd);
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ff6a 	bl	8000bc0 <StringCommandSpliter>
  if(StringCompare((char*) cmd[0], (char*)"led", strlen("led"))){
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	2203      	movs	r2, #3
 8000cf0:	4929      	ldr	r1, [pc, #164]	; (8000d98 <URATCommandParser+0xc8>)
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff ff02 	bl	8000afc <StringCompare>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d03e      	beq.n	8000d7c <URATCommandParser+0xac>
    uint8_t ledIdx = atoi(cmd[2]);
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f005 fff3 	bl	8006cec <atoi>
 8000d06:	4603      	mov	r3, r0
 8000d08:	75fb      	strb	r3, [r7, #23]
    if(ledIdx > MAX_NOF_LEDS || ledIdx < 0){
 8000d0a:	7dfb      	ldrb	r3, [r7, #23]
 8000d0c:	2b03      	cmp	r3, #3
 8000d0e:	d902      	bls.n	8000d16 <URATCommandParser+0x46>
      SendInvalidCommandMsg();
 8000d10:	f7ff ff88 	bl	8000c24 <SendInvalidCommandMsg>
 8000d14:	e032      	b.n	8000d7c <URATCommandParser+0xac>
    }
    else {
      if(StringCompare((char*) cmd[1], (char*)"on", strlen("on")))
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2202      	movs	r2, #2
 8000d1a:	4920      	ldr	r1, [pc, #128]	; (8000d9c <URATCommandParser+0xcc>)
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff feed 	bl	8000afc <StringCompare>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d005      	beq.n	8000d34 <URATCommandParser+0x64>
      {
    	WriteLedPin(ledIdx, RESET);
 8000d28:	7dfb      	ldrb	r3, [r7, #23]
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff97 	bl	8000c60 <WriteLedPin>
 8000d32:	e023      	b.n	8000d7c <URATCommandParser+0xac>
      }
      else if(StringCompare((char*)cmd[1], (char*)"off", strlen("off")))
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2203      	movs	r2, #3
 8000d38:	4919      	ldr	r1, [pc, #100]	; (8000da0 <URATCommandParser+0xd0>)
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fede 	bl	8000afc <StringCompare>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d005      	beq.n	8000d52 <URATCommandParser+0x82>
      {
    	WriteLedPin(ledIdx, SET);
 8000d46:	7dfb      	ldrb	r3, [r7, #23]
 8000d48:	2101      	movs	r1, #1
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff88 	bl	8000c60 <WriteLedPin>
 8000d50:	e014      	b.n	8000d7c <URATCommandParser+0xac>
      }
      else if(StringCompare((char*)cmd[1], (char*)"blink", strlen("blink")))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2205      	movs	r2, #5
 8000d56:	4913      	ldr	r1, [pc, #76]	; (8000da4 <URATCommandParser+0xd4>)
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fecf 	bl	8000afc <StringCompare>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d009      	beq.n	8000d78 <URATCommandParser+0xa8>
      {
    	ledBlinkRatePerSecond[ledIdx] = atoi(cmd[3]);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f005 ffc0 	bl	8006cec <atoi>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	7dfb      	ldrb	r3, [r7, #23]
 8000d70:	b2d1      	uxtb	r1, r2
 8000d72:	4a0d      	ldr	r2, [pc, #52]	; (8000da8 <URATCommandParser+0xd8>)
 8000d74:	54d1      	strb	r1, [r2, r3]
 8000d76:	e001      	b.n	8000d7c <URATCommandParser+0xac>
      }
      else
      {
    	SendInvalidCommandMsg();
 8000d78:	f7ff ff54 	bl	8000c24 <SendInvalidCommandMsg>
      }
    }
  }
  memset (bluetoothReceiveCommand, 0, sizeof(bluetoothReceiveCommand));
 8000d7c:	2232      	movs	r2, #50	; 0x32
 8000d7e:	2100      	movs	r1, #0
 8000d80:	480a      	ldr	r0, [pc, #40]	; (8000dac <URATCommandParser+0xdc>)
 8000d82:	f006 f810 	bl	8006da6 <memset>
  bufferIndex = 0;
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <URATCommandParser+0xe0>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bdb0      	pop	{r4, r5, r7, pc}
 8000d94:	08008630 	.word	0x08008630
 8000d98:	08008618 	.word	0x08008618
 8000d9c:	0800861c 	.word	0x0800861c
 8000da0:	08008620 	.word	0x08008620
 8000da4:	08008624 	.word	0x08008624
 8000da8:	20000200 	.word	0x20000200
 8000dac:	20001b20 	.word	0x20001b20
 8000db0:	200001fc 	.word	0x200001fc

08000db4 <UARTWriteString>:
/*
 * Write the given string to the bluetooth UART channel.
 *
 * @param char* str The string to write into the bluetooth UART channel.
 */
void UARTWriteString(char* str){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&huart2,(uint8_t*)str, strlen(str), 500);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff f9c7 	bl	8000150 <strlen>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	4803      	ldr	r0, [pc, #12]	; (8000ddc <UARTWriteString+0x28>)
 8000dce:	f002 feb8 	bl	8003b42 <HAL_UART_Transmit>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20001be4 	.word	0x20001be4

08000de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de4:	f000 fcee 	bl	80017c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de8:	f000 f85a 	bl	8000ea0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dec:	f000 f94a 	bl	8001084 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000df0:	f000 f8b2 	bl	8000f58 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000df4:	f000 f8ee 	bl	8000fd4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000df8:	f000 f91a 	bl	8001030 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8000dfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e00:	f000 fd12 	bl	8001828 <HAL_Delay>
  memset(bluetoothReceiveCommand, 0, sizeof(bluetoothReceiveCommand));
 8000e04:	2232      	movs	r2, #50	; 0x32
 8000e06:	2100      	movs	r1, #0
 8000e08:	4817      	ldr	r0, [pc, #92]	; (8000e68 <main+0x88>)
 8000e0a:	f005 ffcc 	bl	8006da6 <memset>
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <main+0x8c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	68da      	ldr	r2, [r3, #12]
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <main+0x8c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f042 0220 	orr.w	r2, r2, #32
 8000e1c:	60da      	str	r2, [r3, #12]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e1e:	f003 facd 	bl	80043bc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of onboardLedCtrl */
  onboardLedCtrlHandle = osThreadNew(onboardLedCtrlTask, NULL, &onboardLedCtrl_attributes);
 8000e22:	4a13      	ldr	r2, [pc, #76]	; (8000e70 <main+0x90>)
 8000e24:	2100      	movs	r1, #0
 8000e26:	4813      	ldr	r0, [pc, #76]	; (8000e74 <main+0x94>)
 8000e28:	f003 fb2e 	bl	8004488 <osThreadNew>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <main+0x98>)
 8000e30:	601a      	str	r2, [r3, #0]

  /* creation of getTemperature */
  getTemperatureHandle = osThreadNew(getTemperatureTask, NULL, &getTemperature_attributes);
 8000e32:	4a12      	ldr	r2, [pc, #72]	; (8000e7c <main+0x9c>)
 8000e34:	2100      	movs	r1, #0
 8000e36:	4812      	ldr	r0, [pc, #72]	; (8000e80 <main+0xa0>)
 8000e38:	f003 fb26 	bl	8004488 <osThreadNew>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <main+0xa4>)
 8000e40:	601a      	str	r2, [r3, #0]

  /* creation of redLedCtrl */
  redLedCtrlHandle = osThreadNew(redLedCtrlTask, NULL, &redLedCtrl_attributes);
 8000e42:	4a11      	ldr	r2, [pc, #68]	; (8000e88 <main+0xa8>)
 8000e44:	2100      	movs	r1, #0
 8000e46:	4811      	ldr	r0, [pc, #68]	; (8000e8c <main+0xac>)
 8000e48:	f003 fb1e 	bl	8004488 <osThreadNew>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <main+0xb0>)
 8000e50:	601a      	str	r2, [r3, #0]

  /* creation of myButtonCtrl */
  myButtonCtrlHandle = osThreadNew(myButtonCtrlTask, NULL, &myButtonCtrl_attributes);
 8000e52:	4a10      	ldr	r2, [pc, #64]	; (8000e94 <main+0xb4>)
 8000e54:	2100      	movs	r1, #0
 8000e56:	4810      	ldr	r0, [pc, #64]	; (8000e98 <main+0xb8>)
 8000e58:	f003 fb16 	bl	8004488 <osThreadNew>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <main+0xbc>)
 8000e60:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000e62:	f003 fadd 	bl	8004420 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <main+0x86>
 8000e68:	20001b20 	.word	0x20001b20
 8000e6c:	20001be4 	.word	0x20001be4
 8000e70:	080086dc 	.word	0x080086dc
 8000e74:	08001189 	.word	0x08001189
 8000e78:	20001c24 	.word	0x20001c24
 8000e7c:	08008700 	.word	0x08008700
 8000e80:	080011cd 	.word	0x080011cd
 8000e84:	20001be0 	.word	0x20001be0
 8000e88:	08008724 	.word	0x08008724
 8000e8c:	08001289 	.word	0x08001289
 8000e90:	20001bac 	.word	0x20001bac
 8000e94:	08008748 	.word	0x08008748
 8000e98:	080012c9 	.word	0x080012c9
 8000e9c:	20001b54 	.word	0x20001b54

08000ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b094      	sub	sp, #80	; 0x50
 8000ea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eaa:	2228      	movs	r2, #40	; 0x28
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f005 ff79 	bl	8006da6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ed4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ee6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000eec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ef0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f001 fdce 	bl	8002a98 <HAL_RCC_OscConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f02:	f000 fa15 	bl	8001330 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f06:	230f      	movs	r3, #15
 8000f08:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f16:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	2102      	movs	r1, #2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f002 f838 	bl	8002f98 <HAL_RCC_ClockConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f2e:	f000 f9ff 	bl	8001330 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f32:	2302      	movs	r3, #2
 8000f34:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f3a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f002 f9f6 	bl	8003330 <HAL_RCCEx_PeriphCLKConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f4a:	f000 f9f1 	bl	8001330 <Error_Handler>
  }
}
 8000f4e:	bf00      	nop
 8000f50:	3750      	adds	r7, #80	; 0x50
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f68:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <MX_ADC1_Init+0x74>)
 8000f6a:	4a19      	ldr	r2, [pc, #100]	; (8000fd0 <MX_ADC1_Init+0x78>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f6e:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <MX_ADC1_Init+0x74>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f74:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <MX_ADC1_Init+0x74>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f7a:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <MX_ADC1_Init+0x74>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <MX_ADC1_Init+0x74>)
 8000f82:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000f86:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f88:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <MX_ADC1_Init+0x74>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <MX_ADC1_Init+0x74>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f94:	480d      	ldr	r0, [pc, #52]	; (8000fcc <MX_ADC1_Init+0x74>)
 8000f96:	f000 fc69 	bl	800186c <HAL_ADC_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000fa0:	f000 f9c6 	bl	8001330 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000fa4:	2305      	movs	r3, #5
 8000fa6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4805      	ldr	r0, [pc, #20]	; (8000fcc <MX_ADC1_Init+0x74>)
 8000fb6:	f000 ffb1 	bl	8001f1c <HAL_ADC_ConfigChannel>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000fc0:	f000 f9b6 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20001bb0 	.word	0x20001bb0
 8000fd0:	40012400 	.word	0x40012400

08000fd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <MX_I2C1_Init+0x50>)
 8000fda:	4a13      	ldr	r2, [pc, #76]	; (8001028 <MX_I2C1_Init+0x54>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <MX_I2C1_Init+0x50>)
 8000fe0:	4a12      	ldr	r2, [pc, #72]	; (800102c <MX_I2C1_Init+0x58>)
 8000fe2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <MX_I2C1_Init+0x50>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <MX_I2C1_Init+0x50>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <MX_I2C1_Init+0x50>)
 8000ff2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ff6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <MX_I2C1_Init+0x50>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <MX_I2C1_Init+0x50>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001004:	4b07      	ldr	r3, [pc, #28]	; (8001024 <MX_I2C1_Init+0x50>)
 8001006:	2200      	movs	r2, #0
 8001008:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <MX_I2C1_Init+0x50>)
 800100c:	2200      	movs	r2, #0
 800100e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001010:	4804      	ldr	r0, [pc, #16]	; (8001024 <MX_I2C1_Init+0x50>)
 8001012:	f001 fc09 	bl	8002828 <HAL_I2C_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800101c:	f000 f988 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20001b58 	.word	0x20001b58
 8001028:	40005400 	.word	0x40005400
 800102c:	00061a80 	.word	0x00061a80

08001030 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001036:	4a12      	ldr	r2, [pc, #72]	; (8001080 <MX_USART2_UART_Init+0x50>)
 8001038:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <MX_USART2_UART_Init+0x4c>)
 800103c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001040:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <MX_USART2_UART_Init+0x4c>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001056:	220c      	movs	r2, #12
 8001058:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105a:	4b08      	ldr	r3, [pc, #32]	; (800107c <MX_USART2_UART_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001068:	f002 fd1e 	bl	8003aa8 <HAL_UART_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001072:	f000 f95d 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20001be4 	.word	0x20001be4
 8001080:	40004400 	.word	0x40004400

08001084 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108a:	f107 0310 	add.w	r3, r7, #16
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001098:	4b36      	ldr	r3, [pc, #216]	; (8001174 <MX_GPIO_Init+0xf0>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4a35      	ldr	r2, [pc, #212]	; (8001174 <MX_GPIO_Init+0xf0>)
 800109e:	f043 0310 	orr.w	r3, r3, #16
 80010a2:	6193      	str	r3, [r2, #24]
 80010a4:	4b33      	ldr	r3, [pc, #204]	; (8001174 <MX_GPIO_Init+0xf0>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0310 	and.w	r3, r3, #16
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b0:	4b30      	ldr	r3, [pc, #192]	; (8001174 <MX_GPIO_Init+0xf0>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a2f      	ldr	r2, [pc, #188]	; (8001174 <MX_GPIO_Init+0xf0>)
 80010b6:	f043 0320 	orr.w	r3, r3, #32
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <MX_GPIO_Init+0xf0>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0320 	and.w	r3, r3, #32
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c8:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <MX_GPIO_Init+0xf0>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a29      	ldr	r2, [pc, #164]	; (8001174 <MX_GPIO_Init+0xf0>)
 80010ce:	f043 0304 	orr.w	r3, r3, #4
 80010d2:	6193      	str	r3, [r2, #24]
 80010d4:	4b27      	ldr	r3, [pc, #156]	; (8001174 <MX_GPIO_Init+0xf0>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e0:	4b24      	ldr	r3, [pc, #144]	; (8001174 <MX_GPIO_Init+0xf0>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	4a23      	ldr	r2, [pc, #140]	; (8001174 <MX_GPIO_Init+0xf0>)
 80010e6:	f043 0308 	orr.w	r3, r3, #8
 80010ea:	6193      	str	r3, [r2, #24]
 80010ec:	4b21      	ldr	r3, [pc, #132]	; (8001174 <MX_GPIO_Init+0xf0>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	f003 0308 	and.w	r3, r3, #8
 80010f4:	603b      	str	r3, [r7, #0]
 80010f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OnBoard_GPIO_Port, LED_OnBoard_Pin, GPIO_PIN_SET);
 80010f8:	2201      	movs	r2, #1
 80010fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010fe:	481e      	ldr	r0, [pc, #120]	; (8001178 <MX_GPIO_Init+0xf4>)
 8001100:	f001 fb61 	bl	80027c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_SET);
 8001104:	2201      	movs	r2, #1
 8001106:	2108      	movs	r1, #8
 8001108:	481c      	ldr	r0, [pc, #112]	; (800117c <MX_GPIO_Init+0xf8>)
 800110a:	f001 fb5c 	bl	80027c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	2110      	movs	r1, #16
 8001112:	481a      	ldr	r0, [pc, #104]	; (800117c <MX_GPIO_Init+0xf8>)
 8001114:	f001 fb57 	bl	80027c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_OnBoard_Pin */
  GPIO_InitStruct.Pin = LED_OnBoard_Pin;
 8001118:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800111c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111e:	2301      	movs	r3, #1
 8001120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2302      	movs	r3, #2
 8001128:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_OnBoard_GPIO_Port, &GPIO_InitStruct);
 800112a:	f107 0310 	add.w	r3, r7, #16
 800112e:	4619      	mov	r1, r3
 8001130:	4811      	ldr	r0, [pc, #68]	; (8001178 <MX_GPIO_Init+0xf4>)
 8001132:	f001 f9d7 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001136:	f44f 7300 	mov.w	r3, #512	; 0x200
 800113a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800113c:	4b10      	ldr	r3, [pc, #64]	; (8001180 <MX_GPIO_Init+0xfc>)
 800113e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	4619      	mov	r1, r3
 800114a:	480e      	ldr	r0, [pc, #56]	; (8001184 <MX_GPIO_Init+0x100>)
 800114c:	f001 f9ca 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Red_Pin LED_Green_Pin */
  GPIO_InitStruct.Pin = LED_Red_Pin|LED_Green_Pin;
 8001150:	2318      	movs	r3, #24
 8001152:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001154:	2301      	movs	r3, #1
 8001156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2302      	movs	r3, #2
 800115e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4619      	mov	r1, r3
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_GPIO_Init+0xf8>)
 8001168:	f001 f9bc 	bl	80024e4 <HAL_GPIO_Init>

}
 800116c:	bf00      	nop
 800116e:	3720      	adds	r7, #32
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40021000 	.word	0x40021000
 8001178:	40011000 	.word	0x40011000
 800117c:	40010c00 	.word	0x40010c00
 8001180:	10110000 	.word	0x10110000
 8001184:	40010800 	.word	0x40010800

08001188 <onboardLedCtrlTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_onboardLedCtrlTask */
void onboardLedCtrlTask(void *argument)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    if(ledBlinkRatePerSecond[LED_ONBOARD] > 0){
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <onboardLedCtrlTask+0x3c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00f      	beq.n	80011b8 <onboardLedCtrlTask+0x30>
      HAL_GPIO_TogglePin(LED_OnBoard_GPIO_Port, LED_OnBoard_Pin);
 8001198:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800119c:	480a      	ldr	r0, [pc, #40]	; (80011c8 <onboardLedCtrlTask+0x40>)
 800119e:	f001 fb2a 	bl	80027f6 <HAL_GPIO_TogglePin>
      osDelay(1000 / 2 / ledBlinkRatePerSecond[LED_ONBOARD]);
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <onboardLedCtrlTask+0x3c>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	461a      	mov	r2, r3
 80011a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f003 fa13 	bl	80045dc <osDelay>
 80011b6:	e7eb      	b.n	8001190 <onboardLedCtrlTask+0x8>
    }
    else{
      osDelay( 1000 );
 80011b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011bc:	f003 fa0e 	bl	80045dc <osDelay>
    if(ledBlinkRatePerSecond[LED_ONBOARD] > 0){
 80011c0:	e7e6      	b.n	8001190 <onboardLedCtrlTask+0x8>
 80011c2:	bf00      	nop
 80011c4:	20000200 	.word	0x20000200
 80011c8:	40011000 	.word	0x40011000

080011cc <getTemperatureTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getTemperatureTask */
void getTemperatureTask(void *argument)
{
 80011cc:	b590      	push	{r4, r7, lr}
 80011ce:	b089      	sub	sp, #36	; 0x24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getTemperatureTask */
  char temperature[20] = "";
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
  uint32_t rawADCData;
  /* Infinite loop */
  for(;;)
  {
    // Test: Set GPIO pin high
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80011e6:	2201      	movs	r2, #1
 80011e8:	2101      	movs	r1, #1
 80011ea:	4821      	ldr	r0, [pc, #132]	; (8001270 <getTemperatureTask+0xa4>)
 80011ec:	f001 faeb 	bl	80027c6 <HAL_GPIO_WritePin>

    // Get ADC value
    HAL_ADC_Start(&hadc1);
 80011f0:	4820      	ldr	r0, [pc, #128]	; (8001274 <getTemperatureTask+0xa8>)
 80011f2:	f000 fc13 	bl	8001a1c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80011f6:	f04f 31ff 	mov.w	r1, #4294967295
 80011fa:	481e      	ldr	r0, [pc, #120]	; (8001274 <getTemperatureTask+0xa8>)
 80011fc:	f000 fcbc 	bl	8001b78 <HAL_ADC_PollForConversion>
    rawADCData = HAL_ADC_GetValue(&hadc1);
 8001200:	481c      	ldr	r0, [pc, #112]	; (8001274 <getTemperatureTask+0xa8>)
 8001202:	f000 fdb3 	bl	8001d6c <HAL_ADC_GetValue>
 8001206:	61f8      	str	r0, [r7, #28]
    tempCelcius = ( rawADCData - 328) / 24.0;
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f8e8 	bl	80003e4 <__aeabi_ui2d>
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <getTemperatureTask+0xac>)
 800121a:	f7ff fa87 	bl	800072c <__aeabi_ddiv>
 800121e:	4603      	mov	r3, r0
 8001220:	460c      	mov	r4, r1
 8001222:	4618      	mov	r0, r3
 8001224:	4621      	mov	r1, r4
 8001226:	f7ff fc19 	bl	8000a5c <__aeabi_d2f>
 800122a:	4602      	mov	r2, r0
 800122c:	4b13      	ldr	r3, [pc, #76]	; (800127c <getTemperatureTask+0xb0>)
 800122e:	601a      	str	r2, [r3, #0]

    // Test: Set GPIO pin low
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001236:	480e      	ldr	r0, [pc, #56]	; (8001270 <getTemperatureTask+0xa4>)
 8001238:	f001 fac5 	bl	80027c6 <HAL_GPIO_WritePin>
    UARTWriteString("T: ");
 800123c:	4810      	ldr	r0, [pc, #64]	; (8001280 <getTemperatureTask+0xb4>)
 800123e:	f7ff fdb9 	bl	8000db4 <UARTWriteString>
    gcvt((double)tempCelcius, 6, (char*)temperature);
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <getTemperatureTask+0xb0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff f8ee 	bl	8000428 <__aeabi_f2d>
 800124c:	f107 0308 	add.w	r3, r7, #8
 8001250:	2206      	movs	r2, #6
 8001252:	f005 fd4f 	bl	8006cf4 <gcvt>
    UARTWriteString((char*)temperature);
 8001256:	f107 0308 	add.w	r3, r7, #8
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fdaa 	bl	8000db4 <UARTWriteString>
    UARTWriteString(" C\n");
 8001260:	4808      	ldr	r0, [pc, #32]	; (8001284 <getTemperatureTask+0xb8>)
 8001262:	f7ff fda7 	bl	8000db4 <UARTWriteString>
    osDelay(1000);
 8001266:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800126a:	f003 f9b7 	bl	80045dc <osDelay>
  {
 800126e:	e7ba      	b.n	80011e6 <getTemperatureTask+0x1a>
 8001270:	40010800 	.word	0x40010800
 8001274:	20001bb0 	.word	0x20001bb0
 8001278:	40380000 	.word	0x40380000
 800127c:	2000020c 	.word	0x2000020c
 8001280:	08008680 	.word	0x08008680
 8001284:	08008684 	.word	0x08008684

08001288 <redLedCtrlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_redLedCtrlTask */
void redLedCtrlTask(void *argument)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN redLedCtrlTask */
  /* Infinite loop */
  for(;;)
  {
    if(ledBlinkRatePerSecond[LED_RED] > 0){
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <redLedCtrlTask+0x38>)
 8001292:	789b      	ldrb	r3, [r3, #2]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00e      	beq.n	80012b6 <redLedCtrlTask+0x2e>
      HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin);
 8001298:	2108      	movs	r1, #8
 800129a:	480a      	ldr	r0, [pc, #40]	; (80012c4 <redLedCtrlTask+0x3c>)
 800129c:	f001 faab 	bl	80027f6 <HAL_GPIO_TogglePin>
      osDelay(1000 / 2 / ledBlinkRatePerSecond[LED_RED]);
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <redLedCtrlTask+0x38>)
 80012a2:	789b      	ldrb	r3, [r3, #2]
 80012a4:	461a      	mov	r2, r3
 80012a6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f003 f994 	bl	80045dc <osDelay>
 80012b4:	e7ec      	b.n	8001290 <redLedCtrlTask+0x8>
    }
    else{
      osDelay( 1000 );
 80012b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012ba:	f003 f98f 	bl	80045dc <osDelay>
    if(ledBlinkRatePerSecond[LED_RED] > 0){
 80012be:	e7e7      	b.n	8001290 <redLedCtrlTask+0x8>
 80012c0:	20000200 	.word	0x20000200
 80012c4:	40010c00 	.word	0x40010c00

080012c8 <myButtonCtrlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_myButtonCtrlTask */
void myButtonCtrlTask(void *argument)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN myButtonCtrlTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 80012d0:	2064      	movs	r0, #100	; 0x64
 80012d2:	f003 f983 	bl	80045dc <osDelay>
    if(HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == GPIO_PIN_RESET){
 80012d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012da:	480a      	ldr	r0, [pc, #40]	; (8001304 <myButtonCtrlTask+0x3c>)
 80012dc:	f001 fa5c 	bl	8002798 <HAL_GPIO_ReadPin>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f4      	bne.n	80012d0 <myButtonCtrlTask+0x8>
      osDelay(40);
 80012e6:	2028      	movs	r0, #40	; 0x28
 80012e8:	f003 f978 	bl	80045dc <osDelay>
      if(HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == GPIO_PIN_RESET){
 80012ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012f0:	4804      	ldr	r0, [pc, #16]	; (8001304 <myButtonCtrlTask+0x3c>)
 80012f2:	f001 fa51 	bl	8002798 <HAL_GPIO_ReadPin>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1e9      	bne.n	80012d0 <myButtonCtrlTask+0x8>
    	UARTWriteString("Button was pressed\n");
 80012fc:	4802      	ldr	r0, [pc, #8]	; (8001308 <myButtonCtrlTask+0x40>)
 80012fe:	f7ff fd59 	bl	8000db4 <UARTWriteString>
    osDelay(100);
 8001302:	e7e5      	b.n	80012d0 <myButtonCtrlTask+0x8>
 8001304:	40010800 	.word	0x40010800
 8001308:	08008688 	.word	0x08008688

0800130c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a04      	ldr	r2, [pc, #16]	; (800132c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d101      	bne.n	8001322 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800131e:	f000 fa67 	bl	80017f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40000400 	.word	0x40000400

08001330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr

0800133c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001342:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <HAL_MspInit+0x6c>)
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	4a18      	ldr	r2, [pc, #96]	; (80013a8 <HAL_MspInit+0x6c>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6193      	str	r3, [r2, #24]
 800134e:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <HAL_MspInit+0x6c>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135a:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <HAL_MspInit+0x6c>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <HAL_MspInit+0x6c>)
 8001360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001364:	61d3      	str	r3, [r2, #28]
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <HAL_MspInit+0x6c>)
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	2005      	movs	r0, #5
 8001378:	f001 f813 	bl	80023a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800137c:	2005      	movs	r0, #5
 800137e:	f001 f82c 	bl	80023da <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_MspInit+0x70>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	4a04      	ldr	r2, [pc, #16]	; (80013ac <HAL_MspInit+0x70>)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800139e:	bf00      	nop
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40010000 	.word	0x40010000

080013b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 0310 	add.w	r3, r7, #16
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a18      	ldr	r2, [pc, #96]	; (800142c <HAL_ADC_MspInit+0x7c>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d129      	bne.n	8001424 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013d0:	4b17      	ldr	r3, [pc, #92]	; (8001430 <HAL_ADC_MspInit+0x80>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	4a16      	ldr	r2, [pc, #88]	; (8001430 <HAL_ADC_MspInit+0x80>)
 80013d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013da:	6193      	str	r3, [r2, #24]
 80013dc:	4b14      	ldr	r3, [pc, #80]	; (8001430 <HAL_ADC_MspInit+0x80>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <HAL_ADC_MspInit+0x80>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	4a10      	ldr	r2, [pc, #64]	; (8001430 <HAL_ADC_MspInit+0x80>)
 80013ee:	f043 0304 	orr.w	r3, r3, #4
 80013f2:	6193      	str	r3, [r2, #24]
 80013f4:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <HAL_ADC_MspInit+0x80>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = LM35_Pin;
 8001400:	2320      	movs	r3, #32
 8001402:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001404:	2303      	movs	r3, #3
 8001406:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LM35_GPIO_Port, &GPIO_InitStruct);
 8001408:	f107 0310 	add.w	r3, r7, #16
 800140c:	4619      	mov	r1, r3
 800140e:	4809      	ldr	r0, [pc, #36]	; (8001434 <HAL_ADC_MspInit+0x84>)
 8001410:	f001 f868 	bl	80024e4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001414:	2200      	movs	r2, #0
 8001416:	2100      	movs	r1, #0
 8001418:	2012      	movs	r0, #18
 800141a:	f000 ffc2 	bl	80023a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800141e:	2012      	movs	r0, #18
 8001420:	f000 ffdb 	bl	80023da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001424:	bf00      	nop
 8001426:	3720      	adds	r7, #32
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40012400 	.word	0x40012400
 8001430:	40021000 	.word	0x40021000
 8001434:	40010800 	.word	0x40010800

08001438 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0310 	add.w	r3, r7, #16
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a15      	ldr	r2, [pc, #84]	; (80014a8 <HAL_I2C_MspInit+0x70>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d123      	bne.n	80014a0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001458:	4b14      	ldr	r3, [pc, #80]	; (80014ac <HAL_I2C_MspInit+0x74>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	4a13      	ldr	r2, [pc, #76]	; (80014ac <HAL_I2C_MspInit+0x74>)
 800145e:	f043 0308 	orr.w	r3, r3, #8
 8001462:	6193      	str	r3, [r2, #24]
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <HAL_I2C_MspInit+0x74>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	f003 0308 	and.w	r3, r3, #8
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001470:	23c0      	movs	r3, #192	; 0xc0
 8001472:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001474:	2312      	movs	r3, #18
 8001476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001478:	2303      	movs	r3, #3
 800147a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147c:	f107 0310 	add.w	r3, r7, #16
 8001480:	4619      	mov	r1, r3
 8001482:	480b      	ldr	r0, [pc, #44]	; (80014b0 <HAL_I2C_MspInit+0x78>)
 8001484:	f001 f82e 	bl	80024e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <HAL_I2C_MspInit+0x74>)
 800148a:	69db      	ldr	r3, [r3, #28]
 800148c:	4a07      	ldr	r2, [pc, #28]	; (80014ac <HAL_I2C_MspInit+0x74>)
 800148e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001492:	61d3      	str	r3, [r2, #28]
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <HAL_I2C_MspInit+0x74>)
 8001496:	69db      	ldr	r3, [r3, #28]
 8001498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014a0:	bf00      	nop
 80014a2:	3720      	adds	r7, #32
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40005400 	.word	0x40005400
 80014ac:	40021000 	.word	0x40021000
 80014b0:	40010c00 	.word	0x40010c00

080014b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0310 	add.w	r3, r7, #16
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a1f      	ldr	r2, [pc, #124]	; (800154c <HAL_UART_MspInit+0x98>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d137      	bne.n	8001544 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014d4:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <HAL_UART_MspInit+0x9c>)
 80014d6:	69db      	ldr	r3, [r3, #28]
 80014d8:	4a1d      	ldr	r2, [pc, #116]	; (8001550 <HAL_UART_MspInit+0x9c>)
 80014da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014de:	61d3      	str	r3, [r2, #28]
 80014e0:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <HAL_UART_MspInit+0x9c>)
 80014e2:	69db      	ldr	r3, [r3, #28]
 80014e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ec:	4b18      	ldr	r3, [pc, #96]	; (8001550 <HAL_UART_MspInit+0x9c>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	4a17      	ldr	r2, [pc, #92]	; (8001550 <HAL_UART_MspInit+0x9c>)
 80014f2:	f043 0304 	orr.w	r3, r3, #4
 80014f6:	6193      	str	r3, [r2, #24]
 80014f8:	4b15      	ldr	r3, [pc, #84]	; (8001550 <HAL_UART_MspInit+0x9c>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001504:	2304      	movs	r3, #4
 8001506:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001510:	f107 0310 	add.w	r3, r7, #16
 8001514:	4619      	mov	r1, r3
 8001516:	480f      	ldr	r0, [pc, #60]	; (8001554 <HAL_UART_MspInit+0xa0>)
 8001518:	f000 ffe4 	bl	80024e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800151c:	2308      	movs	r3, #8
 800151e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001528:	f107 0310 	add.w	r3, r7, #16
 800152c:	4619      	mov	r1, r3
 800152e:	4809      	ldr	r0, [pc, #36]	; (8001554 <HAL_UART_MspInit+0xa0>)
 8001530:	f000 ffd8 	bl	80024e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001534:	2200      	movs	r2, #0
 8001536:	2100      	movs	r1, #0
 8001538:	2026      	movs	r0, #38	; 0x26
 800153a:	f000 ff32 	bl	80023a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800153e:	2026      	movs	r0, #38	; 0x26
 8001540:	f000 ff4b 	bl	80023da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001544:	bf00      	nop
 8001546:	3720      	adds	r7, #32
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40004400 	.word	0x40004400
 8001550:	40021000 	.word	0x40021000
 8001554:	40010800 	.word	0x40010800

08001558 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08c      	sub	sp, #48	; 0x30
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8001568:	2200      	movs	r2, #0
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	201d      	movs	r0, #29
 800156e:	f000 ff18 	bl	80023a2 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001572:	201d      	movs	r0, #29
 8001574:	f000 ff31 	bl	80023da <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001578:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <HAL_InitTick+0xa0>)
 800157a:	69db      	ldr	r3, [r3, #28]
 800157c:	4a1e      	ldr	r2, [pc, #120]	; (80015f8 <HAL_InitTick+0xa0>)
 800157e:	f043 0302 	orr.w	r3, r3, #2
 8001582:	61d3      	str	r3, [r2, #28]
 8001584:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <HAL_InitTick+0xa0>)
 8001586:	69db      	ldr	r3, [r3, #28]
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001590:	f107 0210 	add.w	r2, r7, #16
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	4611      	mov	r1, r2
 800159a:	4618      	mov	r0, r3
 800159c:	f001 fe7a 	bl	8003294 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80015a0:	f001 fe50 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 80015a4:	4603      	mov	r3, r0
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80015aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ac:	4a13      	ldr	r2, [pc, #76]	; (80015fc <HAL_InitTick+0xa4>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	0c9b      	lsrs	r3, r3, #18
 80015b4:	3b01      	subs	r3, #1
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <HAL_InitTick+0xa8>)
 80015ba:	4a12      	ldr	r2, [pc, #72]	; (8001604 <HAL_InitTick+0xac>)
 80015bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <HAL_InitTick+0xa8>)
 80015c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015c4:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80015c6:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <HAL_InitTick+0xa8>)
 80015c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ca:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <HAL_InitTick+0xa8>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <HAL_InitTick+0xa8>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80015d8:	4809      	ldr	r0, [pc, #36]	; (8001600 <HAL_InitTick+0xa8>)
 80015da:	f002 f81b 	bl	8003614 <HAL_TIM_Base_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d104      	bne.n	80015ee <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 80015e4:	4806      	ldr	r0, [pc, #24]	; (8001600 <HAL_InitTick+0xa8>)
 80015e6:	f002 f86d 	bl	80036c4 <HAL_TIM_Base_Start_IT>
 80015ea:	4603      	mov	r3, r0
 80015ec:	e000      	b.n	80015f0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3730      	adds	r7, #48	; 0x30
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40021000 	.word	0x40021000
 80015fc:	431bde83 	.word	0x431bde83
 8001600:	20001c28 	.word	0x20001c28
 8001604:	40000400 	.word	0x40000400

08001608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr

08001614 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <HardFault_Handler+0x4>

0800161a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800161e:	e7fe      	b.n	800161e <MemManage_Handler+0x4>

08001620 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <BusFault_Handler+0x4>

08001626 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800162a:	e7fe      	b.n	800162a <UsageFault_Handler+0x4>

0800162c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <ADC1_2_IRQHandler+0x10>)
 800164a:	f000 fb9b 	bl	8001d84 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20001bb0 	.word	0x20001bb0

08001658 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <TIM3_IRQHandler+0x10>)
 800165e:	f002 f883 	bl	8003768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20001c28 	.word	0x20001c28

0800166c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  HAL_UART_Receive(&huart2, (uint8_t*)&bluetoothReceiveCommand[bufferIndex++], 1, 10);
 8001670:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <USART2_IRQHandler+0x3c>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	1c5a      	adds	r2, r3, #1
 8001676:	b2d1      	uxtb	r1, r2
 8001678:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <USART2_IRQHandler+0x3c>)
 800167a:	7011      	strb	r1, [r2, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <USART2_IRQHandler+0x40>)
 8001680:	18d1      	adds	r1, r2, r3
 8001682:	230a      	movs	r3, #10
 8001684:	2201      	movs	r2, #1
 8001686:	480a      	ldr	r0, [pc, #40]	; (80016b0 <USART2_IRQHandler+0x44>)
 8001688:	f002 faed 	bl	8003c66 <HAL_UART_Receive>

  if(bluetoothReceiveCommand[bufferIndex-1] == '\n')
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <USART2_IRQHandler+0x3c>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	3b01      	subs	r3, #1
 8001692:	4a06      	ldr	r2, [pc, #24]	; (80016ac <USART2_IRQHandler+0x40>)
 8001694:	5cd3      	ldrb	r3, [r2, r3]
 8001696:	2b0a      	cmp	r3, #10
 8001698:	d101      	bne.n	800169e <USART2_IRQHandler+0x32>
	URATCommandParser();
 800169a:	f7ff fb19 	bl	8000cd0 <URATCommandParser>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800169e:	4804      	ldr	r0, [pc, #16]	; (80016b0 <USART2_IRQHandler+0x44>)
 80016a0:	f002 fb80 	bl	8003da4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200001fc 	.word	0x200001fc
 80016ac:	20001b20 	.word	0x20001b20
 80016b0:	20001be4 	.word	0x20001be4

080016b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016bc:	4a14      	ldr	r2, [pc, #80]	; (8001710 <_sbrk+0x5c>)
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <_sbrk+0x60>)
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016c8:	4b13      	ldr	r3, [pc, #76]	; (8001718 <_sbrk+0x64>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d102      	bne.n	80016d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <_sbrk+0x64>)
 80016d2:	4a12      	ldr	r2, [pc, #72]	; (800171c <_sbrk+0x68>)
 80016d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016d6:	4b10      	ldr	r3, [pc, #64]	; (8001718 <_sbrk+0x64>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d207      	bcs.n	80016f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e4:	f005 fb2a 	bl	8006d3c <__errno>
 80016e8:	4602      	mov	r2, r0
 80016ea:	230c      	movs	r3, #12
 80016ec:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295
 80016f2:	e009      	b.n	8001708 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <_sbrk+0x64>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016fa:	4b07      	ldr	r3, [pc, #28]	; (8001718 <_sbrk+0x64>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	4a05      	ldr	r2, [pc, #20]	; (8001718 <_sbrk+0x64>)
 8001704:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001706:	68fb      	ldr	r3, [r7, #12]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20005000 	.word	0x20005000
 8001714:	00000400 	.word	0x00000400
 8001718:	20000204 	.word	0x20000204
 800171c:	20001cb8 	.word	0x20001cb8

08001720 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr
 800172c:	0000      	movs	r0, r0
	...

08001730 <HAL_ADC_ConvCpltCallback>:

uint32_t adcBuf = 0;
float tempCelcius = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  tempCelcius = adcBuf*.322;   // convert value from adc buffer to temperature in Centigrade
 8001738:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <HAL_ADC_ConvCpltCallback+0x40>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7fe fe51 	bl	80003e4 <__aeabi_ui2d>
 8001742:	a309      	add	r3, pc, #36	; (adr r3, 8001768 <HAL_ADC_ConvCpltCallback+0x38>)
 8001744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001748:	f7fe fec6 	bl	80004d8 <__aeabi_dmul>
 800174c:	4603      	mov	r3, r0
 800174e:	460c      	mov	r4, r1
 8001750:	4618      	mov	r0, r3
 8001752:	4621      	mov	r1, r4
 8001754:	f7ff f982 	bl	8000a5c <__aeabi_d2f>
 8001758:	4602      	mov	r2, r0
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_ADC_ConvCpltCallback+0x44>)
 800175c:	601a      	str	r2, [r3, #0]
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	bd90      	pop	{r4, r7, pc}
 8001766:	bf00      	nop
 8001768:	e353f7cf 	.word	0xe353f7cf
 800176c:	3fd49ba5 	.word	0x3fd49ba5
 8001770:	20000208 	.word	0x20000208
 8001774:	2000020c 	.word	0x2000020c

08001778 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001778:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800177a:	e003      	b.n	8001784 <LoopCopyDataInit>

0800177c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800177c:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800177e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001780:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001782:	3104      	adds	r1, #4

08001784 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001784:	480a      	ldr	r0, [pc, #40]	; (80017b0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001788:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800178a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800178c:	d3f6      	bcc.n	800177c <CopyDataInit>
  ldr r2, =_sbss
 800178e:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001790:	e002      	b.n	8001798 <LoopFillZerobss>

08001792 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001794:	f842 3b04 	str.w	r3, [r2], #4

08001798 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <LoopFillZerobss+0x24>)
  cmp r2, r3
 800179a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800179c:	d3f9      	bcc.n	8001792 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800179e:	f7ff ffbf 	bl	8001720 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017a2:	f005 fad1 	bl	8006d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017a6:	f7ff fb1b 	bl	8000de0 <main>
  bx lr
 80017aa:	4770      	bx	lr
  ldr r3, =_sidata
 80017ac:	080089a4 	.word	0x080089a4
  ldr r0, =_sdata
 80017b0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80017b4:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 80017b8:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 80017bc:	20001cb8 	.word	0x20001cb8

080017c0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017c0:	e7fe      	b.n	80017c0 <CAN1_RX1_IRQHandler>
	...

080017c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <HAL_Init+0x28>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a07      	ldr	r2, [pc, #28]	; (80017ec <HAL_Init+0x28>)
 80017ce:	f043 0310 	orr.w	r3, r3, #16
 80017d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d4:	2003      	movs	r0, #3
 80017d6:	f000 fdd9 	bl	800238c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017da:	2000      	movs	r0, #0
 80017dc:	f7ff febc 	bl	8001558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017e0:	f7ff fdac 	bl	800133c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40022000 	.word	0x40022000

080017f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <HAL_IncTick+0x1c>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b05      	ldr	r3, [pc, #20]	; (8001810 <HAL_IncTick+0x20>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	4a03      	ldr	r2, [pc, #12]	; (8001810 <HAL_IncTick+0x20>)
 8001802:	6013      	str	r3, [r2, #0]
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	20000008 	.word	0x20000008
 8001810:	20001c70 	.word	0x20001c70

08001814 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return uwTick;
 8001818:	4b02      	ldr	r3, [pc, #8]	; (8001824 <HAL_GetTick+0x10>)
 800181a:	681b      	ldr	r3, [r3, #0]
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	20001c70 	.word	0x20001c70

08001828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001830:	f7ff fff0 	bl	8001814 <HAL_GetTick>
 8001834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001840:	d005      	beq.n	800184e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <HAL_Delay+0x40>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4413      	add	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800184e:	bf00      	nop
 8001850:	f7ff ffe0 	bl	8001814 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	429a      	cmp	r2, r3
 800185e:	d8f7      	bhi.n	8001850 <HAL_Delay+0x28>
  {
  }
}
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000008 	.word	0x20000008

0800186c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001878:	2300      	movs	r3, #0
 800187a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e0be      	b.n	8001a0c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001898:	2b00      	cmp	r3, #0
 800189a:	d109      	bne.n	80018b0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff fd80 	bl	80013b0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 fc7d 	bl	80021b0 <ADC_ConversionStop_Disable>
 80018b6:	4603      	mov	r3, r0
 80018b8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018be:	f003 0310 	and.w	r3, r3, #16
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f040 8099 	bne.w	80019fa <HAL_ADC_Init+0x18e>
 80018c8:	7dfb      	ldrb	r3, [r7, #23]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f040 8095 	bne.w	80019fa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018d8:	f023 0302 	bic.w	r3, r3, #2
 80018dc:	f043 0202 	orr.w	r2, r3, #2
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018ec:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	7b1b      	ldrb	r3, [r3, #12]
 80018f2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80018f4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001904:	d003      	beq.n	800190e <HAL_ADC_Init+0xa2>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d102      	bne.n	8001914 <HAL_ADC_Init+0xa8>
 800190e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001912:	e000      	b.n	8001916 <HAL_ADC_Init+0xaa>
 8001914:	2300      	movs	r3, #0
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	7d1b      	ldrb	r3, [r3, #20]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d119      	bne.n	8001958 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	7b1b      	ldrb	r3, [r3, #12]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d109      	bne.n	8001940 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	3b01      	subs	r3, #1
 8001932:	035a      	lsls	r2, r3, #13
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	4313      	orrs	r3, r2
 8001938:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	e00b      	b.n	8001958 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001944:	f043 0220 	orr.w	r2, r3, #32
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001950:	f043 0201 	orr.w	r2, r3, #1
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	430a      	orrs	r2, r1
 800196a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	4b28      	ldr	r3, [pc, #160]	; (8001a14 <HAL_ADC_Init+0x1a8>)
 8001974:	4013      	ands	r3, r2
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6812      	ldr	r2, [r2, #0]
 800197a:	68b9      	ldr	r1, [r7, #8]
 800197c:	430b      	orrs	r3, r1
 800197e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001988:	d003      	beq.n	8001992 <HAL_ADC_Init+0x126>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d104      	bne.n	800199c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	3b01      	subs	r3, #1
 8001998:	051b      	lsls	r3, r3, #20
 800199a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	4b18      	ldr	r3, [pc, #96]	; (8001a18 <HAL_ADC_Init+0x1ac>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d10b      	bne.n	80019d8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ca:	f023 0303 	bic.w	r3, r3, #3
 80019ce:	f043 0201 	orr.w	r2, r3, #1
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019d6:	e018      	b.n	8001a0a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019dc:	f023 0312 	bic.w	r3, r3, #18
 80019e0:	f043 0210 	orr.w	r2, r3, #16
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ec:	f043 0201 	orr.w	r2, r3, #1
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019f8:	e007      	b.n	8001a0a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fe:	f043 0210 	orr.w	r2, r3, #16
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	ffe1f7fd 	.word	0xffe1f7fd
 8001a18:	ff1f0efe 	.word	0xff1f0efe

08001a1c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a24:	2300      	movs	r3, #0
 8001a26:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d101      	bne.n	8001a36 <HAL_ADC_Start+0x1a>
 8001a32:	2302      	movs	r3, #2
 8001a34:	e098      	b.n	8001b68 <HAL_ADC_Start+0x14c>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 fb64 	bl	800210c <ADC_Enable>
 8001a44:	4603      	mov	r3, r0
 8001a46:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f040 8087 	bne.w	8001b5e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a58:	f023 0301 	bic.w	r3, r3, #1
 8001a5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a41      	ldr	r2, [pc, #260]	; (8001b70 <HAL_ADC_Start+0x154>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d105      	bne.n	8001a7a <HAL_ADC_Start+0x5e>
 8001a6e:	4b41      	ldr	r3, [pc, #260]	; (8001b74 <HAL_ADC_Start+0x158>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d115      	bne.n	8001aa6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d026      	beq.n	8001ae2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a9c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001aa4:	e01d      	b.n	8001ae2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aaa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a2f      	ldr	r2, [pc, #188]	; (8001b74 <HAL_ADC_Start+0x158>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d004      	beq.n	8001ac6 <HAL_ADC_Start+0xaa>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a2b      	ldr	r2, [pc, #172]	; (8001b70 <HAL_ADC_Start+0x154>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d10d      	bne.n	8001ae2 <HAL_ADC_Start+0xc6>
 8001ac6:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <HAL_ADC_Start+0x158>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d007      	beq.n	8001ae2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ada:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d006      	beq.n	8001afc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af2:	f023 0206 	bic.w	r2, r3, #6
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001afa:	e002      	b.n	8001b02 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f06f 0202 	mvn.w	r2, #2
 8001b12:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b1e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b22:	d113      	bne.n	8001b4c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b28:	4a11      	ldr	r2, [pc, #68]	; (8001b70 <HAL_ADC_Start+0x154>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d105      	bne.n	8001b3a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b2e:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <HAL_ADC_Start+0x158>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d108      	bne.n	8001b4c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	e00c      	b.n	8001b66 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	e003      	b.n	8001b66 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40012800 	.word	0x40012800
 8001b74:	40012400 	.word	0x40012400

08001b78 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b78:	b590      	push	{r4, r7, lr}
 8001b7a:	b087      	sub	sp, #28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001b8e:	f7ff fe41 	bl	8001814 <HAL_GetTick>
 8001b92:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00b      	beq.n	8001bba <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba6:	f043 0220 	orr.w	r2, r3, #32
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e0c8      	b.n	8001d4c <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d12a      	bne.n	8001c1e <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d123      	bne.n	8001c1e <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001bd6:	e01a      	b.n	8001c0e <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bde:	d016      	beq.n	8001c0e <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d007      	beq.n	8001bf6 <HAL_ADC_PollForConversion+0x7e>
 8001be6:	f7ff fe15 	bl	8001814 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d20b      	bcs.n	8001c0e <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfa:	f043 0204 	orr.w	r2, r3, #4
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e09e      	b.n	8001d4c <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0dd      	beq.n	8001bd8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c1c:	e06c      	b.n	8001cf8 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001c1e:	4b4d      	ldr	r3, [pc, #308]	; (8001d54 <HAL_ADC_PollForConversion+0x1dc>)
 8001c20:	681c      	ldr	r4, [r3, #0]
 8001c22:	2002      	movs	r0, #2
 8001c24:	f001 fc3a 	bl	800349c <HAL_RCCEx_GetPeriphCLKFreq>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6919      	ldr	r1, [r3, #16]
 8001c34:	4b48      	ldr	r3, [pc, #288]	; (8001d58 <HAL_ADC_PollForConversion+0x1e0>)
 8001c36:	400b      	ands	r3, r1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d118      	bne.n	8001c6e <HAL_ADC_PollForConversion+0xf6>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68d9      	ldr	r1, [r3, #12]
 8001c42:	4b46      	ldr	r3, [pc, #280]	; (8001d5c <HAL_ADC_PollForConversion+0x1e4>)
 8001c44:	400b      	ands	r3, r1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d111      	bne.n	8001c6e <HAL_ADC_PollForConversion+0xf6>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6919      	ldr	r1, [r3, #16]
 8001c50:	4b43      	ldr	r3, [pc, #268]	; (8001d60 <HAL_ADC_PollForConversion+0x1e8>)
 8001c52:	400b      	ands	r3, r1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d108      	bne.n	8001c6a <HAL_ADC_PollForConversion+0xf2>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68d9      	ldr	r1, [r3, #12]
 8001c5e:	4b41      	ldr	r3, [pc, #260]	; (8001d64 <HAL_ADC_PollForConversion+0x1ec>)
 8001c60:	400b      	ands	r3, r1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_ADC_PollForConversion+0xf2>
 8001c66:	2314      	movs	r3, #20
 8001c68:	e020      	b.n	8001cac <HAL_ADC_PollForConversion+0x134>
 8001c6a:	2329      	movs	r3, #41	; 0x29
 8001c6c:	e01e      	b.n	8001cac <HAL_ADC_PollForConversion+0x134>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6919      	ldr	r1, [r3, #16]
 8001c74:	4b3a      	ldr	r3, [pc, #232]	; (8001d60 <HAL_ADC_PollForConversion+0x1e8>)
 8001c76:	400b      	ands	r3, r1
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d106      	bne.n	8001c8a <HAL_ADC_PollForConversion+0x112>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68d9      	ldr	r1, [r3, #12]
 8001c82:	4b38      	ldr	r3, [pc, #224]	; (8001d64 <HAL_ADC_PollForConversion+0x1ec>)
 8001c84:	400b      	ands	r3, r1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00d      	beq.n	8001ca6 <HAL_ADC_PollForConversion+0x12e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6919      	ldr	r1, [r3, #16]
 8001c90:	4b35      	ldr	r3, [pc, #212]	; (8001d68 <HAL_ADC_PollForConversion+0x1f0>)
 8001c92:	400b      	ands	r3, r1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d108      	bne.n	8001caa <HAL_ADC_PollForConversion+0x132>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68d9      	ldr	r1, [r3, #12]
 8001c9e:	4b32      	ldr	r3, [pc, #200]	; (8001d68 <HAL_ADC_PollForConversion+0x1f0>)
 8001ca0:	400b      	ands	r3, r1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_ADC_PollForConversion+0x132>
 8001ca6:	2354      	movs	r3, #84	; 0x54
 8001ca8:	e000      	b.n	8001cac <HAL_ADC_PollForConversion+0x134>
 8001caa:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001cac:	fb02 f303 	mul.w	r3, r2, r3
 8001cb0:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001cb2:	e01d      	b.n	8001cf0 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cba:	d016      	beq.n	8001cea <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d007      	beq.n	8001cd2 <HAL_ADC_PollForConversion+0x15a>
 8001cc2:	f7ff fda7 	bl	8001814 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d20b      	bcs.n	8001cea <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd6:	f043 0204 	orr.w	r2, r3, #4
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e030      	b.n	8001d4c <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	3301      	adds	r3, #1
 8001cee:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d8dd      	bhi.n	8001cb4 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f06f 0212 	mvn.w	r2, #18
 8001d00:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d18:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d1c:	d115      	bne.n	8001d4a <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d111      	bne.n	8001d4a <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d105      	bne.n	8001d4a <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d42:	f043 0201 	orr.w	r2, r3, #1
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	371c      	adds	r7, #28
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd90      	pop	{r4, r7, pc}
 8001d54:	20000000 	.word	0x20000000
 8001d58:	24924924 	.word	0x24924924
 8001d5c:	00924924 	.word	0x00924924
 8001d60:	12492492 	.word	0x12492492
 8001d64:	00492492 	.word	0x00492492
 8001d68:	00249249 	.word	0x00249249

08001d6c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 0320 	and.w	r3, r3, #32
 8001d96:	2b20      	cmp	r3, #32
 8001d98:	d140      	bne.n	8001e1c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d139      	bne.n	8001e1c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dac:	f003 0310 	and.w	r3, r3, #16
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d105      	bne.n	8001dc0 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001dca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001dce:	d11d      	bne.n	8001e0c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d119      	bne.n	8001e0c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0220 	bic.w	r2, r2, #32
 8001de6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d105      	bne.n	8001e0c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e04:	f043 0201 	orr.w	r2, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff fc8f 	bl	8001730 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f06f 0212 	mvn.w	r2, #18
 8001e1a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e26:	2b80      	cmp	r3, #128	; 0x80
 8001e28:	d14f      	bne.n	8001eca <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b04      	cmp	r3, #4
 8001e36:	d148      	bne.n	8001eca <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3c:	f003 0310 	and.w	r3, r3, #16
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d105      	bne.n	8001e50 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e48:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001e5a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001e5e:	d012      	beq.n	8001e86 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d125      	bne.n	8001eba <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001e78:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001e7c:	d11d      	bne.n	8001eba <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d119      	bne.n	8001eba <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e94:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d105      	bne.n	8001eba <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb2:	f043 0201 	orr.w	r2, r3, #1
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f9b2 	bl	8002224 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 020c 	mvn.w	r2, #12
 8001ec8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed4:	2b40      	cmp	r3, #64	; 0x40
 8001ed6:	d114      	bne.n	8001f02 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d10d      	bne.n	8001f02 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f809 	bl	8001f0a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f06f 0201 	mvn.w	r2, #1
 8001f00:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr

08001f1c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f26:	2300      	movs	r3, #0
 8001f28:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d101      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x20>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	e0dc      	b.n	80020f6 <HAL_ADC_ConfigChannel+0x1da>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b06      	cmp	r3, #6
 8001f4a:	d81c      	bhi.n	8001f86 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3b05      	subs	r3, #5
 8001f5e:	221f      	movs	r2, #31
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	4019      	ands	r1, r3
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	6818      	ldr	r0, [r3, #0]
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	3b05      	subs	r3, #5
 8001f78:	fa00 f203 	lsl.w	r2, r0, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	635a      	str	r2, [r3, #52]	; 0x34
 8001f84:	e03c      	b.n	8002000 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b0c      	cmp	r3, #12
 8001f8c:	d81c      	bhi.n	8001fc8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3b23      	subs	r3, #35	; 0x23
 8001fa0:	221f      	movs	r2, #31
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	4019      	ands	r1, r3
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	6818      	ldr	r0, [r3, #0]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3b23      	subs	r3, #35	; 0x23
 8001fba:	fa00 f203 	lsl.w	r2, r0, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	631a      	str	r2, [r3, #48]	; 0x30
 8001fc6:	e01b      	b.n	8002000 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	3b41      	subs	r3, #65	; 0x41
 8001fda:	221f      	movs	r2, #31
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	4019      	ands	r1, r3
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	6818      	ldr	r0, [r3, #0]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3b41      	subs	r3, #65	; 0x41
 8001ff4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2b09      	cmp	r3, #9
 8002006:	d91c      	bls.n	8002042 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68d9      	ldr	r1, [r3, #12]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	4613      	mov	r3, r2
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	4413      	add	r3, r2
 8002018:	3b1e      	subs	r3, #30
 800201a:	2207      	movs	r2, #7
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	4019      	ands	r1, r3
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	6898      	ldr	r0, [r3, #8]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4613      	mov	r3, r2
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	4413      	add	r3, r2
 8002032:	3b1e      	subs	r3, #30
 8002034:	fa00 f203 	lsl.w	r2, r0, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	60da      	str	r2, [r3, #12]
 8002040:	e019      	b.n	8002076 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6919      	ldr	r1, [r3, #16]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4613      	mov	r3, r2
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4413      	add	r3, r2
 8002052:	2207      	movs	r2, #7
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	4019      	ands	r1, r3
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	6898      	ldr	r0, [r3, #8]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4613      	mov	r3, r2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4413      	add	r3, r2
 800206a:	fa00 f203 	lsl.w	r2, r0, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2b10      	cmp	r3, #16
 800207c:	d003      	beq.n	8002086 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002082:	2b11      	cmp	r3, #17
 8002084:	d132      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a1d      	ldr	r2, [pc, #116]	; (8002100 <HAL_ADC_ConfigChannel+0x1e4>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d125      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d126      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80020ac:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b10      	cmp	r3, #16
 80020b4:	d11a      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020b6:	4b13      	ldr	r3, [pc, #76]	; (8002104 <HAL_ADC_ConfigChannel+0x1e8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a13      	ldr	r2, [pc, #76]	; (8002108 <HAL_ADC_ConfigChannel+0x1ec>)
 80020bc:	fba2 2303 	umull	r2, r3, r2, r3
 80020c0:	0c9a      	lsrs	r2, r3, #18
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020cc:	e002      	b.n	80020d4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	3b01      	subs	r3, #1
 80020d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f9      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x1b2>
 80020da:	e007      	b.n	80020ec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e0:	f043 0220 	orr.w	r2, r3, #32
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr
 8002100:	40012400 	.word	0x40012400
 8002104:	20000000 	.word	0x20000000
 8002108:	431bde83 	.word	0x431bde83

0800210c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002114:	2300      	movs	r3, #0
 8002116:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b01      	cmp	r3, #1
 8002128:	d039      	beq.n	800219e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f042 0201 	orr.w	r2, r2, #1
 8002138:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800213a:	4b1b      	ldr	r3, [pc, #108]	; (80021a8 <ADC_Enable+0x9c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a1b      	ldr	r2, [pc, #108]	; (80021ac <ADC_Enable+0xa0>)
 8002140:	fba2 2303 	umull	r2, r3, r2, r3
 8002144:	0c9b      	lsrs	r3, r3, #18
 8002146:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002148:	e002      	b.n	8002150 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	3b01      	subs	r3, #1
 800214e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f9      	bne.n	800214a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002156:	f7ff fb5d 	bl	8001814 <HAL_GetTick>
 800215a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800215c:	e018      	b.n	8002190 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800215e:	f7ff fb59 	bl	8001814 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d911      	bls.n	8002190 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002170:	f043 0210 	orr.w	r2, r3, #16
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217c:	f043 0201 	orr.w	r2, r3, #1
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e007      	b.n	80021a0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b01      	cmp	r3, #1
 800219c:	d1df      	bne.n	800215e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20000000 	.word	0x20000000
 80021ac:	431bde83 	.word	0x431bde83

080021b0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d127      	bne.n	800221a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0201 	bic.w	r2, r2, #1
 80021d8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021da:	f7ff fb1b 	bl	8001814 <HAL_GetTick>
 80021de:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021e0:	e014      	b.n	800220c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021e2:	f7ff fb17 	bl	8001814 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d90d      	bls.n	800220c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f4:	f043 0210 	orr.w	r2, r3, #16
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002200:	f043 0201 	orr.w	r2, r3, #1
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e007      	b.n	800221c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b01      	cmp	r3, #1
 8002218:	d0e3      	beq.n	80021e2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr
	...

08002238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <__NVIC_SetPriorityGrouping+0x44>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002254:	4013      	ands	r3, r2
 8002256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002260:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800226a:	4a04      	ldr	r2, [pc, #16]	; (800227c <__NVIC_SetPriorityGrouping+0x44>)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	60d3      	str	r3, [r2, #12]
}
 8002270:	bf00      	nop
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	bc80      	pop	{r7}
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002284:	4b04      	ldr	r3, [pc, #16]	; (8002298 <__NVIC_GetPriorityGrouping+0x18>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	0a1b      	lsrs	r3, r3, #8
 800228a:	f003 0307 	and.w	r3, r3, #7
}
 800228e:	4618      	mov	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	db0b      	blt.n	80022c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	f003 021f 	and.w	r2, r3, #31
 80022b4:	4906      	ldr	r1, [pc, #24]	; (80022d0 <__NVIC_EnableIRQ+0x34>)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	095b      	lsrs	r3, r3, #5
 80022bc:	2001      	movs	r0, #1
 80022be:	fa00 f202 	lsl.w	r2, r0, r2
 80022c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr
 80022d0:	e000e100 	.word	0xe000e100

080022d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	6039      	str	r1, [r7, #0]
 80022de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	db0a      	blt.n	80022fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	490c      	ldr	r1, [pc, #48]	; (8002320 <__NVIC_SetPriority+0x4c>)
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	0112      	lsls	r2, r2, #4
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	440b      	add	r3, r1
 80022f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022fc:	e00a      	b.n	8002314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	b2da      	uxtb	r2, r3
 8002302:	4908      	ldr	r1, [pc, #32]	; (8002324 <__NVIC_SetPriority+0x50>)
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	3b04      	subs	r3, #4
 800230c:	0112      	lsls	r2, r2, #4
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	440b      	add	r3, r1
 8002312:	761a      	strb	r2, [r3, #24]
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000e100 	.word	0xe000e100
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002328:	b480      	push	{r7}
 800232a:	b089      	sub	sp, #36	; 0x24
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f1c3 0307 	rsb	r3, r3, #7
 8002342:	2b04      	cmp	r3, #4
 8002344:	bf28      	it	cs
 8002346:	2304      	movcs	r3, #4
 8002348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	3304      	adds	r3, #4
 800234e:	2b06      	cmp	r3, #6
 8002350:	d902      	bls.n	8002358 <NVIC_EncodePriority+0x30>
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3b03      	subs	r3, #3
 8002356:	e000      	b.n	800235a <NVIC_EncodePriority+0x32>
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800235c:	f04f 32ff 	mov.w	r2, #4294967295
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43da      	mvns	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	401a      	ands	r2, r3
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002370:	f04f 31ff 	mov.w	r1, #4294967295
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	fa01 f303 	lsl.w	r3, r1, r3
 800237a:	43d9      	mvns	r1, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002380:	4313      	orrs	r3, r2
         );
}
 8002382:	4618      	mov	r0, r3
 8002384:	3724      	adds	r7, #36	; 0x24
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr

0800238c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff ff4f 	bl	8002238 <__NVIC_SetPriorityGrouping>
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b086      	sub	sp, #24
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	4603      	mov	r3, r0
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	607a      	str	r2, [r7, #4]
 80023ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023b4:	f7ff ff64 	bl	8002280 <__NVIC_GetPriorityGrouping>
 80023b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	6978      	ldr	r0, [r7, #20]
 80023c0:	f7ff ffb2 	bl	8002328 <NVIC_EncodePriority>
 80023c4:	4602      	mov	r2, r0
 80023c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ff81 	bl	80022d4 <__NVIC_SetPriority>
}
 80023d2:	bf00      	nop
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	4603      	mov	r3, r0
 80023e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff57 	bl	800229c <__NVIC_EnableIRQ>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800240a:	2b02      	cmp	r3, #2
 800240c:	d005      	beq.n	800241a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2204      	movs	r2, #4
 8002412:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
 8002418:	e051      	b.n	80024be <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 020e 	bic.w	r2, r2, #14
 8002428:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0201 	bic.w	r2, r2, #1
 8002438:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a22      	ldr	r2, [pc, #136]	; (80024c8 <HAL_DMA_Abort_IT+0xd0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d029      	beq.n	8002498 <HAL_DMA_Abort_IT+0xa0>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a20      	ldr	r2, [pc, #128]	; (80024cc <HAL_DMA_Abort_IT+0xd4>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d022      	beq.n	8002494 <HAL_DMA_Abort_IT+0x9c>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a1f      	ldr	r2, [pc, #124]	; (80024d0 <HAL_DMA_Abort_IT+0xd8>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d01a      	beq.n	800248e <HAL_DMA_Abort_IT+0x96>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a1d      	ldr	r2, [pc, #116]	; (80024d4 <HAL_DMA_Abort_IT+0xdc>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d012      	beq.n	8002488 <HAL_DMA_Abort_IT+0x90>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a1c      	ldr	r2, [pc, #112]	; (80024d8 <HAL_DMA_Abort_IT+0xe0>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d00a      	beq.n	8002482 <HAL_DMA_Abort_IT+0x8a>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a1a      	ldr	r2, [pc, #104]	; (80024dc <HAL_DMA_Abort_IT+0xe4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d102      	bne.n	800247c <HAL_DMA_Abort_IT+0x84>
 8002476:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800247a:	e00e      	b.n	800249a <HAL_DMA_Abort_IT+0xa2>
 800247c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002480:	e00b      	b.n	800249a <HAL_DMA_Abort_IT+0xa2>
 8002482:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002486:	e008      	b.n	800249a <HAL_DMA_Abort_IT+0xa2>
 8002488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800248c:	e005      	b.n	800249a <HAL_DMA_Abort_IT+0xa2>
 800248e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002492:	e002      	b.n	800249a <HAL_DMA_Abort_IT+0xa2>
 8002494:	2310      	movs	r3, #16
 8002496:	e000      	b.n	800249a <HAL_DMA_Abort_IT+0xa2>
 8002498:	2301      	movs	r3, #1
 800249a:	4a11      	ldr	r2, [pc, #68]	; (80024e0 <HAL_DMA_Abort_IT+0xe8>)
 800249c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	4798      	blx	r3
    } 
  }
  return status;
 80024be:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40020008 	.word	0x40020008
 80024cc:	4002001c 	.word	0x4002001c
 80024d0:	40020030 	.word	0x40020030
 80024d4:	40020044 	.word	0x40020044
 80024d8:	40020058 	.word	0x40020058
 80024dc:	4002006c 	.word	0x4002006c
 80024e0:	40020000 	.word	0x40020000

080024e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b08b      	sub	sp, #44	; 0x2c
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ee:	2300      	movs	r3, #0
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024f2:	2300      	movs	r3, #0
 80024f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024f6:	e127      	b.n	8002748 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024f8:	2201      	movs	r2, #1
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	69fa      	ldr	r2, [r7, #28]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	429a      	cmp	r2, r3
 8002512:	f040 8116 	bne.w	8002742 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b12      	cmp	r3, #18
 800251c:	d034      	beq.n	8002588 <HAL_GPIO_Init+0xa4>
 800251e:	2b12      	cmp	r3, #18
 8002520:	d80d      	bhi.n	800253e <HAL_GPIO_Init+0x5a>
 8002522:	2b02      	cmp	r3, #2
 8002524:	d02b      	beq.n	800257e <HAL_GPIO_Init+0x9a>
 8002526:	2b02      	cmp	r3, #2
 8002528:	d804      	bhi.n	8002534 <HAL_GPIO_Init+0x50>
 800252a:	2b00      	cmp	r3, #0
 800252c:	d031      	beq.n	8002592 <HAL_GPIO_Init+0xae>
 800252e:	2b01      	cmp	r3, #1
 8002530:	d01c      	beq.n	800256c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002532:	e048      	b.n	80025c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002534:	2b03      	cmp	r3, #3
 8002536:	d043      	beq.n	80025c0 <HAL_GPIO_Init+0xdc>
 8002538:	2b11      	cmp	r3, #17
 800253a:	d01b      	beq.n	8002574 <HAL_GPIO_Init+0x90>
          break;
 800253c:	e043      	b.n	80025c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800253e:	4a89      	ldr	r2, [pc, #548]	; (8002764 <HAL_GPIO_Init+0x280>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d026      	beq.n	8002592 <HAL_GPIO_Init+0xae>
 8002544:	4a87      	ldr	r2, [pc, #540]	; (8002764 <HAL_GPIO_Init+0x280>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d806      	bhi.n	8002558 <HAL_GPIO_Init+0x74>
 800254a:	4a87      	ldr	r2, [pc, #540]	; (8002768 <HAL_GPIO_Init+0x284>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d020      	beq.n	8002592 <HAL_GPIO_Init+0xae>
 8002550:	4a86      	ldr	r2, [pc, #536]	; (800276c <HAL_GPIO_Init+0x288>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d01d      	beq.n	8002592 <HAL_GPIO_Init+0xae>
          break;
 8002556:	e036      	b.n	80025c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002558:	4a85      	ldr	r2, [pc, #532]	; (8002770 <HAL_GPIO_Init+0x28c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d019      	beq.n	8002592 <HAL_GPIO_Init+0xae>
 800255e:	4a85      	ldr	r2, [pc, #532]	; (8002774 <HAL_GPIO_Init+0x290>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d016      	beq.n	8002592 <HAL_GPIO_Init+0xae>
 8002564:	4a84      	ldr	r2, [pc, #528]	; (8002778 <HAL_GPIO_Init+0x294>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d013      	beq.n	8002592 <HAL_GPIO_Init+0xae>
          break;
 800256a:	e02c      	b.n	80025c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	623b      	str	r3, [r7, #32]
          break;
 8002572:	e028      	b.n	80025c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	3304      	adds	r3, #4
 800257a:	623b      	str	r3, [r7, #32]
          break;
 800257c:	e023      	b.n	80025c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	3308      	adds	r3, #8
 8002584:	623b      	str	r3, [r7, #32]
          break;
 8002586:	e01e      	b.n	80025c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	330c      	adds	r3, #12
 800258e:	623b      	str	r3, [r7, #32]
          break;
 8002590:	e019      	b.n	80025c6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d102      	bne.n	80025a0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800259a:	2304      	movs	r3, #4
 800259c:	623b      	str	r3, [r7, #32]
          break;
 800259e:	e012      	b.n	80025c6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d105      	bne.n	80025b4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025a8:	2308      	movs	r3, #8
 80025aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69fa      	ldr	r2, [r7, #28]
 80025b0:	611a      	str	r2, [r3, #16]
          break;
 80025b2:	e008      	b.n	80025c6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025b4:	2308      	movs	r3, #8
 80025b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69fa      	ldr	r2, [r7, #28]
 80025bc:	615a      	str	r2, [r3, #20]
          break;
 80025be:	e002      	b.n	80025c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025c0:	2300      	movs	r3, #0
 80025c2:	623b      	str	r3, [r7, #32]
          break;
 80025c4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	2bff      	cmp	r3, #255	; 0xff
 80025ca:	d801      	bhi.n	80025d0 <HAL_GPIO_Init+0xec>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	e001      	b.n	80025d4 <HAL_GPIO_Init+0xf0>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3304      	adds	r3, #4
 80025d4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	2bff      	cmp	r3, #255	; 0xff
 80025da:	d802      	bhi.n	80025e2 <HAL_GPIO_Init+0xfe>
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	e002      	b.n	80025e8 <HAL_GPIO_Init+0x104>
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	3b08      	subs	r3, #8
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	210f      	movs	r1, #15
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	fa01 f303 	lsl.w	r3, r1, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	401a      	ands	r2, r3
 80025fa:	6a39      	ldr	r1, [r7, #32]
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002602:	431a      	orrs	r2, r3
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 8096 	beq.w	8002742 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002616:	4b59      	ldr	r3, [pc, #356]	; (800277c <HAL_GPIO_Init+0x298>)
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	4a58      	ldr	r2, [pc, #352]	; (800277c <HAL_GPIO_Init+0x298>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	6193      	str	r3, [r2, #24]
 8002622:	4b56      	ldr	r3, [pc, #344]	; (800277c <HAL_GPIO_Init+0x298>)
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800262e:	4a54      	ldr	r2, [pc, #336]	; (8002780 <HAL_GPIO_Init+0x29c>)
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	089b      	lsrs	r3, r3, #2
 8002634:	3302      	adds	r3, #2
 8002636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	220f      	movs	r2, #15
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	4013      	ands	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a4b      	ldr	r2, [pc, #300]	; (8002784 <HAL_GPIO_Init+0x2a0>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d013      	beq.n	8002682 <HAL_GPIO_Init+0x19e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a4a      	ldr	r2, [pc, #296]	; (8002788 <HAL_GPIO_Init+0x2a4>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d00d      	beq.n	800267e <HAL_GPIO_Init+0x19a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a49      	ldr	r2, [pc, #292]	; (800278c <HAL_GPIO_Init+0x2a8>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d007      	beq.n	800267a <HAL_GPIO_Init+0x196>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a48      	ldr	r2, [pc, #288]	; (8002790 <HAL_GPIO_Init+0x2ac>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d101      	bne.n	8002676 <HAL_GPIO_Init+0x192>
 8002672:	2303      	movs	r3, #3
 8002674:	e006      	b.n	8002684 <HAL_GPIO_Init+0x1a0>
 8002676:	2304      	movs	r3, #4
 8002678:	e004      	b.n	8002684 <HAL_GPIO_Init+0x1a0>
 800267a:	2302      	movs	r3, #2
 800267c:	e002      	b.n	8002684 <HAL_GPIO_Init+0x1a0>
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <HAL_GPIO_Init+0x1a0>
 8002682:	2300      	movs	r3, #0
 8002684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002686:	f002 0203 	and.w	r2, r2, #3
 800268a:	0092      	lsls	r2, r2, #2
 800268c:	4093      	lsls	r3, r2
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	4313      	orrs	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002694:	493a      	ldr	r1, [pc, #232]	; (8002780 <HAL_GPIO_Init+0x29c>)
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	089b      	lsrs	r3, r3, #2
 800269a:	3302      	adds	r3, #2
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d006      	beq.n	80026bc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026ae:	4b39      	ldr	r3, [pc, #228]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	4938      	ldr	r1, [pc, #224]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]
 80026ba:	e006      	b.n	80026ca <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026bc:	4b35      	ldr	r3, [pc, #212]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	43db      	mvns	r3, r3
 80026c4:	4933      	ldr	r1, [pc, #204]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d006      	beq.n	80026e4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026d6:	4b2f      	ldr	r3, [pc, #188]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	492e      	ldr	r1, [pc, #184]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	4313      	orrs	r3, r2
 80026e0:	604b      	str	r3, [r1, #4]
 80026e2:	e006      	b.n	80026f2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026e4:	4b2b      	ldr	r3, [pc, #172]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	43db      	mvns	r3, r3
 80026ec:	4929      	ldr	r1, [pc, #164]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d006      	beq.n	800270c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026fe:	4b25      	ldr	r3, [pc, #148]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	4924      	ldr	r1, [pc, #144]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	4313      	orrs	r3, r2
 8002708:	608b      	str	r3, [r1, #8]
 800270a:	e006      	b.n	800271a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800270c:	4b21      	ldr	r3, [pc, #132]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	43db      	mvns	r3, r3
 8002714:	491f      	ldr	r1, [pc, #124]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 8002716:	4013      	ands	r3, r2
 8002718:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d006      	beq.n	8002734 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002726:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	491a      	ldr	r1, [pc, #104]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	4313      	orrs	r3, r2
 8002730:	60cb      	str	r3, [r1, #12]
 8002732:	e006      	b.n	8002742 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002734:	4b17      	ldr	r3, [pc, #92]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 8002736:	68da      	ldr	r2, [r3, #12]
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	43db      	mvns	r3, r3
 800273c:	4915      	ldr	r1, [pc, #84]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 800273e:	4013      	ands	r3, r2
 8002740:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	3301      	adds	r3, #1
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	fa22 f303 	lsr.w	r3, r2, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	f47f aed0 	bne.w	80024f8 <HAL_GPIO_Init+0x14>
  }
}
 8002758:	bf00      	nop
 800275a:	372c      	adds	r7, #44	; 0x2c
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	10210000 	.word	0x10210000
 8002768:	10110000 	.word	0x10110000
 800276c:	10120000 	.word	0x10120000
 8002770:	10310000 	.word	0x10310000
 8002774:	10320000 	.word	0x10320000
 8002778:	10220000 	.word	0x10220000
 800277c:	40021000 	.word	0x40021000
 8002780:	40010000 	.word	0x40010000
 8002784:	40010800 	.word	0x40010800
 8002788:	40010c00 	.word	0x40010c00
 800278c:	40011000 	.word	0x40011000
 8002790:	40011400 	.word	0x40011400
 8002794:	40010400 	.word	0x40010400

08002798 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	460b      	mov	r3, r1
 80027a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	887b      	ldrh	r3, [r7, #2]
 80027aa:	4013      	ands	r3, r2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027b0:	2301      	movs	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
 80027b4:	e001      	b.n	80027ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027b6:	2300      	movs	r3, #0
 80027b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr

080027c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	460b      	mov	r3, r1
 80027d0:	807b      	strh	r3, [r7, #2]
 80027d2:	4613      	mov	r3, r2
 80027d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027d6:	787b      	ldrb	r3, [r7, #1]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027dc:	887a      	ldrh	r2, [r7, #2]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027e2:	e003      	b.n	80027ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027e4:	887b      	ldrh	r3, [r7, #2]
 80027e6:	041a      	lsls	r2, r3, #16
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	611a      	str	r2, [r3, #16]
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr

080027f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b085      	sub	sp, #20
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	460b      	mov	r3, r1
 8002800:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002808:	887a      	ldrh	r2, [r7, #2]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4013      	ands	r3, r2
 800280e:	041a      	lsls	r2, r3, #16
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	43d9      	mvns	r1, r3
 8002814:	887b      	ldrh	r3, [r7, #2]
 8002816:	400b      	ands	r3, r1
 8002818:	431a      	orrs	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	611a      	str	r2, [r3, #16]
}
 800281e:	bf00      	nop
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e11f      	b.n	8002a7a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d106      	bne.n	8002854 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7fe fdf2 	bl	8001438 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2224      	movs	r2, #36	; 0x24
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0201 	bic.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800287a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800288a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800288c:	f000 fcda 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 8002890:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	4a7b      	ldr	r2, [pc, #492]	; (8002a84 <HAL_I2C_Init+0x25c>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d807      	bhi.n	80028ac <HAL_I2C_Init+0x84>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4a7a      	ldr	r2, [pc, #488]	; (8002a88 <HAL_I2C_Init+0x260>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	bf94      	ite	ls
 80028a4:	2301      	movls	r3, #1
 80028a6:	2300      	movhi	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	e006      	b.n	80028ba <HAL_I2C_Init+0x92>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4a77      	ldr	r2, [pc, #476]	; (8002a8c <HAL_I2C_Init+0x264>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	bf94      	ite	ls
 80028b4:	2301      	movls	r3, #1
 80028b6:	2300      	movhi	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e0db      	b.n	8002a7a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4a72      	ldr	r2, [pc, #456]	; (8002a90 <HAL_I2C_Init+0x268>)
 80028c6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ca:	0c9b      	lsrs	r3, r3, #18
 80028cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	430a      	orrs	r2, r1
 80028e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	4a64      	ldr	r2, [pc, #400]	; (8002a84 <HAL_I2C_Init+0x25c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d802      	bhi.n	80028fc <HAL_I2C_Init+0xd4>
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	3301      	adds	r3, #1
 80028fa:	e009      	b.n	8002910 <HAL_I2C_Init+0xe8>
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002902:	fb02 f303 	mul.w	r3, r2, r3
 8002906:	4a63      	ldr	r2, [pc, #396]	; (8002a94 <HAL_I2C_Init+0x26c>)
 8002908:	fba2 2303 	umull	r2, r3, r2, r3
 800290c:	099b      	lsrs	r3, r3, #6
 800290e:	3301      	adds	r3, #1
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	430b      	orrs	r3, r1
 8002916:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002922:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	4956      	ldr	r1, [pc, #344]	; (8002a84 <HAL_I2C_Init+0x25c>)
 800292c:	428b      	cmp	r3, r1
 800292e:	d80d      	bhi.n	800294c <HAL_I2C_Init+0x124>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	1e59      	subs	r1, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	fbb1 f3f3 	udiv	r3, r1, r3
 800293e:	3301      	adds	r3, #1
 8002940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002944:	2b04      	cmp	r3, #4
 8002946:	bf38      	it	cc
 8002948:	2304      	movcc	r3, #4
 800294a:	e04f      	b.n	80029ec <HAL_I2C_Init+0x1c4>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d111      	bne.n	8002978 <HAL_I2C_Init+0x150>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	1e58      	subs	r0, r3, #1
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6859      	ldr	r1, [r3, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	440b      	add	r3, r1
 8002962:	fbb0 f3f3 	udiv	r3, r0, r3
 8002966:	3301      	adds	r3, #1
 8002968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800296c:	2b00      	cmp	r3, #0
 800296e:	bf0c      	ite	eq
 8002970:	2301      	moveq	r3, #1
 8002972:	2300      	movne	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	e012      	b.n	800299e <HAL_I2C_Init+0x176>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	1e58      	subs	r0, r3, #1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6859      	ldr	r1, [r3, #4]
 8002980:	460b      	mov	r3, r1
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	0099      	lsls	r1, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	fbb0 f3f3 	udiv	r3, r0, r3
 800298e:	3301      	adds	r3, #1
 8002990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002994:	2b00      	cmp	r3, #0
 8002996:	bf0c      	ite	eq
 8002998:	2301      	moveq	r3, #1
 800299a:	2300      	movne	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_I2C_Init+0x17e>
 80029a2:	2301      	movs	r3, #1
 80029a4:	e022      	b.n	80029ec <HAL_I2C_Init+0x1c4>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10e      	bne.n	80029cc <HAL_I2C_Init+0x1a4>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1e58      	subs	r0, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6859      	ldr	r1, [r3, #4]
 80029b6:	460b      	mov	r3, r1
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	440b      	add	r3, r1
 80029bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80029c0:	3301      	adds	r3, #1
 80029c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ca:	e00f      	b.n	80029ec <HAL_I2C_Init+0x1c4>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	1e58      	subs	r0, r3, #1
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6859      	ldr	r1, [r3, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	0099      	lsls	r1, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e2:	3301      	adds	r3, #1
 80029e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	6809      	ldr	r1, [r1, #0]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69da      	ldr	r2, [r3, #28]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6911      	ldr	r1, [r2, #16]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	68d2      	ldr	r2, [r2, #12]
 8002a26:	4311      	orrs	r1, r2
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6812      	ldr	r2, [r2, #0]
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695a      	ldr	r2, [r3, #20]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2220      	movs	r2, #32
 8002a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	000186a0 	.word	0x000186a0
 8002a88:	001e847f 	.word	0x001e847f
 8002a8c:	003d08ff 	.word	0x003d08ff
 8002a90:	431bde83 	.word	0x431bde83
 8002a94:	10624dd3 	.word	0x10624dd3

08002a98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e26c      	b.n	8002f84 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 8087 	beq.w	8002bc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ab8:	4b92      	ldr	r3, [pc, #584]	; (8002d04 <HAL_RCC_OscConfig+0x26c>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 030c 	and.w	r3, r3, #12
 8002ac0:	2b04      	cmp	r3, #4
 8002ac2:	d00c      	beq.n	8002ade <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ac4:	4b8f      	ldr	r3, [pc, #572]	; (8002d04 <HAL_RCC_OscConfig+0x26c>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 030c 	and.w	r3, r3, #12
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d112      	bne.n	8002af6 <HAL_RCC_OscConfig+0x5e>
 8002ad0:	4b8c      	ldr	r3, [pc, #560]	; (8002d04 <HAL_RCC_OscConfig+0x26c>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002adc:	d10b      	bne.n	8002af6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ade:	4b89      	ldr	r3, [pc, #548]	; (8002d04 <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d06c      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x12c>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d168      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e246      	b.n	8002f84 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002afe:	d106      	bne.n	8002b0e <HAL_RCC_OscConfig+0x76>
 8002b00:	4b80      	ldr	r3, [pc, #512]	; (8002d04 <HAL_RCC_OscConfig+0x26c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a7f      	ldr	r2, [pc, #508]	; (8002d04 <HAL_RCC_OscConfig+0x26c>)
 8002b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b0a:	6013      	str	r3, [r2, #0]
 8002b0c:	e02e      	b.n	8002b6c <HAL_RCC_OscConfig+0xd4>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10c      	bne.n	8002b30 <HAL_RCC_OscConfig+0x98>
 8002b16:	4b7b      	ldr	r3, [pc, #492]	; (8002d04 <HAL_RCC_OscConfig+0x26c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a7a      	ldr	r2, [pc, #488]	; (8002d04 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	4b78      	ldr	r3, [pc, #480]	; (8002d04 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a77      	ldr	r2, [pc, #476]	; (8002d04 <HAL_RCC_OscConfig+0x26c>)
 8002b28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	e01d      	b.n	8002b6c <HAL_RCC_OscConfig+0xd4>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b38:	d10c      	bne.n	8002b54 <HAL_RCC_OscConfig+0xbc>
 8002b3a:	4b72      	ldr	r3, [pc, #456]	; (8002d04 <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a71      	ldr	r2, [pc, #452]	; (8002d04 <HAL_RCC_OscConfig+0x26c>)
 8002b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	4b6f      	ldr	r3, [pc, #444]	; (8002d04 <HAL_RCC_OscConfig+0x26c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a6e      	ldr	r2, [pc, #440]	; (8002d04 <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b50:	6013      	str	r3, [r2, #0]
 8002b52:	e00b      	b.n	8002b6c <HAL_RCC_OscConfig+0xd4>
 8002b54:	4b6b      	ldr	r3, [pc, #428]	; (8002d04 <HAL_RCC_OscConfig+0x26c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a6a      	ldr	r2, [pc, #424]	; (8002d04 <HAL_RCC_OscConfig+0x26c>)
 8002b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b5e:	6013      	str	r3, [r2, #0]
 8002b60:	4b68      	ldr	r3, [pc, #416]	; (8002d04 <HAL_RCC_OscConfig+0x26c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a67      	ldr	r2, [pc, #412]	; (8002d04 <HAL_RCC_OscConfig+0x26c>)
 8002b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d013      	beq.n	8002b9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b74:	f7fe fe4e 	bl	8001814 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b7c:	f7fe fe4a 	bl	8001814 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b64      	cmp	r3, #100	; 0x64
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e1fa      	b.n	8002f84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8e:	4b5d      	ldr	r3, [pc, #372]	; (8002d04 <HAL_RCC_OscConfig+0x26c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0f0      	beq.n	8002b7c <HAL_RCC_OscConfig+0xe4>
 8002b9a:	e014      	b.n	8002bc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9c:	f7fe fe3a 	bl	8001814 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba4:	f7fe fe36 	bl	8001814 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b64      	cmp	r3, #100	; 0x64
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e1e6      	b.n	8002f84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bb6:	4b53      	ldr	r3, [pc, #332]	; (8002d04 <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f0      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x10c>
 8002bc2:	e000      	b.n	8002bc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d063      	beq.n	8002c9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bd2:	4b4c      	ldr	r3, [pc, #304]	; (8002d04 <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 030c 	and.w	r3, r3, #12
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00b      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bde:	4b49      	ldr	r3, [pc, #292]	; (8002d04 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f003 030c 	and.w	r3, r3, #12
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d11c      	bne.n	8002c24 <HAL_RCC_OscConfig+0x18c>
 8002bea:	4b46      	ldr	r3, [pc, #280]	; (8002d04 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d116      	bne.n	8002c24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bf6:	4b43      	ldr	r3, [pc, #268]	; (8002d04 <HAL_RCC_OscConfig+0x26c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d005      	beq.n	8002c0e <HAL_RCC_OscConfig+0x176>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d001      	beq.n	8002c0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e1ba      	b.n	8002f84 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c0e:	4b3d      	ldr	r3, [pc, #244]	; (8002d04 <HAL_RCC_OscConfig+0x26c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	4939      	ldr	r1, [pc, #228]	; (8002d04 <HAL_RCC_OscConfig+0x26c>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c22:	e03a      	b.n	8002c9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d020      	beq.n	8002c6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c2c:	4b36      	ldr	r3, [pc, #216]	; (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c32:	f7fe fdef 	bl	8001814 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c3a:	f7fe fdeb 	bl	8001814 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e19b      	b.n	8002f84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4c:	4b2d      	ldr	r3, [pc, #180]	; (8002d04 <HAL_RCC_OscConfig+0x26c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d0f0      	beq.n	8002c3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c58:	4b2a      	ldr	r3, [pc, #168]	; (8002d04 <HAL_RCC_OscConfig+0x26c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	4927      	ldr	r1, [pc, #156]	; (8002d04 <HAL_RCC_OscConfig+0x26c>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	600b      	str	r3, [r1, #0]
 8002c6c:	e015      	b.n	8002c9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c6e:	4b26      	ldr	r3, [pc, #152]	; (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c74:	f7fe fdce 	bl	8001814 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c7c:	f7fe fdca 	bl	8001814 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e17a      	b.n	8002f84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c8e:	4b1d      	ldr	r3, [pc, #116]	; (8002d04 <HAL_RCC_OscConfig+0x26c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f0      	bne.n	8002c7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d03a      	beq.n	8002d1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d019      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cae:	4b17      	ldr	r3, [pc, #92]	; (8002d0c <HAL_RCC_OscConfig+0x274>)
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb4:	f7fe fdae 	bl	8001814 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cbc:	f7fe fdaa 	bl	8001814 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e15a      	b.n	8002f84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cce:	4b0d      	ldr	r3, [pc, #52]	; (8002d04 <HAL_RCC_OscConfig+0x26c>)
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0f0      	beq.n	8002cbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cda:	2001      	movs	r0, #1
 8002cdc:	f000 fb0a 	bl	80032f4 <RCC_Delay>
 8002ce0:	e01c      	b.n	8002d1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ce2:	4b0a      	ldr	r3, [pc, #40]	; (8002d0c <HAL_RCC_OscConfig+0x274>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce8:	f7fe fd94 	bl	8001814 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cee:	e00f      	b.n	8002d10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf0:	f7fe fd90 	bl	8001814 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d908      	bls.n	8002d10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e140      	b.n	8002f84 <HAL_RCC_OscConfig+0x4ec>
 8002d02:	bf00      	nop
 8002d04:	40021000 	.word	0x40021000
 8002d08:	42420000 	.word	0x42420000
 8002d0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d10:	4b9e      	ldr	r3, [pc, #632]	; (8002f8c <HAL_RCC_OscConfig+0x4f4>)
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1e9      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 80a6 	beq.w	8002e76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d2e:	4b97      	ldr	r3, [pc, #604]	; (8002f8c <HAL_RCC_OscConfig+0x4f4>)
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10d      	bne.n	8002d56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d3a:	4b94      	ldr	r3, [pc, #592]	; (8002f8c <HAL_RCC_OscConfig+0x4f4>)
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	4a93      	ldr	r2, [pc, #588]	; (8002f8c <HAL_RCC_OscConfig+0x4f4>)
 8002d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d44:	61d3      	str	r3, [r2, #28]
 8002d46:	4b91      	ldr	r3, [pc, #580]	; (8002f8c <HAL_RCC_OscConfig+0x4f4>)
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	60bb      	str	r3, [r7, #8]
 8002d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d52:	2301      	movs	r3, #1
 8002d54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d56:	4b8e      	ldr	r3, [pc, #568]	; (8002f90 <HAL_RCC_OscConfig+0x4f8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d118      	bne.n	8002d94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d62:	4b8b      	ldr	r3, [pc, #556]	; (8002f90 <HAL_RCC_OscConfig+0x4f8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a8a      	ldr	r2, [pc, #552]	; (8002f90 <HAL_RCC_OscConfig+0x4f8>)
 8002d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d6e:	f7fe fd51 	bl	8001814 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d76:	f7fe fd4d 	bl	8001814 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b64      	cmp	r3, #100	; 0x64
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e0fd      	b.n	8002f84 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d88:	4b81      	ldr	r3, [pc, #516]	; (8002f90 <HAL_RCC_OscConfig+0x4f8>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0f0      	beq.n	8002d76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d106      	bne.n	8002daa <HAL_RCC_OscConfig+0x312>
 8002d9c:	4b7b      	ldr	r3, [pc, #492]	; (8002f8c <HAL_RCC_OscConfig+0x4f4>)
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	4a7a      	ldr	r2, [pc, #488]	; (8002f8c <HAL_RCC_OscConfig+0x4f4>)
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	6213      	str	r3, [r2, #32]
 8002da8:	e02d      	b.n	8002e06 <HAL_RCC_OscConfig+0x36e>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10c      	bne.n	8002dcc <HAL_RCC_OscConfig+0x334>
 8002db2:	4b76      	ldr	r3, [pc, #472]	; (8002f8c <HAL_RCC_OscConfig+0x4f4>)
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	4a75      	ldr	r2, [pc, #468]	; (8002f8c <HAL_RCC_OscConfig+0x4f4>)
 8002db8:	f023 0301 	bic.w	r3, r3, #1
 8002dbc:	6213      	str	r3, [r2, #32]
 8002dbe:	4b73      	ldr	r3, [pc, #460]	; (8002f8c <HAL_RCC_OscConfig+0x4f4>)
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	4a72      	ldr	r2, [pc, #456]	; (8002f8c <HAL_RCC_OscConfig+0x4f4>)
 8002dc4:	f023 0304 	bic.w	r3, r3, #4
 8002dc8:	6213      	str	r3, [r2, #32]
 8002dca:	e01c      	b.n	8002e06 <HAL_RCC_OscConfig+0x36e>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	2b05      	cmp	r3, #5
 8002dd2:	d10c      	bne.n	8002dee <HAL_RCC_OscConfig+0x356>
 8002dd4:	4b6d      	ldr	r3, [pc, #436]	; (8002f8c <HAL_RCC_OscConfig+0x4f4>)
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	4a6c      	ldr	r2, [pc, #432]	; (8002f8c <HAL_RCC_OscConfig+0x4f4>)
 8002dda:	f043 0304 	orr.w	r3, r3, #4
 8002dde:	6213      	str	r3, [r2, #32]
 8002de0:	4b6a      	ldr	r3, [pc, #424]	; (8002f8c <HAL_RCC_OscConfig+0x4f4>)
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	4a69      	ldr	r2, [pc, #420]	; (8002f8c <HAL_RCC_OscConfig+0x4f4>)
 8002de6:	f043 0301 	orr.w	r3, r3, #1
 8002dea:	6213      	str	r3, [r2, #32]
 8002dec:	e00b      	b.n	8002e06 <HAL_RCC_OscConfig+0x36e>
 8002dee:	4b67      	ldr	r3, [pc, #412]	; (8002f8c <HAL_RCC_OscConfig+0x4f4>)
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	4a66      	ldr	r2, [pc, #408]	; (8002f8c <HAL_RCC_OscConfig+0x4f4>)
 8002df4:	f023 0301 	bic.w	r3, r3, #1
 8002df8:	6213      	str	r3, [r2, #32]
 8002dfa:	4b64      	ldr	r3, [pc, #400]	; (8002f8c <HAL_RCC_OscConfig+0x4f4>)
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	4a63      	ldr	r2, [pc, #396]	; (8002f8c <HAL_RCC_OscConfig+0x4f4>)
 8002e00:	f023 0304 	bic.w	r3, r3, #4
 8002e04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d015      	beq.n	8002e3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e0e:	f7fe fd01 	bl	8001814 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e14:	e00a      	b.n	8002e2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e16:	f7fe fcfd 	bl	8001814 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e0ab      	b.n	8002f84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e2c:	4b57      	ldr	r3, [pc, #348]	; (8002f8c <HAL_RCC_OscConfig+0x4f4>)
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0ee      	beq.n	8002e16 <HAL_RCC_OscConfig+0x37e>
 8002e38:	e014      	b.n	8002e64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3a:	f7fe fceb 	bl	8001814 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e40:	e00a      	b.n	8002e58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e42:	f7fe fce7 	bl	8001814 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e095      	b.n	8002f84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e58:	4b4c      	ldr	r3, [pc, #304]	; (8002f8c <HAL_RCC_OscConfig+0x4f4>)
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1ee      	bne.n	8002e42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e64:	7dfb      	ldrb	r3, [r7, #23]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d105      	bne.n	8002e76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e6a:	4b48      	ldr	r3, [pc, #288]	; (8002f8c <HAL_RCC_OscConfig+0x4f4>)
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	4a47      	ldr	r2, [pc, #284]	; (8002f8c <HAL_RCC_OscConfig+0x4f4>)
 8002e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 8081 	beq.w	8002f82 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e80:	4b42      	ldr	r3, [pc, #264]	; (8002f8c <HAL_RCC_OscConfig+0x4f4>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 030c 	and.w	r3, r3, #12
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d061      	beq.n	8002f50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d146      	bne.n	8002f22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e94:	4b3f      	ldr	r3, [pc, #252]	; (8002f94 <HAL_RCC_OscConfig+0x4fc>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9a:	f7fe fcbb 	bl	8001814 <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea2:	f7fe fcb7 	bl	8001814 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e067      	b.n	8002f84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eb4:	4b35      	ldr	r3, [pc, #212]	; (8002f8c <HAL_RCC_OscConfig+0x4f4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1f0      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec8:	d108      	bne.n	8002edc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002eca:	4b30      	ldr	r3, [pc, #192]	; (8002f8c <HAL_RCC_OscConfig+0x4f4>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	492d      	ldr	r1, [pc, #180]	; (8002f8c <HAL_RCC_OscConfig+0x4f4>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002edc:	4b2b      	ldr	r3, [pc, #172]	; (8002f8c <HAL_RCC_OscConfig+0x4f4>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a19      	ldr	r1, [r3, #32]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	430b      	orrs	r3, r1
 8002eee:	4927      	ldr	r1, [pc, #156]	; (8002f8c <HAL_RCC_OscConfig+0x4f4>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ef4:	4b27      	ldr	r3, [pc, #156]	; (8002f94 <HAL_RCC_OscConfig+0x4fc>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efa:	f7fe fc8b 	bl	8001814 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f02:	f7fe fc87 	bl	8001814 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e037      	b.n	8002f84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f14:	4b1d      	ldr	r3, [pc, #116]	; (8002f8c <HAL_RCC_OscConfig+0x4f4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0f0      	beq.n	8002f02 <HAL_RCC_OscConfig+0x46a>
 8002f20:	e02f      	b.n	8002f82 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f22:	4b1c      	ldr	r3, [pc, #112]	; (8002f94 <HAL_RCC_OscConfig+0x4fc>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f28:	f7fe fc74 	bl	8001814 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f30:	f7fe fc70 	bl	8001814 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e020      	b.n	8002f84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f42:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <HAL_RCC_OscConfig+0x4f4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x498>
 8002f4e:	e018      	b.n	8002f82 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e013      	b.n	8002f84 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <HAL_RCC_OscConfig+0x4f4>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d106      	bne.n	8002f7e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d001      	beq.n	8002f82 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e000      	b.n	8002f84 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3718      	adds	r7, #24
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	40007000 	.word	0x40007000
 8002f94:	42420060 	.word	0x42420060

08002f98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e0d0      	b.n	800314e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fac:	4b6a      	ldr	r3, [pc, #424]	; (8003158 <HAL_RCC_ClockConfig+0x1c0>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d910      	bls.n	8002fdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fba:	4b67      	ldr	r3, [pc, #412]	; (8003158 <HAL_RCC_ClockConfig+0x1c0>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f023 0207 	bic.w	r2, r3, #7
 8002fc2:	4965      	ldr	r1, [pc, #404]	; (8003158 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fca:	4b63      	ldr	r3, [pc, #396]	; (8003158 <HAL_RCC_ClockConfig+0x1c0>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d001      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e0b8      	b.n	800314e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d020      	beq.n	800302a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ff4:	4b59      	ldr	r3, [pc, #356]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	4a58      	ldr	r2, [pc, #352]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 8002ffa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ffe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b00      	cmp	r3, #0
 800300a:	d005      	beq.n	8003018 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800300c:	4b53      	ldr	r3, [pc, #332]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	4a52      	ldr	r2, [pc, #328]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 8003012:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003016:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003018:	4b50      	ldr	r3, [pc, #320]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	494d      	ldr	r1, [pc, #308]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 8003026:	4313      	orrs	r3, r2
 8003028:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d040      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d107      	bne.n	800304e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303e:	4b47      	ldr	r3, [pc, #284]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d115      	bne.n	8003076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e07f      	b.n	800314e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d107      	bne.n	8003066 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003056:	4b41      	ldr	r3, [pc, #260]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d109      	bne.n	8003076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e073      	b.n	800314e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003066:	4b3d      	ldr	r3, [pc, #244]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e06b      	b.n	800314e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003076:	4b39      	ldr	r3, [pc, #228]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f023 0203 	bic.w	r2, r3, #3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	4936      	ldr	r1, [pc, #216]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 8003084:	4313      	orrs	r3, r2
 8003086:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003088:	f7fe fbc4 	bl	8001814 <HAL_GetTick>
 800308c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308e:	e00a      	b.n	80030a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003090:	f7fe fbc0 	bl	8001814 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f241 3288 	movw	r2, #5000	; 0x1388
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e053      	b.n	800314e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a6:	4b2d      	ldr	r3, [pc, #180]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f003 020c 	and.w	r2, r3, #12
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d1eb      	bne.n	8003090 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030b8:	4b27      	ldr	r3, [pc, #156]	; (8003158 <HAL_RCC_ClockConfig+0x1c0>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d210      	bcs.n	80030e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c6:	4b24      	ldr	r3, [pc, #144]	; (8003158 <HAL_RCC_ClockConfig+0x1c0>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f023 0207 	bic.w	r2, r3, #7
 80030ce:	4922      	ldr	r1, [pc, #136]	; (8003158 <HAL_RCC_ClockConfig+0x1c0>)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d6:	4b20      	ldr	r3, [pc, #128]	; (8003158 <HAL_RCC_ClockConfig+0x1c0>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d001      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e032      	b.n	800314e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d008      	beq.n	8003106 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030f4:	4b19      	ldr	r3, [pc, #100]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	4916      	ldr	r1, [pc, #88]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 8003102:	4313      	orrs	r3, r2
 8003104:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d009      	beq.n	8003126 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003112:	4b12      	ldr	r3, [pc, #72]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	490e      	ldr	r1, [pc, #56]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 8003122:	4313      	orrs	r3, r2
 8003124:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003126:	f000 f821 	bl	800316c <HAL_RCC_GetSysClockFreq>
 800312a:	4601      	mov	r1, r0
 800312c:	4b0b      	ldr	r3, [pc, #44]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	091b      	lsrs	r3, r3, #4
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	4a0a      	ldr	r2, [pc, #40]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 8003138:	5cd3      	ldrb	r3, [r2, r3]
 800313a:	fa21 f303 	lsr.w	r3, r1, r3
 800313e:	4a09      	ldr	r2, [pc, #36]	; (8003164 <HAL_RCC_ClockConfig+0x1cc>)
 8003140:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003142:	4b09      	ldr	r3, [pc, #36]	; (8003168 <HAL_RCC_ClockConfig+0x1d0>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7fe fa06 	bl	8001558 <HAL_InitTick>

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40022000 	.word	0x40022000
 800315c:	40021000 	.word	0x40021000
 8003160:	0800876c 	.word	0x0800876c
 8003164:	20000000 	.word	0x20000000
 8003168:	20000004 	.word	0x20000004

0800316c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800316c:	b490      	push	{r4, r7}
 800316e:	b08a      	sub	sp, #40	; 0x28
 8003170:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003172:	4b2a      	ldr	r3, [pc, #168]	; (800321c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003174:	1d3c      	adds	r4, r7, #4
 8003176:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003178:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800317c:	4b28      	ldr	r3, [pc, #160]	; (8003220 <HAL_RCC_GetSysClockFreq+0xb4>)
 800317e:	881b      	ldrh	r3, [r3, #0]
 8003180:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003182:	2300      	movs	r3, #0
 8003184:	61fb      	str	r3, [r7, #28]
 8003186:	2300      	movs	r3, #0
 8003188:	61bb      	str	r3, [r7, #24]
 800318a:	2300      	movs	r3, #0
 800318c:	627b      	str	r3, [r7, #36]	; 0x24
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003192:	2300      	movs	r3, #0
 8003194:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003196:	4b23      	ldr	r3, [pc, #140]	; (8003224 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f003 030c 	and.w	r3, r3, #12
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d002      	beq.n	80031ac <HAL_RCC_GetSysClockFreq+0x40>
 80031a6:	2b08      	cmp	r3, #8
 80031a8:	d003      	beq.n	80031b2 <HAL_RCC_GetSysClockFreq+0x46>
 80031aa:	e02d      	b.n	8003208 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031ac:	4b1e      	ldr	r3, [pc, #120]	; (8003228 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031ae:	623b      	str	r3, [r7, #32]
      break;
 80031b0:	e02d      	b.n	800320e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	0c9b      	lsrs	r3, r3, #18
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80031be:	4413      	add	r3, r2
 80031c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80031c4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d013      	beq.n	80031f8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031d0:	4b14      	ldr	r3, [pc, #80]	; (8003224 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	0c5b      	lsrs	r3, r3, #17
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80031de:	4413      	add	r3, r2
 80031e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80031e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	4a0f      	ldr	r2, [pc, #60]	; (8003228 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031ea:	fb02 f203 	mul.w	r2, r2, r3
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
 80031f6:	e004      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	4a0c      	ldr	r2, [pc, #48]	; (800322c <HAL_RCC_GetSysClockFreq+0xc0>)
 80031fc:	fb02 f303 	mul.w	r3, r2, r3
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	623b      	str	r3, [r7, #32]
      break;
 8003206:	e002      	b.n	800320e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003208:	4b07      	ldr	r3, [pc, #28]	; (8003228 <HAL_RCC_GetSysClockFreq+0xbc>)
 800320a:	623b      	str	r3, [r7, #32]
      break;
 800320c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800320e:	6a3b      	ldr	r3, [r7, #32]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3728      	adds	r7, #40	; 0x28
 8003214:	46bd      	mov	sp, r7
 8003216:	bc90      	pop	{r4, r7}
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	0800869c 	.word	0x0800869c
 8003220:	080086ac 	.word	0x080086ac
 8003224:	40021000 	.word	0x40021000
 8003228:	007a1200 	.word	0x007a1200
 800322c:	003d0900 	.word	0x003d0900

08003230 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003234:	4b02      	ldr	r3, [pc, #8]	; (8003240 <HAL_RCC_GetHCLKFreq+0x10>)
 8003236:	681b      	ldr	r3, [r3, #0]
}
 8003238:	4618      	mov	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr
 8003240:	20000000 	.word	0x20000000

08003244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003248:	f7ff fff2 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 800324c:	4601      	mov	r1, r0
 800324e:	4b05      	ldr	r3, [pc, #20]	; (8003264 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	0a1b      	lsrs	r3, r3, #8
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	4a03      	ldr	r2, [pc, #12]	; (8003268 <HAL_RCC_GetPCLK1Freq+0x24>)
 800325a:	5cd3      	ldrb	r3, [r2, r3]
 800325c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003260:	4618      	mov	r0, r3
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40021000 	.word	0x40021000
 8003268:	0800877c 	.word	0x0800877c

0800326c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003270:	f7ff ffde 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 8003274:	4601      	mov	r1, r0
 8003276:	4b05      	ldr	r3, [pc, #20]	; (800328c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	0adb      	lsrs	r3, r3, #11
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	4a03      	ldr	r2, [pc, #12]	; (8003290 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003282:	5cd3      	ldrb	r3, [r2, r3]
 8003284:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003288:	4618      	mov	r0, r3
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40021000 	.word	0x40021000
 8003290:	0800877c 	.word	0x0800877c

08003294 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	220f      	movs	r2, #15
 80032a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032a4:	4b11      	ldr	r3, [pc, #68]	; (80032ec <HAL_RCC_GetClockConfig+0x58>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 0203 	and.w	r2, r3, #3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80032b0:	4b0e      	ldr	r3, [pc, #56]	; (80032ec <HAL_RCC_GetClockConfig+0x58>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80032bc:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <HAL_RCC_GetClockConfig+0x58>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80032c8:	4b08      	ldr	r3, [pc, #32]	; (80032ec <HAL_RCC_GetClockConfig+0x58>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	08db      	lsrs	r3, r3, #3
 80032ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80032d6:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <HAL_RCC_GetClockConfig+0x5c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0207 	and.w	r2, r3, #7
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr
 80032ec:	40021000 	.word	0x40021000
 80032f0:	40022000 	.word	0x40022000

080032f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032fc:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <RCC_Delay+0x34>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a0a      	ldr	r2, [pc, #40]	; (800332c <RCC_Delay+0x38>)
 8003302:	fba2 2303 	umull	r2, r3, r2, r3
 8003306:	0a5b      	lsrs	r3, r3, #9
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	fb02 f303 	mul.w	r3, r2, r3
 800330e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003310:	bf00      	nop
  }
  while (Delay --);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	1e5a      	subs	r2, r3, #1
 8003316:	60fa      	str	r2, [r7, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1f9      	bne.n	8003310 <RCC_Delay+0x1c>
}
 800331c:	bf00      	nop
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	bc80      	pop	{r7}
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	20000000 	.word	0x20000000
 800332c:	10624dd3 	.word	0x10624dd3

08003330 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	2300      	movs	r3, #0
 800333e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b00      	cmp	r3, #0
 800334a:	d07d      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800334c:	2300      	movs	r3, #0
 800334e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003350:	4b4f      	ldr	r3, [pc, #316]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10d      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800335c:	4b4c      	ldr	r3, [pc, #304]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	4a4b      	ldr	r2, [pc, #300]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003366:	61d3      	str	r3, [r2, #28]
 8003368:	4b49      	ldr	r3, [pc, #292]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003374:	2301      	movs	r3, #1
 8003376:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003378:	4b46      	ldr	r3, [pc, #280]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003380:	2b00      	cmp	r3, #0
 8003382:	d118      	bne.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003384:	4b43      	ldr	r3, [pc, #268]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a42      	ldr	r2, [pc, #264]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800338a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800338e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003390:	f7fe fa40 	bl	8001814 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003396:	e008      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003398:	f7fe fa3c 	bl	8001814 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b64      	cmp	r3, #100	; 0x64
 80033a4:	d901      	bls.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e06d      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033aa:	4b3a      	ldr	r3, [pc, #232]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0f0      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033b6:	4b36      	ldr	r3, [pc, #216]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033be:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d02e      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d027      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033d4:	4b2e      	ldr	r3, [pc, #184]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033dc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033de:	4b2e      	ldr	r3, [pc, #184]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033e0:	2201      	movs	r2, #1
 80033e2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033e4:	4b2c      	ldr	r3, [pc, #176]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033ea:	4a29      	ldr	r2, [pc, #164]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d014      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fa:	f7fe fa0b 	bl	8001814 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003400:	e00a      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003402:	f7fe fa07 	bl	8001814 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003410:	4293      	cmp	r3, r2
 8003412:	d901      	bls.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e036      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003418:	4b1d      	ldr	r3, [pc, #116]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0ee      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003424:	4b1a      	ldr	r3, [pc, #104]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	4917      	ldr	r1, [pc, #92]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003432:	4313      	orrs	r3, r2
 8003434:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003436:	7dfb      	ldrb	r3, [r7, #23]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d105      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800343c:	4b14      	ldr	r3, [pc, #80]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	4a13      	ldr	r2, [pc, #76]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003446:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d008      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003454:	4b0e      	ldr	r3, [pc, #56]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	490b      	ldr	r1, [pc, #44]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003462:	4313      	orrs	r3, r2
 8003464:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0310 	and.w	r3, r3, #16
 800346e:	2b00      	cmp	r3, #0
 8003470:	d008      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003472:	4b07      	ldr	r3, [pc, #28]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	4904      	ldr	r1, [pc, #16]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003480:	4313      	orrs	r3, r2
 8003482:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40021000 	.word	0x40021000
 8003494:	40007000 	.word	0x40007000
 8003498:	42420440 	.word	0x42420440

0800349c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800349c:	b590      	push	{r4, r7, lr}
 800349e:	b08d      	sub	sp, #52	; 0x34
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80034a4:	4b55      	ldr	r3, [pc, #340]	; (80035fc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80034a6:	f107 040c 	add.w	r4, r7, #12
 80034aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80034b0:	4b53      	ldr	r3, [pc, #332]	; (8003600 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ba:	2300      	movs	r3, #0
 80034bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034be:	2300      	movs	r3, #0
 80034c0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	61fb      	str	r3, [r7, #28]
 80034c6:	2300      	movs	r3, #0
 80034c8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d07f      	beq.n	80035d0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80034d0:	2b10      	cmp	r3, #16
 80034d2:	d002      	beq.n	80034da <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d048      	beq.n	800356a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80034d8:	e08b      	b.n	80035f2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80034da:	4b4a      	ldr	r3, [pc, #296]	; (8003604 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80034e0:	4b48      	ldr	r3, [pc, #288]	; (8003604 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d07f      	beq.n	80035ec <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	0c9b      	lsrs	r3, r3, #18
 80034f0:	f003 030f 	and.w	r3, r3, #15
 80034f4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80034f8:	4413      	add	r3, r2
 80034fa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80034fe:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d018      	beq.n	800353c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800350a:	4b3e      	ldr	r3, [pc, #248]	; (8003604 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	0c5b      	lsrs	r3, r3, #17
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003518:	4413      	add	r3, r2
 800351a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800351e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00d      	beq.n	8003546 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800352a:	4a37      	ldr	r2, [pc, #220]	; (8003608 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	fb02 f303 	mul.w	r3, r2, r3
 8003538:	62fb      	str	r3, [r7, #44]	; 0x2c
 800353a:	e004      	b.n	8003546 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	4a33      	ldr	r2, [pc, #204]	; (800360c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003540:	fb02 f303 	mul.w	r3, r2, r3
 8003544:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003546:	4b2f      	ldr	r3, [pc, #188]	; (8003604 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800354e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003552:	d102      	bne.n	800355a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003556:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003558:	e048      	b.n	80035ec <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800355a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	4a2c      	ldr	r2, [pc, #176]	; (8003610 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003560:	fba2 2303 	umull	r2, r3, r2, r3
 8003564:	085b      	lsrs	r3, r3, #1
 8003566:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003568:	e040      	b.n	80035ec <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800356a:	4b26      	ldr	r3, [pc, #152]	; (8003604 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800357a:	d108      	bne.n	800358e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8003586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800358a:	62bb      	str	r3, [r7, #40]	; 0x28
 800358c:	e01f      	b.n	80035ce <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003598:	d109      	bne.n	80035ae <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800359a:	4b1a      	ldr	r3, [pc, #104]	; (8003604 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80035a6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80035aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ac:	e00f      	b.n	80035ce <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035b8:	d11a      	bne.n	80035f0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80035ba:	4b12      	ldr	r3, [pc, #72]	; (8003604 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d014      	beq.n	80035f0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80035c6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80035ca:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80035cc:	e010      	b.n	80035f0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80035ce:	e00f      	b.n	80035f0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80035d0:	f7ff fe4c 	bl	800326c <HAL_RCC_GetPCLK2Freq>
 80035d4:	4602      	mov	r2, r0
 80035d6:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	0b9b      	lsrs	r3, r3, #14
 80035dc:	f003 0303 	and.w	r3, r3, #3
 80035e0:	3301      	adds	r3, #1
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80035ea:	e002      	b.n	80035f2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80035ec:	bf00      	nop
 80035ee:	e000      	b.n	80035f2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80035f0:	bf00      	nop
    }
  }
  return (frequency);
 80035f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3734      	adds	r7, #52	; 0x34
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd90      	pop	{r4, r7, pc}
 80035fc:	080086b0 	.word	0x080086b0
 8003600:	080086c0 	.word	0x080086c0
 8003604:	40021000 	.word	0x40021000
 8003608:	007a1200 	.word	0x007a1200
 800360c:	003d0900 	.word	0x003d0900
 8003610:	aaaaaaab 	.word	0xaaaaaaab

08003614 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e041      	b.n	80036aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d106      	bne.n	8003640 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f839 	bl	80036b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3304      	adds	r3, #4
 8003650:	4619      	mov	r1, r3
 8003652:	4610      	mov	r0, r2
 8003654:	f000 f9b4 	bl	80039c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr

080036c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d001      	beq.n	80036dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e03a      	b.n	8003752 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2202      	movs	r2, #2
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0201 	orr.w	r2, r2, #1
 80036f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a18      	ldr	r2, [pc, #96]	; (800375c <HAL_TIM_Base_Start_IT+0x98>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d00e      	beq.n	800371c <HAL_TIM_Base_Start_IT+0x58>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003706:	d009      	beq.n	800371c <HAL_TIM_Base_Start_IT+0x58>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a14      	ldr	r2, [pc, #80]	; (8003760 <HAL_TIM_Base_Start_IT+0x9c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d004      	beq.n	800371c <HAL_TIM_Base_Start_IT+0x58>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a13      	ldr	r2, [pc, #76]	; (8003764 <HAL_TIM_Base_Start_IT+0xa0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d111      	bne.n	8003740 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2b06      	cmp	r3, #6
 800372c:	d010      	beq.n	8003750 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f042 0201 	orr.w	r2, r2, #1
 800373c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373e:	e007      	b.n	8003750 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	bc80      	pop	{r7}
 800375a:	4770      	bx	lr
 800375c:	40012c00 	.word	0x40012c00
 8003760:	40000400 	.word	0x40000400
 8003764:	40000800 	.word	0x40000800

08003768 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b02      	cmp	r3, #2
 800377c:	d122      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b02      	cmp	r3, #2
 800378a:	d11b      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0202 	mvn.w	r2, #2
 8003794:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f8ed 	bl	800398a <HAL_TIM_IC_CaptureCallback>
 80037b0:	e005      	b.n	80037be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f8e0 	bl	8003978 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f8ef 	bl	800399c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d122      	bne.n	8003818 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d11b      	bne.n	8003818 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0204 	mvn.w	r2, #4
 80037e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2202      	movs	r2, #2
 80037ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f8c3 	bl	800398a <HAL_TIM_IC_CaptureCallback>
 8003804:	e005      	b.n	8003812 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f8b6 	bl	8003978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f8c5 	bl	800399c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b08      	cmp	r3, #8
 8003824:	d122      	bne.n	800386c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	2b08      	cmp	r3, #8
 8003832:	d11b      	bne.n	800386c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0208 	mvn.w	r2, #8
 800383c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2204      	movs	r2, #4
 8003842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f899 	bl	800398a <HAL_TIM_IC_CaptureCallback>
 8003858:	e005      	b.n	8003866 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f88c 	bl	8003978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f89b 	bl	800399c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f003 0310 	and.w	r3, r3, #16
 8003876:	2b10      	cmp	r3, #16
 8003878:	d122      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f003 0310 	and.w	r3, r3, #16
 8003884:	2b10      	cmp	r3, #16
 8003886:	d11b      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f06f 0210 	mvn.w	r2, #16
 8003890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2208      	movs	r2, #8
 8003896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f86f 	bl	800398a <HAL_TIM_IC_CaptureCallback>
 80038ac:	e005      	b.n	80038ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f862 	bl	8003978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f871 	bl	800399c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d10e      	bne.n	80038ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d107      	bne.n	80038ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f06f 0201 	mvn.w	r2, #1
 80038e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fd fd10 	bl	800130c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f6:	2b80      	cmp	r3, #128	; 0x80
 80038f8:	d10e      	bne.n	8003918 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003904:	2b80      	cmp	r3, #128	; 0x80
 8003906:	d107      	bne.n	8003918 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f8bf 	bl	8003a96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003922:	2b40      	cmp	r3, #64	; 0x40
 8003924:	d10e      	bne.n	8003944 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003930:	2b40      	cmp	r3, #64	; 0x40
 8003932:	d107      	bne.n	8003944 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800393c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f835 	bl	80039ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	f003 0320 	and.w	r3, r3, #32
 800394e:	2b20      	cmp	r3, #32
 8003950:	d10e      	bne.n	8003970 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	2b20      	cmp	r3, #32
 800395e:	d107      	bne.n	8003970 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f06f 0220 	mvn.w	r2, #32
 8003968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f88a 	bl	8003a84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	bc80      	pop	{r7}
 8003988:	4770      	bx	lr

0800398a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800398a:	b480      	push	{r7}
 800398c:	b083      	sub	sp, #12
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr

0800399c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bc80      	pop	{r7}
 80039ac:	4770      	bx	lr

080039ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr

080039c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a29      	ldr	r2, [pc, #164]	; (8003a78 <TIM_Base_SetConfig+0xb8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d00b      	beq.n	80039f0 <TIM_Base_SetConfig+0x30>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039de:	d007      	beq.n	80039f0 <TIM_Base_SetConfig+0x30>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a26      	ldr	r2, [pc, #152]	; (8003a7c <TIM_Base_SetConfig+0xbc>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d003      	beq.n	80039f0 <TIM_Base_SetConfig+0x30>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a25      	ldr	r2, [pc, #148]	; (8003a80 <TIM_Base_SetConfig+0xc0>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d108      	bne.n	8003a02 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a1c      	ldr	r2, [pc, #112]	; (8003a78 <TIM_Base_SetConfig+0xb8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d00b      	beq.n	8003a22 <TIM_Base_SetConfig+0x62>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a10:	d007      	beq.n	8003a22 <TIM_Base_SetConfig+0x62>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a19      	ldr	r2, [pc, #100]	; (8003a7c <TIM_Base_SetConfig+0xbc>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d003      	beq.n	8003a22 <TIM_Base_SetConfig+0x62>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a18      	ldr	r2, [pc, #96]	; (8003a80 <TIM_Base_SetConfig+0xc0>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d108      	bne.n	8003a34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a07      	ldr	r2, [pc, #28]	; (8003a78 <TIM_Base_SetConfig+0xb8>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d103      	bne.n	8003a68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	615a      	str	r2, [r3, #20]
}
 8003a6e:	bf00      	nop
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr
 8003a78:	40012c00 	.word	0x40012c00
 8003a7c:	40000400 	.word	0x40000400
 8003a80:	40000800 	.word	0x40000800

08003a84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bc80      	pop	{r7}
 8003a94:	4770      	bx	lr

08003a96 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e03f      	b.n	8003b3a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d106      	bne.n	8003ad4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fd fcf0 	bl	80014b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2224      	movs	r2, #36	; 0x24
 8003ad8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 fbd7 	bl	80042a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	691a      	ldr	r2, [r3, #16]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695a      	ldr	r2, [r3, #20]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68da      	ldr	r2, [r3, #12]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2220      	movs	r2, #32
 8003b34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b08a      	sub	sp, #40	; 0x28
 8003b46:	af02      	add	r7, sp, #8
 8003b48:	60f8      	str	r0, [r7, #12]
 8003b4a:	60b9      	str	r1, [r7, #8]
 8003b4c:	603b      	str	r3, [r7, #0]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b20      	cmp	r3, #32
 8003b60:	d17c      	bne.n	8003c5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <HAL_UART_Transmit+0x2c>
 8003b68:	88fb      	ldrh	r3, [r7, #6]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e075      	b.n	8003c5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_UART_Transmit+0x3e>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e06e      	b.n	8003c5e <HAL_UART_Transmit+0x11c>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2221      	movs	r2, #33	; 0x21
 8003b92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003b96:	f7fd fe3d 	bl	8001814 <HAL_GetTick>
 8003b9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	88fa      	ldrh	r2, [r7, #6]
 8003ba0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	88fa      	ldrh	r2, [r7, #6]
 8003ba6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb0:	d108      	bne.n	8003bc4 <HAL_UART_Transmit+0x82>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d104      	bne.n	8003bc4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	61bb      	str	r3, [r7, #24]
 8003bc2:	e003      	b.n	8003bcc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003bd4:	e02a      	b.n	8003c2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	2180      	movs	r1, #128	; 0x80
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 f9fa 	bl	8003fda <UART_WaitOnFlagUntilTimeout>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e036      	b.n	8003c5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10b      	bne.n	8003c0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	3302      	adds	r3, #2
 8003c0a:	61bb      	str	r3, [r7, #24]
 8003c0c:	e007      	b.n	8003c1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	781a      	ldrb	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	3b01      	subs	r3, #1
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1cf      	bne.n	8003bd6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	2140      	movs	r1, #64	; 0x40
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 f9ca 	bl	8003fda <UART_WaitOnFlagUntilTimeout>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e006      	b.n	8003c5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2220      	movs	r2, #32
 8003c54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	e000      	b.n	8003c5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c5c:	2302      	movs	r3, #2
  }
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3720      	adds	r7, #32
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b08a      	sub	sp, #40	; 0x28
 8003c6a:	af02      	add	r7, sp, #8
 8003c6c:	60f8      	str	r0, [r7, #12]
 8003c6e:	60b9      	str	r1, [r7, #8]
 8003c70:	603b      	str	r3, [r7, #0]
 8003c72:	4613      	mov	r3, r2
 8003c74:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b20      	cmp	r3, #32
 8003c84:	f040 8089 	bne.w	8003d9a <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <HAL_UART_Receive+0x2e>
 8003c8e:	88fb      	ldrh	r3, [r7, #6]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e081      	b.n	8003d9c <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d101      	bne.n	8003ca6 <HAL_UART_Receive+0x40>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e07a      	b.n	8003d9c <HAL_UART_Receive+0x136>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2222      	movs	r2, #34	; 0x22
 8003cb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003cbc:	f7fd fdaa 	bl	8001814 <HAL_GetTick>
 8003cc0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	88fa      	ldrh	r2, [r7, #6]
 8003cc6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	88fa      	ldrh	r2, [r7, #6]
 8003ccc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd6:	d108      	bne.n	8003cea <HAL_UART_Receive+0x84>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d104      	bne.n	8003cea <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	61bb      	str	r3, [r7, #24]
 8003ce8:	e003      	b.n	8003cf2 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003cfa:	e043      	b.n	8003d84 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	2200      	movs	r2, #0
 8003d04:	2120      	movs	r1, #32
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 f967 	bl	8003fda <UART_WaitOnFlagUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e042      	b.n	8003d9c <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10c      	bne.n	8003d36 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	3302      	adds	r3, #2
 8003d32:	61bb      	str	r3, [r7, #24]
 8003d34:	e01f      	b.n	8003d76 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d3e:	d007      	beq.n	8003d50 <HAL_UART_Receive+0xea>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10a      	bne.n	8003d5e <HAL_UART_Receive+0xf8>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d106      	bne.n	8003d5e <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	701a      	strb	r2, [r3, #0]
 8003d5c:	e008      	b.n	8003d70 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	3301      	adds	r3, #1
 8003d74:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1b6      	bne.n	8003cfc <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2220      	movs	r2, #32
 8003d92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8003d96:	2300      	movs	r3, #0
 8003d98:	e000      	b.n	8003d9c <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003d9a:	2302      	movs	r3, #2
  }
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3720      	adds	r7, #32
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b088      	sub	sp, #32
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10d      	bne.n	8003df6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	f003 0320 	and.w	r3, r3, #32
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d008      	beq.n	8003df6 <HAL_UART_IRQHandler+0x52>
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	f003 0320 	and.w	r3, r3, #32
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f9d5 	bl	800419e <UART_Receive_IT>
      return;
 8003df4:	e0d1      	b.n	8003f9a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 80b0 	beq.w	8003f5e <HAL_UART_IRQHandler+0x1ba>
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d105      	bne.n	8003e14 <HAL_UART_IRQHandler+0x70>
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 80a5 	beq.w	8003f5e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <HAL_UART_IRQHandler+0x90>
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d005      	beq.n	8003e34 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2c:	f043 0201 	orr.w	r2, r3, #1
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f003 0304 	and.w	r3, r3, #4
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00a      	beq.n	8003e54 <HAL_UART_IRQHandler+0xb0>
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d005      	beq.n	8003e54 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4c:	f043 0202 	orr.w	r2, r3, #2
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <HAL_UART_IRQHandler+0xd0>
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d005      	beq.n	8003e74 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6c:	f043 0204 	orr.w	r2, r3, #4
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f003 0308 	and.w	r3, r3, #8
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00f      	beq.n	8003e9e <HAL_UART_IRQHandler+0xfa>
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	f003 0320 	and.w	r3, r3, #32
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d104      	bne.n	8003e92 <HAL_UART_IRQHandler+0xee>
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d005      	beq.n	8003e9e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e96:	f043 0208 	orr.w	r2, r3, #8
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d078      	beq.n	8003f98 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d007      	beq.n	8003ec0 <HAL_UART_IRQHandler+0x11c>
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	f003 0320 	and.w	r3, r3, #32
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d002      	beq.n	8003ec0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f96f 	bl	800419e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	bf14      	ite	ne
 8003ece:	2301      	movne	r3, #1
 8003ed0:	2300      	moveq	r3, #0
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eda:	f003 0308 	and.w	r3, r3, #8
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d102      	bne.n	8003ee8 <HAL_UART_IRQHandler+0x144>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d031      	beq.n	8003f4c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f8c0 	bl	800406e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d023      	beq.n	8003f44 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695a      	ldr	r2, [r3, #20]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f0a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d013      	beq.n	8003f3c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f18:	4a21      	ldr	r2, [pc, #132]	; (8003fa0 <HAL_UART_IRQHandler+0x1fc>)
 8003f1a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fe fa69 	bl	80023f8 <HAL_DMA_Abort_IT>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d016      	beq.n	8003f5a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f36:	4610      	mov	r0, r2
 8003f38:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f3a:	e00e      	b.n	8003f5a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f843 	bl	8003fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f42:	e00a      	b.n	8003f5a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f83f 	bl	8003fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f4a:	e006      	b.n	8003f5a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f83b 	bl	8003fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003f58:	e01e      	b.n	8003f98 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f5a:	bf00      	nop
    return;
 8003f5c:	e01c      	b.n	8003f98 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d008      	beq.n	8003f7a <HAL_UART_IRQHandler+0x1d6>
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f8ac 	bl	80040d0 <UART_Transmit_IT>
    return;
 8003f78:	e00f      	b.n	8003f9a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <HAL_UART_IRQHandler+0x1f6>
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d005      	beq.n	8003f9a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f8ed 	bl	800416e <UART_EndTransmit_IT>
    return;
 8003f94:	bf00      	nop
 8003f96:	e000      	b.n	8003f9a <HAL_UART_IRQHandler+0x1f6>
    return;
 8003f98:	bf00      	nop
  }
}
 8003f9a:	3720      	adds	r7, #32
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	080040a9 	.word	0x080040a9

08003fa4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bc80      	pop	{r7}
 8003fb4:	4770      	bx	lr

08003fb6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bc80      	pop	{r7}
 8003fd8:	4770      	bx	lr

08003fda <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b084      	sub	sp, #16
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	60f8      	str	r0, [r7, #12]
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	603b      	str	r3, [r7, #0]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fea:	e02c      	b.n	8004046 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff2:	d028      	beq.n	8004046 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d007      	beq.n	800400a <UART_WaitOnFlagUntilTimeout+0x30>
 8003ffa:	f7fd fc0b 	bl	8001814 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	429a      	cmp	r2, r3
 8004008:	d21d      	bcs.n	8004046 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68da      	ldr	r2, [r3, #12]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004018:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	695a      	ldr	r2, [r3, #20]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0201 	bic.w	r2, r2, #1
 8004028:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2220      	movs	r2, #32
 800402e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2220      	movs	r2, #32
 8004036:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e00f      	b.n	8004066 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	4013      	ands	r3, r2
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	429a      	cmp	r2, r3
 8004054:	bf0c      	ite	eq
 8004056:	2301      	moveq	r3, #1
 8004058:	2300      	movne	r3, #0
 800405a:	b2db      	uxtb	r3, r3
 800405c:	461a      	mov	r2, r3
 800405e:	79fb      	ldrb	r3, [r7, #7]
 8004060:	429a      	cmp	r2, r3
 8004062:	d0c3      	beq.n	8003fec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800406e:	b480      	push	{r7}
 8004070:	b083      	sub	sp, #12
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004084:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	695a      	ldr	r2, [r3, #20]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0201 	bic.w	r2, r2, #1
 8004094:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2220      	movs	r2, #32
 800409a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bc80      	pop	{r7}
 80040a6:	4770      	bx	lr

080040a8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f7ff ff80 	bl	8003fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040c8:	bf00      	nop
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b21      	cmp	r3, #33	; 0x21
 80040e2:	d13e      	bne.n	8004162 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ec:	d114      	bne.n	8004118 <UART_Transmit_IT+0x48>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d110      	bne.n	8004118 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	881b      	ldrh	r3, [r3, #0]
 8004100:	461a      	mov	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800410a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	1c9a      	adds	r2, r3, #2
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	621a      	str	r2, [r3, #32]
 8004116:	e008      	b.n	800412a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	1c59      	adds	r1, r3, #1
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6211      	str	r1, [r2, #32]
 8004122:	781a      	ldrb	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b29b      	uxth	r3, r3
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	4619      	mov	r1, r3
 8004138:	84d1      	strh	r1, [r2, #38]	; 0x26
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10f      	bne.n	800415e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800414c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800415c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	e000      	b.n	8004164 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004162:	2302      	movs	r3, #2
  }
}
 8004164:	4618      	mov	r0, r3
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	bc80      	pop	{r7}
 800416c:	4770      	bx	lr

0800416e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b082      	sub	sp, #8
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68da      	ldr	r2, [r3, #12]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004184:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2220      	movs	r2, #32
 800418a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7ff ff08 	bl	8003fa4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b084      	sub	sp, #16
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b22      	cmp	r3, #34	; 0x22
 80041b0:	d170      	bne.n	8004294 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ba:	d117      	bne.n	80041ec <UART_Receive_IT+0x4e>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d113      	bne.n	80041ec <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80041c4:	2300      	movs	r3, #0
 80041c6:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041cc:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041da:	b29a      	uxth	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e4:	1c9a      	adds	r2, r3, #2
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	629a      	str	r2, [r3, #40]	; 0x28
 80041ea:	e026      	b.n	800423a <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f0:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80041f2:	2300      	movs	r3, #0
 80041f4:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041fe:	d007      	beq.n	8004210 <UART_Receive_IT+0x72>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10a      	bne.n	800421e <UART_Receive_IT+0x80>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d106      	bne.n	800421e <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	b2da      	uxtb	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	701a      	strb	r2, [r3, #0]
 800421c:	e008      	b.n	8004230 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	b2db      	uxtb	r3, r3
 8004226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800422a:	b2da      	uxtb	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004234:	1c5a      	adds	r2, r3, #1
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b01      	subs	r3, #1
 8004242:	b29b      	uxth	r3, r3
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	4619      	mov	r1, r3
 8004248:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800424a:	2b00      	cmp	r3, #0
 800424c:	d120      	bne.n	8004290 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68da      	ldr	r2, [r3, #12]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0220 	bic.w	r2, r2, #32
 800425c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68da      	ldr	r2, [r3, #12]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800426c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	695a      	ldr	r2, [r3, #20]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0201 	bic.w	r2, r2, #1
 800427c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2220      	movs	r2, #32
 8004282:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7ff fe95 	bl	8003fb6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800428c:	2300      	movs	r3, #0
 800428e:	e002      	b.n	8004296 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8004290:	2300      	movs	r3, #0
 8004292:	e000      	b.n	8004296 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8004294:	2302      	movs	r3, #2
  }
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
	...

080042a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689a      	ldr	r2, [r3, #8]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80042da:	f023 030c 	bic.w	r3, r3, #12
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6812      	ldr	r2, [r2, #0]
 80042e2:	68b9      	ldr	r1, [r7, #8]
 80042e4:	430b      	orrs	r3, r1
 80042e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	699a      	ldr	r2, [r3, #24]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a2c      	ldr	r2, [pc, #176]	; (80043b4 <UART_SetConfig+0x114>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d103      	bne.n	8004310 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004308:	f7fe ffb0 	bl	800326c <HAL_RCC_GetPCLK2Freq>
 800430c:	60f8      	str	r0, [r7, #12]
 800430e:	e002      	b.n	8004316 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004310:	f7fe ff98 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 8004314:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	4613      	mov	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	009a      	lsls	r2, r3, #2
 8004320:	441a      	add	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	fbb2 f3f3 	udiv	r3, r2, r3
 800432c:	4a22      	ldr	r2, [pc, #136]	; (80043b8 <UART_SetConfig+0x118>)
 800432e:	fba2 2303 	umull	r2, r3, r2, r3
 8004332:	095b      	lsrs	r3, r3, #5
 8004334:	0119      	lsls	r1, r3, #4
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	4613      	mov	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	009a      	lsls	r2, r3, #2
 8004340:	441a      	add	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	fbb2 f2f3 	udiv	r2, r2, r3
 800434c:	4b1a      	ldr	r3, [pc, #104]	; (80043b8 <UART_SetConfig+0x118>)
 800434e:	fba3 0302 	umull	r0, r3, r3, r2
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	2064      	movs	r0, #100	; 0x64
 8004356:	fb00 f303 	mul.w	r3, r0, r3
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	3332      	adds	r3, #50	; 0x32
 8004360:	4a15      	ldr	r2, [pc, #84]	; (80043b8 <UART_SetConfig+0x118>)
 8004362:	fba2 2303 	umull	r2, r3, r2, r3
 8004366:	095b      	lsrs	r3, r3, #5
 8004368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800436c:	4419      	add	r1, r3
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	4613      	mov	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4413      	add	r3, r2
 8004376:	009a      	lsls	r2, r3, #2
 8004378:	441a      	add	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	fbb2 f2f3 	udiv	r2, r2, r3
 8004384:	4b0c      	ldr	r3, [pc, #48]	; (80043b8 <UART_SetConfig+0x118>)
 8004386:	fba3 0302 	umull	r0, r3, r3, r2
 800438a:	095b      	lsrs	r3, r3, #5
 800438c:	2064      	movs	r0, #100	; 0x64
 800438e:	fb00 f303 	mul.w	r3, r0, r3
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	3332      	adds	r3, #50	; 0x32
 8004398:	4a07      	ldr	r2, [pc, #28]	; (80043b8 <UART_SetConfig+0x118>)
 800439a:	fba2 2303 	umull	r2, r3, r2, r3
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	f003 020f 	and.w	r2, r3, #15
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	440a      	add	r2, r1
 80043aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80043ac:	bf00      	nop
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	40013800 	.word	0x40013800
 80043b8:	51eb851f 	.word	0x51eb851f

080043bc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043c2:	f3ef 8305 	mrs	r3, IPSR
 80043c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80043c8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10f      	bne.n	80043ee <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043ce:	f3ef 8310 	mrs	r3, PRIMASK
 80043d2:	607b      	str	r3, [r7, #4]
  return(result);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d109      	bne.n	80043ee <osKernelInitialize+0x32>
 80043da:	4b10      	ldr	r3, [pc, #64]	; (800441c <osKernelInitialize+0x60>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d109      	bne.n	80043f6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80043e2:	f3ef 8311 	mrs	r3, BASEPRI
 80043e6:	603b      	str	r3, [r7, #0]
  return(result);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80043ee:	f06f 0305 	mvn.w	r3, #5
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	e00c      	b.n	8004410 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80043f6:	4b09      	ldr	r3, [pc, #36]	; (800441c <osKernelInitialize+0x60>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d105      	bne.n	800440a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80043fe:	4b07      	ldr	r3, [pc, #28]	; (800441c <osKernelInitialize+0x60>)
 8004400:	2201      	movs	r2, #1
 8004402:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004404:	2300      	movs	r3, #0
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	e002      	b.n	8004410 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800440a:	f04f 33ff 	mov.w	r3, #4294967295
 800440e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004410:	68fb      	ldr	r3, [r7, #12]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	bc80      	pop	{r7}
 800441a:	4770      	bx	lr
 800441c:	20000210 	.word	0x20000210

08004420 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004426:	f3ef 8305 	mrs	r3, IPSR
 800442a:	60bb      	str	r3, [r7, #8]
  return(result);
 800442c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10f      	bne.n	8004452 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004432:	f3ef 8310 	mrs	r3, PRIMASK
 8004436:	607b      	str	r3, [r7, #4]
  return(result);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d109      	bne.n	8004452 <osKernelStart+0x32>
 800443e:	4b11      	ldr	r3, [pc, #68]	; (8004484 <osKernelStart+0x64>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b02      	cmp	r3, #2
 8004444:	d109      	bne.n	800445a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004446:	f3ef 8311 	mrs	r3, BASEPRI
 800444a:	603b      	str	r3, [r7, #0]
  return(result);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004452:	f06f 0305 	mvn.w	r3, #5
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	e00e      	b.n	8004478 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800445a:	4b0a      	ldr	r3, [pc, #40]	; (8004484 <osKernelStart+0x64>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d107      	bne.n	8004472 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004462:	4b08      	ldr	r3, [pc, #32]	; (8004484 <osKernelStart+0x64>)
 8004464:	2202      	movs	r2, #2
 8004466:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004468:	f001 f864 	bl	8005534 <vTaskStartScheduler>
      stat = osOK;
 800446c:	2300      	movs	r3, #0
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	e002      	b.n	8004478 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004472:	f04f 33ff 	mov.w	r3, #4294967295
 8004476:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004478:	68fb      	ldr	r3, [r7, #12]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000210 	.word	0x20000210

08004488 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004488:	b580      	push	{r7, lr}
 800448a:	b092      	sub	sp, #72	; 0x48
 800448c:	af04      	add	r7, sp, #16
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004494:	2300      	movs	r3, #0
 8004496:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004498:	f3ef 8305 	mrs	r3, IPSR
 800449c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f040 8094 	bne.w	80045ce <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044a6:	f3ef 8310 	mrs	r3, PRIMASK
 80044aa:	623b      	str	r3, [r7, #32]
  return(result);
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f040 808d 	bne.w	80045ce <osThreadNew+0x146>
 80044b4:	4b48      	ldr	r3, [pc, #288]	; (80045d8 <osThreadNew+0x150>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d106      	bne.n	80044ca <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80044bc:	f3ef 8311 	mrs	r3, BASEPRI
 80044c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f040 8082 	bne.w	80045ce <osThreadNew+0x146>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d07e      	beq.n	80045ce <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80044d0:	2380      	movs	r3, #128	; 0x80
 80044d2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80044d4:	2318      	movs	r3, #24
 80044d6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80044d8:	2300      	movs	r3, #0
 80044da:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80044dc:	f107 031b 	add.w	r3, r7, #27
 80044e0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80044e2:	f04f 33ff 	mov.w	r3, #4294967295
 80044e6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d045      	beq.n	800457a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <osThreadNew+0x74>
        name = attr->name;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800450a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450c:	2b00      	cmp	r3, #0
 800450e:	d008      	beq.n	8004522 <osThreadNew+0x9a>
 8004510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004512:	2b38      	cmp	r3, #56	; 0x38
 8004514:	d805      	bhi.n	8004522 <osThreadNew+0x9a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <osThreadNew+0x9e>
        return (NULL);
 8004522:	2300      	movs	r3, #0
 8004524:	e054      	b.n	80045d0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	089b      	lsrs	r3, r3, #2
 8004534:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00e      	beq.n	800455c <osThreadNew+0xd4>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	2b5b      	cmp	r3, #91	; 0x5b
 8004544:	d90a      	bls.n	800455c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800454a:	2b00      	cmp	r3, #0
 800454c:	d006      	beq.n	800455c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d002      	beq.n	800455c <osThreadNew+0xd4>
        mem = 1;
 8004556:	2301      	movs	r3, #1
 8004558:	62bb      	str	r3, [r7, #40]	; 0x28
 800455a:	e010      	b.n	800457e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10c      	bne.n	800457e <osThreadNew+0xf6>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d108      	bne.n	800457e <osThreadNew+0xf6>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d104      	bne.n	800457e <osThreadNew+0xf6>
          mem = 0;
 8004574:	2300      	movs	r3, #0
 8004576:	62bb      	str	r3, [r7, #40]	; 0x28
 8004578:	e001      	b.n	800457e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800457a:	2300      	movs	r3, #0
 800457c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800457e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004580:	2b01      	cmp	r3, #1
 8004582:	d110      	bne.n	80045a6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800458c:	9202      	str	r2, [sp, #8]
 800458e:	9301      	str	r3, [sp, #4]
 8004590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004598:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 fe02 	bl	80051a4 <xTaskCreateStatic>
 80045a0:	4603      	mov	r3, r0
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	e013      	b.n	80045ce <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80045a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d110      	bne.n	80045ce <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80045ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	f107 0314 	add.w	r3, r7, #20
 80045b4:	9301      	str	r3, [sp, #4]
 80045b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 fe49 	bl	8005256 <xTaskCreate>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d001      	beq.n	80045ce <osThreadNew+0x146>
          hTask = NULL;
 80045ca:	2300      	movs	r3, #0
 80045cc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80045ce:	697b      	ldr	r3, [r7, #20]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3738      	adds	r7, #56	; 0x38
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	20000210 	.word	0x20000210

080045dc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045e4:	f3ef 8305 	mrs	r3, IPSR
 80045e8:	613b      	str	r3, [r7, #16]
  return(result);
 80045ea:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10f      	bne.n	8004610 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045f0:	f3ef 8310 	mrs	r3, PRIMASK
 80045f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d109      	bne.n	8004610 <osDelay+0x34>
 80045fc:	4b0d      	ldr	r3, [pc, #52]	; (8004634 <osDelay+0x58>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b02      	cmp	r3, #2
 8004602:	d109      	bne.n	8004618 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004604:	f3ef 8311 	mrs	r3, BASEPRI
 8004608:	60bb      	str	r3, [r7, #8]
  return(result);
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d003      	beq.n	8004618 <osDelay+0x3c>
    stat = osErrorISR;
 8004610:	f06f 0305 	mvn.w	r3, #5
 8004614:	617b      	str	r3, [r7, #20]
 8004616:	e007      	b.n	8004628 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004618:	2300      	movs	r3, #0
 800461a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 ff52 	bl	80054cc <vTaskDelay>
    }
  }

  return (stat);
 8004628:	697b      	ldr	r3, [r7, #20]
}
 800462a:	4618      	mov	r0, r3
 800462c:	3718      	adds	r7, #24
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	20000210 	.word	0x20000210

08004638 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4a06      	ldr	r2, [pc, #24]	; (8004660 <vApplicationGetIdleTaskMemory+0x28>)
 8004648:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	4a05      	ldr	r2, [pc, #20]	; (8004664 <vApplicationGetIdleTaskMemory+0x2c>)
 800464e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2280      	movs	r2, #128	; 0x80
 8004654:	601a      	str	r2, [r3, #0]
}
 8004656:	bf00      	nop
 8004658:	3714      	adds	r7, #20
 800465a:	46bd      	mov	sp, r7
 800465c:	bc80      	pop	{r7}
 800465e:	4770      	bx	lr
 8004660:	20000214 	.word	0x20000214
 8004664:	20000270 	.word	0x20000270

08004668 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4a07      	ldr	r2, [pc, #28]	; (8004694 <vApplicationGetTimerTaskMemory+0x2c>)
 8004678:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	4a06      	ldr	r2, [pc, #24]	; (8004698 <vApplicationGetTimerTaskMemory+0x30>)
 800467e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004686:	601a      	str	r2, [r3, #0]
}
 8004688:	bf00      	nop
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	bc80      	pop	{r7}
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	20000470 	.word	0x20000470
 8004698:	200004cc 	.word	0x200004cc

0800469c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f103 0208 	add.w	r2, r3, #8
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f04f 32ff 	mov.w	r2, #4294967295
 80046b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f103 0208 	add.w	r2, r3, #8
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f103 0208 	add.w	r2, r3, #8
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bc80      	pop	{r7}
 80046d8:	4770      	bx	lr

080046da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr

080046f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046f2:	b480      	push	{r7}
 80046f4:	b085      	sub	sp, #20
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
 80046fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	601a      	str	r2, [r3, #0]
}
 800472e:	bf00      	nop
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	bc80      	pop	{r7}
 8004736:	4770      	bx	lr

08004738 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474e:	d103      	bne.n	8004758 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	e00c      	b.n	8004772 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	3308      	adds	r3, #8
 800475c:	60fb      	str	r3, [r7, #12]
 800475e:	e002      	b.n	8004766 <vListInsert+0x2e>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	429a      	cmp	r2, r3
 8004770:	d2f6      	bcs.n	8004760 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	601a      	str	r2, [r3, #0]
}
 800479e:	bf00      	nop
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bc80      	pop	{r7}
 80047a6:	4770      	bx	lr

080047a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6892      	ldr	r2, [r2, #8]
 80047be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6852      	ldr	r2, [r2, #4]
 80047c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d103      	bne.n	80047dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689a      	ldr	r2, [r3, #8]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	1e5a      	subs	r2, r3, #1
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bc80      	pop	{r7}
 80047f8:	4770      	bx	lr
	...

080047fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d109      	bne.n	8004824 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	60bb      	str	r3, [r7, #8]
 8004822:	e7fe      	b.n	8004822 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004824:	f001 ff98 	bl	8006758 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004830:	68f9      	ldr	r1, [r7, #12]
 8004832:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004834:	fb01 f303 	mul.w	r3, r1, r3
 8004838:	441a      	add	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004854:	3b01      	subs	r3, #1
 8004856:	68f9      	ldr	r1, [r7, #12]
 8004858:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800485a:	fb01 f303 	mul.w	r3, r1, r3
 800485e:	441a      	add	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	22ff      	movs	r2, #255	; 0xff
 8004868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	22ff      	movs	r2, #255	; 0xff
 8004870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d114      	bne.n	80048a4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d01a      	beq.n	80048b8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	3310      	adds	r3, #16
 8004886:	4618      	mov	r0, r3
 8004888:	f001 f8d8 	bl	8005a3c <xTaskRemoveFromEventList>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d012      	beq.n	80048b8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004892:	4b0d      	ldr	r3, [pc, #52]	; (80048c8 <xQueueGenericReset+0xcc>)
 8004894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	f3bf 8f4f 	dsb	sy
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	e009      	b.n	80048b8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	3310      	adds	r3, #16
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7ff fef7 	bl	800469c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	3324      	adds	r3, #36	; 0x24
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7ff fef2 	bl	800469c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80048b8:	f001 ff7c 	bl	80067b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80048bc:	2301      	movs	r3, #1
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	e000ed04 	.word	0xe000ed04

080048cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b08e      	sub	sp, #56	; 0x38
 80048d0:	af02      	add	r7, sp, #8
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
 80048d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d109      	bne.n	80048f4 <xQueueGenericCreateStatic+0x28>
 80048e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80048f2:	e7fe      	b.n	80048f2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d109      	bne.n	800490e <xQueueGenericCreateStatic+0x42>
 80048fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	627b      	str	r3, [r7, #36]	; 0x24
 800490c:	e7fe      	b.n	800490c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d002      	beq.n	800491a <xQueueGenericCreateStatic+0x4e>
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <xQueueGenericCreateStatic+0x52>
 800491a:	2301      	movs	r3, #1
 800491c:	e000      	b.n	8004920 <xQueueGenericCreateStatic+0x54>
 800491e:	2300      	movs	r3, #0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d109      	bne.n	8004938 <xQueueGenericCreateStatic+0x6c>
 8004924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004928:	f383 8811 	msr	BASEPRI, r3
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	623b      	str	r3, [r7, #32]
 8004936:	e7fe      	b.n	8004936 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d102      	bne.n	8004944 <xQueueGenericCreateStatic+0x78>
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <xQueueGenericCreateStatic+0x7c>
 8004944:	2301      	movs	r3, #1
 8004946:	e000      	b.n	800494a <xQueueGenericCreateStatic+0x7e>
 8004948:	2300      	movs	r3, #0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d109      	bne.n	8004962 <xQueueGenericCreateStatic+0x96>
 800494e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004952:	f383 8811 	msr	BASEPRI, r3
 8004956:	f3bf 8f6f 	isb	sy
 800495a:	f3bf 8f4f 	dsb	sy
 800495e:	61fb      	str	r3, [r7, #28]
 8004960:	e7fe      	b.n	8004960 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004962:	2350      	movs	r3, #80	; 0x50
 8004964:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	2b50      	cmp	r3, #80	; 0x50
 800496a:	d009      	beq.n	8004980 <xQueueGenericCreateStatic+0xb4>
 800496c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004970:	f383 8811 	msr	BASEPRI, r3
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	61bb      	str	r3, [r7, #24]
 800497e:	e7fe      	b.n	800497e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00d      	beq.n	80049a6 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800498a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004992:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	4613      	mov	r3, r2
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	68b9      	ldr	r1, [r7, #8]
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 f805 	bl	80049b0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80049a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3730      	adds	r7, #48	; 0x30
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
 80049bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d103      	bne.n	80049cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	e002      	b.n	80049d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80049de:	2101      	movs	r1, #1
 80049e0:	69b8      	ldr	r0, [r7, #24]
 80049e2:	f7ff ff0b 	bl	80047fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	78fa      	ldrb	r2, [r7, #3]
 80049ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80049ee:	bf00      	nop
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
	...

080049f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b08e      	sub	sp, #56	; 0x38
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a06:	2300      	movs	r3, #0
 8004a08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d109      	bne.n	8004a28 <xQueueGenericSend+0x30>
 8004a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a26:	e7fe      	b.n	8004a26 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d103      	bne.n	8004a36 <xQueueGenericSend+0x3e>
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <xQueueGenericSend+0x42>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <xQueueGenericSend+0x44>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d109      	bne.n	8004a54 <xQueueGenericSend+0x5c>
 8004a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	627b      	str	r3, [r7, #36]	; 0x24
 8004a52:	e7fe      	b.n	8004a52 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d103      	bne.n	8004a62 <xQueueGenericSend+0x6a>
 8004a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d101      	bne.n	8004a66 <xQueueGenericSend+0x6e>
 8004a62:	2301      	movs	r3, #1
 8004a64:	e000      	b.n	8004a68 <xQueueGenericSend+0x70>
 8004a66:	2300      	movs	r3, #0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d109      	bne.n	8004a80 <xQueueGenericSend+0x88>
 8004a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a70:	f383 8811 	msr	BASEPRI, r3
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	623b      	str	r3, [r7, #32]
 8004a7e:	e7fe      	b.n	8004a7e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a80:	f001 f996 	bl	8005db0 <xTaskGetSchedulerState>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d102      	bne.n	8004a90 <xQueueGenericSend+0x98>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <xQueueGenericSend+0x9c>
 8004a90:	2301      	movs	r3, #1
 8004a92:	e000      	b.n	8004a96 <xQueueGenericSend+0x9e>
 8004a94:	2300      	movs	r3, #0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d109      	bne.n	8004aae <xQueueGenericSend+0xb6>
 8004a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9e:	f383 8811 	msr	BASEPRI, r3
 8004aa2:	f3bf 8f6f 	isb	sy
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	61fb      	str	r3, [r7, #28]
 8004aac:	e7fe      	b.n	8004aac <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004aae:	f001 fe53 	bl	8006758 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d302      	bcc.n	8004ac4 <xQueueGenericSend+0xcc>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d129      	bne.n	8004b18 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	68b9      	ldr	r1, [r7, #8]
 8004ac8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004aca:	f000 f9ff 	bl	8004ecc <prvCopyDataToQueue>
 8004ace:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d010      	beq.n	8004afa <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ada:	3324      	adds	r3, #36	; 0x24
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 ffad 	bl	8005a3c <xTaskRemoveFromEventList>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d013      	beq.n	8004b10 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ae8:	4b3f      	ldr	r3, [pc, #252]	; (8004be8 <xQueueGenericSend+0x1f0>)
 8004aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	e00a      	b.n	8004b10 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d007      	beq.n	8004b10 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004b00:	4b39      	ldr	r3, [pc, #228]	; (8004be8 <xQueueGenericSend+0x1f0>)
 8004b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004b10:	f001 fe50 	bl	80067b4 <vPortExitCritical>
				return pdPASS;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e063      	b.n	8004be0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d103      	bne.n	8004b26 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b1e:	f001 fe49 	bl	80067b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004b22:	2300      	movs	r3, #0
 8004b24:	e05c      	b.n	8004be0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d106      	bne.n	8004b3a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b2c:	f107 0314 	add.w	r3, r7, #20
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 ffe5 	bl	8005b00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b36:	2301      	movs	r3, #1
 8004b38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b3a:	f001 fe3b 	bl	80067b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b3e:	f000 fd5d 	bl	80055fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b42:	f001 fe09 	bl	8006758 <vPortEnterCritical>
 8004b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b4c:	b25b      	sxtb	r3, r3
 8004b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b52:	d103      	bne.n	8004b5c <xQueueGenericSend+0x164>
 8004b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b62:	b25b      	sxtb	r3, r3
 8004b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b68:	d103      	bne.n	8004b72 <xQueueGenericSend+0x17a>
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b72:	f001 fe1f 	bl	80067b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b76:	1d3a      	adds	r2, r7, #4
 8004b78:	f107 0314 	add.w	r3, r7, #20
 8004b7c:	4611      	mov	r1, r2
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 ffd4 	bl	8005b2c <xTaskCheckForTimeOut>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d124      	bne.n	8004bd4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b8c:	f000 fa96 	bl	80050bc <prvIsQueueFull>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d018      	beq.n	8004bc8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	3310      	adds	r3, #16
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	4611      	mov	r1, r2
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 fefe 	bl	80059a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004ba4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ba6:	f000 fa21 	bl	8004fec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004baa:	f000 fd35 	bl	8005618 <xTaskResumeAll>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f47f af7c 	bne.w	8004aae <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004bb6:	4b0c      	ldr	r3, [pc, #48]	; (8004be8 <xQueueGenericSend+0x1f0>)
 8004bb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	f3bf 8f6f 	isb	sy
 8004bc6:	e772      	b.n	8004aae <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004bc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bca:	f000 fa0f 	bl	8004fec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bce:	f000 fd23 	bl	8005618 <xTaskResumeAll>
 8004bd2:	e76c      	b.n	8004aae <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004bd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bd6:	f000 fa09 	bl	8004fec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bda:	f000 fd1d 	bl	8005618 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004bde:	2300      	movs	r3, #0
		}
	}
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3738      	adds	r7, #56	; 0x38
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	e000ed04 	.word	0xe000ed04

08004bec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b08e      	sub	sp, #56	; 0x38
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
 8004bf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d109      	bne.n	8004c18 <xQueueGenericSendFromISR+0x2c>
 8004c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	627b      	str	r3, [r7, #36]	; 0x24
 8004c16:	e7fe      	b.n	8004c16 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d103      	bne.n	8004c26 <xQueueGenericSendFromISR+0x3a>
 8004c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <xQueueGenericSendFromISR+0x3e>
 8004c26:	2301      	movs	r3, #1
 8004c28:	e000      	b.n	8004c2c <xQueueGenericSendFromISR+0x40>
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d109      	bne.n	8004c44 <xQueueGenericSendFromISR+0x58>
 8004c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c34:	f383 8811 	msr	BASEPRI, r3
 8004c38:	f3bf 8f6f 	isb	sy
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	623b      	str	r3, [r7, #32]
 8004c42:	e7fe      	b.n	8004c42 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d103      	bne.n	8004c52 <xQueueGenericSendFromISR+0x66>
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d101      	bne.n	8004c56 <xQueueGenericSendFromISR+0x6a>
 8004c52:	2301      	movs	r3, #1
 8004c54:	e000      	b.n	8004c58 <xQueueGenericSendFromISR+0x6c>
 8004c56:	2300      	movs	r3, #0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d109      	bne.n	8004c70 <xQueueGenericSendFromISR+0x84>
 8004c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c60:	f383 8811 	msr	BASEPRI, r3
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	61fb      	str	r3, [r7, #28]
 8004c6e:	e7fe      	b.n	8004c6e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c70:	f001 fe2c 	bl	80068cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c74:	f3ef 8211 	mrs	r2, BASEPRI
 8004c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7c:	f383 8811 	msr	BASEPRI, r3
 8004c80:	f3bf 8f6f 	isb	sy
 8004c84:	f3bf 8f4f 	dsb	sy
 8004c88:	61ba      	str	r2, [r7, #24]
 8004c8a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004c8c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d302      	bcc.n	8004ca2 <xQueueGenericSendFromISR+0xb6>
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d12c      	bne.n	8004cfc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ca8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	68b9      	ldr	r1, [r7, #8]
 8004cb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cb2:	f000 f90b 	bl	8004ecc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004cb6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cbe:	d112      	bne.n	8004ce6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d016      	beq.n	8004cf6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cca:	3324      	adds	r3, #36	; 0x24
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 feb5 	bl	8005a3c <xTaskRemoveFromEventList>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00e      	beq.n	8004cf6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00b      	beq.n	8004cf6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	e007      	b.n	8004cf6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ce6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004cea:	3301      	adds	r3, #1
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	b25a      	sxtb	r2, r3
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004cfa:	e001      	b.n	8004d00 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8004d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d02:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3738      	adds	r7, #56	; 0x38
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b08c      	sub	sp, #48	; 0x30
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d20:	2300      	movs	r3, #0
 8004d22:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d109      	bne.n	8004d42 <xQueueReceive+0x2e>
	__asm volatile
 8004d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	623b      	str	r3, [r7, #32]
 8004d40:	e7fe      	b.n	8004d40 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d103      	bne.n	8004d50 <xQueueReceive+0x3c>
 8004d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <xQueueReceive+0x40>
 8004d50:	2301      	movs	r3, #1
 8004d52:	e000      	b.n	8004d56 <xQueueReceive+0x42>
 8004d54:	2300      	movs	r3, #0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d109      	bne.n	8004d6e <xQueueReceive+0x5a>
 8004d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	61fb      	str	r3, [r7, #28]
 8004d6c:	e7fe      	b.n	8004d6c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d6e:	f001 f81f 	bl	8005db0 <xTaskGetSchedulerState>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d102      	bne.n	8004d7e <xQueueReceive+0x6a>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <xQueueReceive+0x6e>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e000      	b.n	8004d84 <xQueueReceive+0x70>
 8004d82:	2300      	movs	r3, #0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d109      	bne.n	8004d9c <xQueueReceive+0x88>
 8004d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	61bb      	str	r3, [r7, #24]
 8004d9a:	e7fe      	b.n	8004d9a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d9c:	f001 fcdc 	bl	8006758 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d01f      	beq.n	8004dec <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004dac:	68b9      	ldr	r1, [r7, #8]
 8004dae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004db0:	f000 f8f6 	bl	8004fa0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	1e5a      	subs	r2, r3, #1
 8004db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dba:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00f      	beq.n	8004de4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc6:	3310      	adds	r3, #16
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 fe37 	bl	8005a3c <xTaskRemoveFromEventList>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d007      	beq.n	8004de4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004dd4:	4b3c      	ldr	r3, [pc, #240]	; (8004ec8 <xQueueReceive+0x1b4>)
 8004dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004de4:	f001 fce6 	bl	80067b4 <vPortExitCritical>
				return pdPASS;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e069      	b.n	8004ec0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d103      	bne.n	8004dfa <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004df2:	f001 fcdf 	bl	80067b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004df6:	2300      	movs	r3, #0
 8004df8:	e062      	b.n	8004ec0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d106      	bne.n	8004e0e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e00:	f107 0310 	add.w	r3, r7, #16
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 fe7b 	bl	8005b00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e0e:	f001 fcd1 	bl	80067b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e12:	f000 fbf3 	bl	80055fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e16:	f001 fc9f 	bl	8006758 <vPortEnterCritical>
 8004e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e20:	b25b      	sxtb	r3, r3
 8004e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e26:	d103      	bne.n	8004e30 <xQueueReceive+0x11c>
 8004e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e36:	b25b      	sxtb	r3, r3
 8004e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3c:	d103      	bne.n	8004e46 <xQueueReceive+0x132>
 8004e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e46:	f001 fcb5 	bl	80067b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e4a:	1d3a      	adds	r2, r7, #4
 8004e4c:	f107 0310 	add.w	r3, r7, #16
 8004e50:	4611      	mov	r1, r2
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 fe6a 	bl	8005b2c <xTaskCheckForTimeOut>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d123      	bne.n	8004ea6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e60:	f000 f916 	bl	8005090 <prvIsQueueEmpty>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d017      	beq.n	8004e9a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6c:	3324      	adds	r3, #36	; 0x24
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	4611      	mov	r1, r2
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 fd94 	bl	80059a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e7a:	f000 f8b7 	bl	8004fec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e7e:	f000 fbcb 	bl	8005618 <xTaskResumeAll>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d189      	bne.n	8004d9c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004e88:	4b0f      	ldr	r3, [pc, #60]	; (8004ec8 <xQueueReceive+0x1b4>)
 8004e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	f3bf 8f4f 	dsb	sy
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	e780      	b.n	8004d9c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004e9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e9c:	f000 f8a6 	bl	8004fec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ea0:	f000 fbba 	bl	8005618 <xTaskResumeAll>
 8004ea4:	e77a      	b.n	8004d9c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ea8:	f000 f8a0 	bl	8004fec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004eac:	f000 fbb4 	bl	8005618 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004eb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eb2:	f000 f8ed 	bl	8005090 <prvIsQueueEmpty>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f43f af6f 	beq.w	8004d9c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ebe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3730      	adds	r7, #48	; 0x30
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	e000ed04 	.word	0xe000ed04

08004ecc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10d      	bne.n	8004f06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d14d      	bne.n	8004f8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 ff78 	bl	8005dec <xTaskPriorityDisinherit>
 8004efc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	605a      	str	r2, [r3, #4]
 8004f04:	e043      	b.n	8004f8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d119      	bne.n	8004f40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6898      	ldr	r0, [r3, #8]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f14:	461a      	mov	r2, r3
 8004f16:	68b9      	ldr	r1, [r7, #8]
 8004f18:	f001 ff3a 	bl	8006d90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f24:	441a      	add	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	689a      	ldr	r2, [r3, #8]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d32b      	bcc.n	8004f8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	609a      	str	r2, [r3, #8]
 8004f3e:	e026      	b.n	8004f8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	68d8      	ldr	r0, [r3, #12]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f48:	461a      	mov	r2, r3
 8004f4a:	68b9      	ldr	r1, [r7, #8]
 8004f4c:	f001 ff20 	bl	8006d90 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	68da      	ldr	r2, [r3, #12]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f58:	425b      	negs	r3, r3
 8004f5a:	441a      	add	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	68da      	ldr	r2, [r3, #12]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d207      	bcs.n	8004f7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f74:	425b      	negs	r3, r3
 8004f76:	441a      	add	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d105      	bne.n	8004f8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d002      	beq.n	8004f8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004f96:	697b      	ldr	r3, [r7, #20]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d018      	beq.n	8004fe4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68da      	ldr	r2, [r3, #12]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	441a      	add	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68da      	ldr	r2, [r3, #12]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d303      	bcc.n	8004fd4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68d9      	ldr	r1, [r3, #12]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fdc:	461a      	mov	r2, r3
 8004fde:	6838      	ldr	r0, [r7, #0]
 8004fe0:	f001 fed6 	bl	8006d90 <memcpy>
	}
}
 8004fe4:	bf00      	nop
 8004fe6:	3708      	adds	r7, #8
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ff4:	f001 fbb0 	bl	8006758 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ffe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005000:	e011      	b.n	8005026 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005006:	2b00      	cmp	r3, #0
 8005008:	d012      	beq.n	8005030 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	3324      	adds	r3, #36	; 0x24
 800500e:	4618      	mov	r0, r3
 8005010:	f000 fd14 	bl	8005a3c <xTaskRemoveFromEventList>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800501a:	f000 fde7 	bl	8005bec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800501e:	7bfb      	ldrb	r3, [r7, #15]
 8005020:	3b01      	subs	r3, #1
 8005022:	b2db      	uxtb	r3, r3
 8005024:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800502a:	2b00      	cmp	r3, #0
 800502c:	dce9      	bgt.n	8005002 <prvUnlockQueue+0x16>
 800502e:	e000      	b.n	8005032 <prvUnlockQueue+0x46>
					break;
 8005030:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	22ff      	movs	r2, #255	; 0xff
 8005036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800503a:	f001 fbbb 	bl	80067b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800503e:	f001 fb8b 	bl	8006758 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005048:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800504a:	e011      	b.n	8005070 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d012      	beq.n	800507a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3310      	adds	r3, #16
 8005058:	4618      	mov	r0, r3
 800505a:	f000 fcef 	bl	8005a3c <xTaskRemoveFromEventList>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005064:	f000 fdc2 	bl	8005bec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005068:	7bbb      	ldrb	r3, [r7, #14]
 800506a:	3b01      	subs	r3, #1
 800506c:	b2db      	uxtb	r3, r3
 800506e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005070:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005074:	2b00      	cmp	r3, #0
 8005076:	dce9      	bgt.n	800504c <prvUnlockQueue+0x60>
 8005078:	e000      	b.n	800507c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800507a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	22ff      	movs	r2, #255	; 0xff
 8005080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005084:	f001 fb96 	bl	80067b4 <vPortExitCritical>
}
 8005088:	bf00      	nop
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005098:	f001 fb5e 	bl	8006758 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d102      	bne.n	80050aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80050a4:	2301      	movs	r3, #1
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	e001      	b.n	80050ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80050aa:	2300      	movs	r3, #0
 80050ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050ae:	f001 fb81 	bl	80067b4 <vPortExitCritical>

	return xReturn;
 80050b2:	68fb      	ldr	r3, [r7, #12]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050c4:	f001 fb48 	bl	8006758 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d102      	bne.n	80050da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80050d4:	2301      	movs	r3, #1
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	e001      	b.n	80050de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80050da:	2300      	movs	r3, #0
 80050dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050de:	f001 fb69 	bl	80067b4 <vPortExitCritical>

	return xReturn;
 80050e2:	68fb      	ldr	r3, [r7, #12]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050f6:	2300      	movs	r3, #0
 80050f8:	60fb      	str	r3, [r7, #12]
 80050fa:	e014      	b.n	8005126 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80050fc:	4a0e      	ldr	r2, [pc, #56]	; (8005138 <vQueueAddToRegistry+0x4c>)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10b      	bne.n	8005120 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005108:	490b      	ldr	r1, [pc, #44]	; (8005138 <vQueueAddToRegistry+0x4c>)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005112:	4a09      	ldr	r2, [pc, #36]	; (8005138 <vQueueAddToRegistry+0x4c>)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	4413      	add	r3, r2
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800511e:	e005      	b.n	800512c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	3301      	adds	r3, #1
 8005124:	60fb      	str	r3, [r7, #12]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2b07      	cmp	r3, #7
 800512a:	d9e7      	bls.n	80050fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800512c:	bf00      	nop
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	bc80      	pop	{r7}
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	20001c74 	.word	0x20001c74

0800513c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800514c:	f001 fb04 	bl	8006758 <vPortEnterCritical>
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005156:	b25b      	sxtb	r3, r3
 8005158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515c:	d103      	bne.n	8005166 <vQueueWaitForMessageRestricted+0x2a>
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800516c:	b25b      	sxtb	r3, r3
 800516e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005172:	d103      	bne.n	800517c <vQueueWaitForMessageRestricted+0x40>
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800517c:	f001 fb1a 	bl	80067b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005184:	2b00      	cmp	r3, #0
 8005186:	d106      	bne.n	8005196 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	3324      	adds	r3, #36	; 0x24
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	68b9      	ldr	r1, [r7, #8]
 8005190:	4618      	mov	r0, r3
 8005192:	f000 fc29 	bl	80059e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005196:	6978      	ldr	r0, [r7, #20]
 8005198:	f7ff ff28 	bl	8004fec <prvUnlockQueue>
	}
 800519c:	bf00      	nop
 800519e:	3718      	adds	r7, #24
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08e      	sub	sp, #56	; 0x38
 80051a8:	af04      	add	r7, sp, #16
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
 80051b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80051b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d109      	bne.n	80051cc <xTaskCreateStatic+0x28>
 80051b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051bc:	f383 8811 	msr	BASEPRI, r3
 80051c0:	f3bf 8f6f 	isb	sy
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	623b      	str	r3, [r7, #32]
 80051ca:	e7fe      	b.n	80051ca <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80051cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d109      	bne.n	80051e6 <xTaskCreateStatic+0x42>
 80051d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d6:	f383 8811 	msr	BASEPRI, r3
 80051da:	f3bf 8f6f 	isb	sy
 80051de:	f3bf 8f4f 	dsb	sy
 80051e2:	61fb      	str	r3, [r7, #28]
 80051e4:	e7fe      	b.n	80051e4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80051e6:	235c      	movs	r3, #92	; 0x5c
 80051e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	2b5c      	cmp	r3, #92	; 0x5c
 80051ee:	d009      	beq.n	8005204 <xTaskCreateStatic+0x60>
 80051f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	61bb      	str	r3, [r7, #24]
 8005202:	e7fe      	b.n	8005202 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005206:	2b00      	cmp	r3, #0
 8005208:	d01e      	beq.n	8005248 <xTaskCreateStatic+0xa4>
 800520a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800520c:	2b00      	cmp	r3, #0
 800520e:	d01b      	beq.n	8005248 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005212:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005218:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	2202      	movs	r2, #2
 800521e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005222:	2300      	movs	r3, #0
 8005224:	9303      	str	r3, [sp, #12]
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	9302      	str	r3, [sp, #8]
 800522a:	f107 0314 	add.w	r3, r7, #20
 800522e:	9301      	str	r3, [sp, #4]
 8005230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	68b9      	ldr	r1, [r7, #8]
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f000 f850 	bl	80052e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005240:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005242:	f000 f8d3 	bl	80053ec <prvAddNewTaskToReadyList>
 8005246:	e001      	b.n	800524c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005248:	2300      	movs	r3, #0
 800524a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800524c:	697b      	ldr	r3, [r7, #20]
	}
 800524e:	4618      	mov	r0, r3
 8005250:	3728      	adds	r7, #40	; 0x28
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005256:	b580      	push	{r7, lr}
 8005258:	b08c      	sub	sp, #48	; 0x30
 800525a:	af04      	add	r7, sp, #16
 800525c:	60f8      	str	r0, [r7, #12]
 800525e:	60b9      	str	r1, [r7, #8]
 8005260:	603b      	str	r3, [r7, #0]
 8005262:	4613      	mov	r3, r2
 8005264:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005266:	88fb      	ldrh	r3, [r7, #6]
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4618      	mov	r0, r3
 800526c:	f001 fb6a 	bl	8006944 <pvPortMalloc>
 8005270:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00e      	beq.n	8005296 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005278:	205c      	movs	r0, #92	; 0x5c
 800527a:	f001 fb63 	bl	8006944 <pvPortMalloc>
 800527e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d003      	beq.n	800528e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	631a      	str	r2, [r3, #48]	; 0x30
 800528c:	e005      	b.n	800529a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800528e:	6978      	ldr	r0, [r7, #20]
 8005290:	f001 fc1a 	bl	8006ac8 <vPortFree>
 8005294:	e001      	b.n	800529a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005296:	2300      	movs	r3, #0
 8005298:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d017      	beq.n	80052d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80052a8:	88fa      	ldrh	r2, [r7, #6]
 80052aa:	2300      	movs	r3, #0
 80052ac:	9303      	str	r3, [sp, #12]
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	9302      	str	r3, [sp, #8]
 80052b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b4:	9301      	str	r3, [sp, #4]
 80052b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68b9      	ldr	r1, [r7, #8]
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 f80e 	bl	80052e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052c4:	69f8      	ldr	r0, [r7, #28]
 80052c6:	f000 f891 	bl	80053ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80052ca:	2301      	movs	r3, #1
 80052cc:	61bb      	str	r3, [r7, #24]
 80052ce:	e002      	b.n	80052d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80052d0:	f04f 33ff 	mov.w	r3, #4294967295
 80052d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80052d6:	69bb      	ldr	r3, [r7, #24]
	}
 80052d8:	4618      	mov	r0, r3
 80052da:	3720      	adds	r7, #32
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b088      	sub	sp, #32
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80052ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	461a      	mov	r2, r3
 80052f8:	21a5      	movs	r1, #165	; 0xa5
 80052fa:	f001 fd54 	bl	8006da6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80052fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005300:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005308:	3b01      	subs	r3, #1
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	4413      	add	r3, r2
 800530e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	f023 0307 	bic.w	r3, r3, #7
 8005316:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	f003 0307 	and.w	r3, r3, #7
 800531e:	2b00      	cmp	r3, #0
 8005320:	d009      	beq.n	8005336 <prvInitialiseNewTask+0x56>
 8005322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	e7fe      	b.n	8005334 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005336:	2300      	movs	r3, #0
 8005338:	61fb      	str	r3, [r7, #28]
 800533a:	e012      	b.n	8005362 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	4413      	add	r3, r2
 8005342:	7819      	ldrb	r1, [r3, #0]
 8005344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	4413      	add	r3, r2
 800534a:	3334      	adds	r3, #52	; 0x34
 800534c:	460a      	mov	r2, r1
 800534e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	4413      	add	r3, r2
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d006      	beq.n	800536a <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	3301      	adds	r3, #1
 8005360:	61fb      	str	r3, [r7, #28]
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	2b0f      	cmp	r3, #15
 8005366:	d9e9      	bls.n	800533c <prvInitialiseNewTask+0x5c>
 8005368:	e000      	b.n	800536c <prvInitialiseNewTask+0x8c>
		{
			break;
 800536a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800536c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005376:	2b37      	cmp	r3, #55	; 0x37
 8005378:	d901      	bls.n	800537e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800537a:	2337      	movs	r3, #55	; 0x37
 800537c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800537e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005382:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005386:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005388:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800538a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538c:	2200      	movs	r2, #0
 800538e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005392:	3304      	adds	r3, #4
 8005394:	4618      	mov	r0, r3
 8005396:	f7ff f9a0 	bl	80046da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800539a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539c:	3318      	adds	r3, #24
 800539e:	4618      	mov	r0, r3
 80053a0:	f7ff f99b 	bl	80046da <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053a8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80053b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053b8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80053ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053bc:	2200      	movs	r2, #0
 80053be:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053c8:	683a      	ldr	r2, [r7, #0]
 80053ca:	68f9      	ldr	r1, [r7, #12]
 80053cc:	69b8      	ldr	r0, [r7, #24]
 80053ce:	f001 f8d7 	bl	8006580 <pxPortInitialiseStack>
 80053d2:	4602      	mov	r2, r0
 80053d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80053d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d002      	beq.n	80053e4 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053e4:	bf00      	nop
 80053e6:	3720      	adds	r7, #32
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80053f4:	f001 f9b0 	bl	8006758 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80053f8:	4b2d      	ldr	r3, [pc, #180]	; (80054b0 <prvAddNewTaskToReadyList+0xc4>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	3301      	adds	r3, #1
 80053fe:	4a2c      	ldr	r2, [pc, #176]	; (80054b0 <prvAddNewTaskToReadyList+0xc4>)
 8005400:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005402:	4b2c      	ldr	r3, [pc, #176]	; (80054b4 <prvAddNewTaskToReadyList+0xc8>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d109      	bne.n	800541e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800540a:	4a2a      	ldr	r2, [pc, #168]	; (80054b4 <prvAddNewTaskToReadyList+0xc8>)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005410:	4b27      	ldr	r3, [pc, #156]	; (80054b0 <prvAddNewTaskToReadyList+0xc4>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d110      	bne.n	800543a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005418:	f000 fc0c 	bl	8005c34 <prvInitialiseTaskLists>
 800541c:	e00d      	b.n	800543a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800541e:	4b26      	ldr	r3, [pc, #152]	; (80054b8 <prvAddNewTaskToReadyList+0xcc>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d109      	bne.n	800543a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005426:	4b23      	ldr	r3, [pc, #140]	; (80054b4 <prvAddNewTaskToReadyList+0xc8>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005430:	429a      	cmp	r2, r3
 8005432:	d802      	bhi.n	800543a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005434:	4a1f      	ldr	r2, [pc, #124]	; (80054b4 <prvAddNewTaskToReadyList+0xc8>)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800543a:	4b20      	ldr	r3, [pc, #128]	; (80054bc <prvAddNewTaskToReadyList+0xd0>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	3301      	adds	r3, #1
 8005440:	4a1e      	ldr	r2, [pc, #120]	; (80054bc <prvAddNewTaskToReadyList+0xd0>)
 8005442:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005444:	4b1d      	ldr	r3, [pc, #116]	; (80054bc <prvAddNewTaskToReadyList+0xd0>)
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005450:	4b1b      	ldr	r3, [pc, #108]	; (80054c0 <prvAddNewTaskToReadyList+0xd4>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	429a      	cmp	r2, r3
 8005456:	d903      	bls.n	8005460 <prvAddNewTaskToReadyList+0x74>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545c:	4a18      	ldr	r2, [pc, #96]	; (80054c0 <prvAddNewTaskToReadyList+0xd4>)
 800545e:	6013      	str	r3, [r2, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005464:	4613      	mov	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4a15      	ldr	r2, [pc, #84]	; (80054c4 <prvAddNewTaskToReadyList+0xd8>)
 800546e:	441a      	add	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	3304      	adds	r3, #4
 8005474:	4619      	mov	r1, r3
 8005476:	4610      	mov	r0, r2
 8005478:	f7ff f93b 	bl	80046f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800547c:	f001 f99a 	bl	80067b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005480:	4b0d      	ldr	r3, [pc, #52]	; (80054b8 <prvAddNewTaskToReadyList+0xcc>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00e      	beq.n	80054a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005488:	4b0a      	ldr	r3, [pc, #40]	; (80054b4 <prvAddNewTaskToReadyList+0xc8>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005492:	429a      	cmp	r2, r3
 8005494:	d207      	bcs.n	80054a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005496:	4b0c      	ldr	r3, [pc, #48]	; (80054c8 <prvAddNewTaskToReadyList+0xdc>)
 8005498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054a6:	bf00      	nop
 80054a8:	3708      	adds	r7, #8
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	20000da0 	.word	0x20000da0
 80054b4:	200008cc 	.word	0x200008cc
 80054b8:	20000dac 	.word	0x20000dac
 80054bc:	20000dbc 	.word	0x20000dbc
 80054c0:	20000da8 	.word	0x20000da8
 80054c4:	200008d0 	.word	0x200008d0
 80054c8:	e000ed04 	.word	0xe000ed04

080054cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80054d4:	2300      	movs	r3, #0
 80054d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d016      	beq.n	800550c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80054de:	4b13      	ldr	r3, [pc, #76]	; (800552c <vTaskDelay+0x60>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d009      	beq.n	80054fa <vTaskDelay+0x2e>
 80054e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	60bb      	str	r3, [r7, #8]
 80054f8:	e7fe      	b.n	80054f8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80054fa:	f000 f87f 	bl	80055fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054fe:	2100      	movs	r1, #0
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 fcdf 	bl	8005ec4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005506:	f000 f887 	bl	8005618 <xTaskResumeAll>
 800550a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d107      	bne.n	8005522 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005512:	4b07      	ldr	r3, [pc, #28]	; (8005530 <vTaskDelay+0x64>)
 8005514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005518:	601a      	str	r2, [r3, #0]
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005522:	bf00      	nop
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20000dc8 	.word	0x20000dc8
 8005530:	e000ed04 	.word	0xe000ed04

08005534 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b08a      	sub	sp, #40	; 0x28
 8005538:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800553a:	2300      	movs	r3, #0
 800553c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800553e:	2300      	movs	r3, #0
 8005540:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005542:	463a      	mov	r2, r7
 8005544:	1d39      	adds	r1, r7, #4
 8005546:	f107 0308 	add.w	r3, r7, #8
 800554a:	4618      	mov	r0, r3
 800554c:	f7ff f874 	bl	8004638 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005550:	6839      	ldr	r1, [r7, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68ba      	ldr	r2, [r7, #8]
 8005556:	9202      	str	r2, [sp, #8]
 8005558:	9301      	str	r3, [sp, #4]
 800555a:	2300      	movs	r3, #0
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	2300      	movs	r3, #0
 8005560:	460a      	mov	r2, r1
 8005562:	4920      	ldr	r1, [pc, #128]	; (80055e4 <vTaskStartScheduler+0xb0>)
 8005564:	4820      	ldr	r0, [pc, #128]	; (80055e8 <vTaskStartScheduler+0xb4>)
 8005566:	f7ff fe1d 	bl	80051a4 <xTaskCreateStatic>
 800556a:	4602      	mov	r2, r0
 800556c:	4b1f      	ldr	r3, [pc, #124]	; (80055ec <vTaskStartScheduler+0xb8>)
 800556e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005570:	4b1e      	ldr	r3, [pc, #120]	; (80055ec <vTaskStartScheduler+0xb8>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d002      	beq.n	800557e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005578:	2301      	movs	r3, #1
 800557a:	617b      	str	r3, [r7, #20]
 800557c:	e001      	b.n	8005582 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800557e:	2300      	movs	r3, #0
 8005580:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d102      	bne.n	800558e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005588:	f000 fcf0 	bl	8005f6c <xTimerCreateTimerTask>
 800558c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d115      	bne.n	80055c0 <vTaskStartScheduler+0x8c>
 8005594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055a6:	4b12      	ldr	r3, [pc, #72]	; (80055f0 <vTaskStartScheduler+0xbc>)
 80055a8:	f04f 32ff 	mov.w	r2, #4294967295
 80055ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055ae:	4b11      	ldr	r3, [pc, #68]	; (80055f4 <vTaskStartScheduler+0xc0>)
 80055b0:	2201      	movs	r2, #1
 80055b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80055b4:	4b10      	ldr	r3, [pc, #64]	; (80055f8 <vTaskStartScheduler+0xc4>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055ba:	f001 f85d 	bl	8006678 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055be:	e00d      	b.n	80055dc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c6:	d109      	bne.n	80055dc <vTaskStartScheduler+0xa8>
 80055c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	e7fe      	b.n	80055da <vTaskStartScheduler+0xa6>
}
 80055dc:	bf00      	nop
 80055de:	3718      	adds	r7, #24
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	080086c4 	.word	0x080086c4
 80055e8:	08005c05 	.word	0x08005c05
 80055ec:	20000dc4 	.word	0x20000dc4
 80055f0:	20000dc0 	.word	0x20000dc0
 80055f4:	20000dac 	.word	0x20000dac
 80055f8:	20000da4 	.word	0x20000da4

080055fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005600:	4b04      	ldr	r3, [pc, #16]	; (8005614 <vTaskSuspendAll+0x18>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	3301      	adds	r3, #1
 8005606:	4a03      	ldr	r2, [pc, #12]	; (8005614 <vTaskSuspendAll+0x18>)
 8005608:	6013      	str	r3, [r2, #0]
}
 800560a:	bf00      	nop
 800560c:	46bd      	mov	sp, r7
 800560e:	bc80      	pop	{r7}
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	20000dc8 	.word	0x20000dc8

08005618 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800561e:	2300      	movs	r3, #0
 8005620:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005622:	2300      	movs	r3, #0
 8005624:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005626:	4b41      	ldr	r3, [pc, #260]	; (800572c <xTaskResumeAll+0x114>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d109      	bne.n	8005642 <xTaskResumeAll+0x2a>
 800562e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	603b      	str	r3, [r7, #0]
 8005640:	e7fe      	b.n	8005640 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005642:	f001 f889 	bl	8006758 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005646:	4b39      	ldr	r3, [pc, #228]	; (800572c <xTaskResumeAll+0x114>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	3b01      	subs	r3, #1
 800564c:	4a37      	ldr	r2, [pc, #220]	; (800572c <xTaskResumeAll+0x114>)
 800564e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005650:	4b36      	ldr	r3, [pc, #216]	; (800572c <xTaskResumeAll+0x114>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d162      	bne.n	800571e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005658:	4b35      	ldr	r3, [pc, #212]	; (8005730 <xTaskResumeAll+0x118>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d05e      	beq.n	800571e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005660:	e02f      	b.n	80056c2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005662:	4b34      	ldr	r3, [pc, #208]	; (8005734 <xTaskResumeAll+0x11c>)
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	3318      	adds	r3, #24
 800566e:	4618      	mov	r0, r3
 8005670:	f7ff f89a 	bl	80047a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	3304      	adds	r3, #4
 8005678:	4618      	mov	r0, r3
 800567a:	f7ff f895 	bl	80047a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005682:	4b2d      	ldr	r3, [pc, #180]	; (8005738 <xTaskResumeAll+0x120>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	429a      	cmp	r2, r3
 8005688:	d903      	bls.n	8005692 <xTaskResumeAll+0x7a>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568e:	4a2a      	ldr	r2, [pc, #168]	; (8005738 <xTaskResumeAll+0x120>)
 8005690:	6013      	str	r3, [r2, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005696:	4613      	mov	r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	4413      	add	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4a27      	ldr	r2, [pc, #156]	; (800573c <xTaskResumeAll+0x124>)
 80056a0:	441a      	add	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	3304      	adds	r3, #4
 80056a6:	4619      	mov	r1, r3
 80056a8:	4610      	mov	r0, r2
 80056aa:	f7ff f822 	bl	80046f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b2:	4b23      	ldr	r3, [pc, #140]	; (8005740 <xTaskResumeAll+0x128>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d302      	bcc.n	80056c2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80056bc:	4b21      	ldr	r3, [pc, #132]	; (8005744 <xTaskResumeAll+0x12c>)
 80056be:	2201      	movs	r2, #1
 80056c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056c2:	4b1c      	ldr	r3, [pc, #112]	; (8005734 <xTaskResumeAll+0x11c>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1cb      	bne.n	8005662 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056d0:	f000 fb4a 	bl	8005d68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80056d4:	4b1c      	ldr	r3, [pc, #112]	; (8005748 <xTaskResumeAll+0x130>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d010      	beq.n	8005702 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056e0:	f000 f844 	bl	800576c <xTaskIncrementTick>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d002      	beq.n	80056f0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80056ea:	4b16      	ldr	r3, [pc, #88]	; (8005744 <xTaskResumeAll+0x12c>)
 80056ec:	2201      	movs	r2, #1
 80056ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1f1      	bne.n	80056e0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80056fc:	4b12      	ldr	r3, [pc, #72]	; (8005748 <xTaskResumeAll+0x130>)
 80056fe:	2200      	movs	r2, #0
 8005700:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005702:	4b10      	ldr	r3, [pc, #64]	; (8005744 <xTaskResumeAll+0x12c>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d009      	beq.n	800571e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800570a:	2301      	movs	r3, #1
 800570c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800570e:	4b0f      	ldr	r3, [pc, #60]	; (800574c <xTaskResumeAll+0x134>)
 8005710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	f3bf 8f4f 	dsb	sy
 800571a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800571e:	f001 f849 	bl	80067b4 <vPortExitCritical>

	return xAlreadyYielded;
 8005722:	68bb      	ldr	r3, [r7, #8]
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	20000dc8 	.word	0x20000dc8
 8005730:	20000da0 	.word	0x20000da0
 8005734:	20000d60 	.word	0x20000d60
 8005738:	20000da8 	.word	0x20000da8
 800573c:	200008d0 	.word	0x200008d0
 8005740:	200008cc 	.word	0x200008cc
 8005744:	20000db4 	.word	0x20000db4
 8005748:	20000db0 	.word	0x20000db0
 800574c:	e000ed04 	.word	0xe000ed04

08005750 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005756:	4b04      	ldr	r3, [pc, #16]	; (8005768 <xTaskGetTickCount+0x18>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800575c:	687b      	ldr	r3, [r7, #4]
}
 800575e:	4618      	mov	r0, r3
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	bc80      	pop	{r7}
 8005766:	4770      	bx	lr
 8005768:	20000da4 	.word	0x20000da4

0800576c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005772:	2300      	movs	r3, #0
 8005774:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005776:	4b51      	ldr	r3, [pc, #324]	; (80058bc <xTaskIncrementTick+0x150>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	f040 808d 	bne.w	800589a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005780:	4b4f      	ldr	r3, [pc, #316]	; (80058c0 <xTaskIncrementTick+0x154>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	3301      	adds	r3, #1
 8005786:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005788:	4a4d      	ldr	r2, [pc, #308]	; (80058c0 <xTaskIncrementTick+0x154>)
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d11f      	bne.n	80057d4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005794:	4b4b      	ldr	r3, [pc, #300]	; (80058c4 <xTaskIncrementTick+0x158>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d009      	beq.n	80057b2 <xTaskIncrementTick+0x46>
 800579e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a2:	f383 8811 	msr	BASEPRI, r3
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	603b      	str	r3, [r7, #0]
 80057b0:	e7fe      	b.n	80057b0 <xTaskIncrementTick+0x44>
 80057b2:	4b44      	ldr	r3, [pc, #272]	; (80058c4 <xTaskIncrementTick+0x158>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	60fb      	str	r3, [r7, #12]
 80057b8:	4b43      	ldr	r3, [pc, #268]	; (80058c8 <xTaskIncrementTick+0x15c>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a41      	ldr	r2, [pc, #260]	; (80058c4 <xTaskIncrementTick+0x158>)
 80057be:	6013      	str	r3, [r2, #0]
 80057c0:	4a41      	ldr	r2, [pc, #260]	; (80058c8 <xTaskIncrementTick+0x15c>)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6013      	str	r3, [r2, #0]
 80057c6:	4b41      	ldr	r3, [pc, #260]	; (80058cc <xTaskIncrementTick+0x160>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3301      	adds	r3, #1
 80057cc:	4a3f      	ldr	r2, [pc, #252]	; (80058cc <xTaskIncrementTick+0x160>)
 80057ce:	6013      	str	r3, [r2, #0]
 80057d0:	f000 faca 	bl	8005d68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057d4:	4b3e      	ldr	r3, [pc, #248]	; (80058d0 <xTaskIncrementTick+0x164>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d34e      	bcc.n	800587c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057de:	4b39      	ldr	r3, [pc, #228]	; (80058c4 <xTaskIncrementTick+0x158>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <xTaskIncrementTick+0x80>
 80057e8:	2301      	movs	r3, #1
 80057ea:	e000      	b.n	80057ee <xTaskIncrementTick+0x82>
 80057ec:	2300      	movs	r3, #0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d004      	beq.n	80057fc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057f2:	4b37      	ldr	r3, [pc, #220]	; (80058d0 <xTaskIncrementTick+0x164>)
 80057f4:	f04f 32ff 	mov.w	r2, #4294967295
 80057f8:	601a      	str	r2, [r3, #0]
					break;
 80057fa:	e03f      	b.n	800587c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80057fc:	4b31      	ldr	r3, [pc, #196]	; (80058c4 <xTaskIncrementTick+0x158>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	429a      	cmp	r2, r3
 8005812:	d203      	bcs.n	800581c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005814:	4a2e      	ldr	r2, [pc, #184]	; (80058d0 <xTaskIncrementTick+0x164>)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6013      	str	r3, [r2, #0]
						break;
 800581a:	e02f      	b.n	800587c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	3304      	adds	r3, #4
 8005820:	4618      	mov	r0, r3
 8005822:	f7fe ffc1 	bl	80047a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582a:	2b00      	cmp	r3, #0
 800582c:	d004      	beq.n	8005838 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	3318      	adds	r3, #24
 8005832:	4618      	mov	r0, r3
 8005834:	f7fe ffb8 	bl	80047a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583c:	4b25      	ldr	r3, [pc, #148]	; (80058d4 <xTaskIncrementTick+0x168>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	429a      	cmp	r2, r3
 8005842:	d903      	bls.n	800584c <xTaskIncrementTick+0xe0>
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005848:	4a22      	ldr	r2, [pc, #136]	; (80058d4 <xTaskIncrementTick+0x168>)
 800584a:	6013      	str	r3, [r2, #0]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005850:	4613      	mov	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4a1f      	ldr	r2, [pc, #124]	; (80058d8 <xTaskIncrementTick+0x16c>)
 800585a:	441a      	add	r2, r3
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	3304      	adds	r3, #4
 8005860:	4619      	mov	r1, r3
 8005862:	4610      	mov	r0, r2
 8005864:	f7fe ff45 	bl	80046f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586c:	4b1b      	ldr	r3, [pc, #108]	; (80058dc <xTaskIncrementTick+0x170>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005872:	429a      	cmp	r2, r3
 8005874:	d3b3      	bcc.n	80057de <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005876:	2301      	movs	r3, #1
 8005878:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800587a:	e7b0      	b.n	80057de <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800587c:	4b17      	ldr	r3, [pc, #92]	; (80058dc <xTaskIncrementTick+0x170>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005882:	4915      	ldr	r1, [pc, #84]	; (80058d8 <xTaskIncrementTick+0x16c>)
 8005884:	4613      	mov	r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4413      	add	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	440b      	add	r3, r1
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d907      	bls.n	80058a4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005894:	2301      	movs	r3, #1
 8005896:	617b      	str	r3, [r7, #20]
 8005898:	e004      	b.n	80058a4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800589a:	4b11      	ldr	r3, [pc, #68]	; (80058e0 <xTaskIncrementTick+0x174>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	3301      	adds	r3, #1
 80058a0:	4a0f      	ldr	r2, [pc, #60]	; (80058e0 <xTaskIncrementTick+0x174>)
 80058a2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80058a4:	4b0f      	ldr	r3, [pc, #60]	; (80058e4 <xTaskIncrementTick+0x178>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d001      	beq.n	80058b0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80058ac:	2301      	movs	r3, #1
 80058ae:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80058b0:	697b      	ldr	r3, [r7, #20]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	20000dc8 	.word	0x20000dc8
 80058c0:	20000da4 	.word	0x20000da4
 80058c4:	20000d58 	.word	0x20000d58
 80058c8:	20000d5c 	.word	0x20000d5c
 80058cc:	20000db8 	.word	0x20000db8
 80058d0:	20000dc0 	.word	0x20000dc0
 80058d4:	20000da8 	.word	0x20000da8
 80058d8:	200008d0 	.word	0x200008d0
 80058dc:	200008cc 	.word	0x200008cc
 80058e0:	20000db0 	.word	0x20000db0
 80058e4:	20000db4 	.word	0x20000db4

080058e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058ee:	4b27      	ldr	r3, [pc, #156]	; (800598c <vTaskSwitchContext+0xa4>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058f6:	4b26      	ldr	r3, [pc, #152]	; (8005990 <vTaskSwitchContext+0xa8>)
 80058f8:	2201      	movs	r2, #1
 80058fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058fc:	e040      	b.n	8005980 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80058fe:	4b24      	ldr	r3, [pc, #144]	; (8005990 <vTaskSwitchContext+0xa8>)
 8005900:	2200      	movs	r2, #0
 8005902:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005904:	4b23      	ldr	r3, [pc, #140]	; (8005994 <vTaskSwitchContext+0xac>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	60fb      	str	r3, [r7, #12]
 800590a:	e00f      	b.n	800592c <vTaskSwitchContext+0x44>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d109      	bne.n	8005926 <vTaskSwitchContext+0x3e>
 8005912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005916:	f383 8811 	msr	BASEPRI, r3
 800591a:	f3bf 8f6f 	isb	sy
 800591e:	f3bf 8f4f 	dsb	sy
 8005922:	607b      	str	r3, [r7, #4]
 8005924:	e7fe      	b.n	8005924 <vTaskSwitchContext+0x3c>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	3b01      	subs	r3, #1
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	491a      	ldr	r1, [pc, #104]	; (8005998 <vTaskSwitchContext+0xb0>)
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	4613      	mov	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	440b      	add	r3, r1
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d0e5      	beq.n	800590c <vTaskSwitchContext+0x24>
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	4613      	mov	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4a13      	ldr	r2, [pc, #76]	; (8005998 <vTaskSwitchContext+0xb0>)
 800594c:	4413      	add	r3, r2
 800594e:	60bb      	str	r3, [r7, #8]
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	605a      	str	r2, [r3, #4]
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	3308      	adds	r3, #8
 8005962:	429a      	cmp	r2, r3
 8005964:	d104      	bne.n	8005970 <vTaskSwitchContext+0x88>
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	605a      	str	r2, [r3, #4]
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	4a09      	ldr	r2, [pc, #36]	; (800599c <vTaskSwitchContext+0xb4>)
 8005978:	6013      	str	r3, [r2, #0]
 800597a:	4a06      	ldr	r2, [pc, #24]	; (8005994 <vTaskSwitchContext+0xac>)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6013      	str	r3, [r2, #0]
}
 8005980:	bf00      	nop
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	bc80      	pop	{r7}
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	20000dc8 	.word	0x20000dc8
 8005990:	20000db4 	.word	0x20000db4
 8005994:	20000da8 	.word	0x20000da8
 8005998:	200008d0 	.word	0x200008d0
 800599c:	200008cc 	.word	0x200008cc

080059a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d109      	bne.n	80059c4 <vTaskPlaceOnEventList+0x24>
 80059b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	e7fe      	b.n	80059c2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059c4:	4b07      	ldr	r3, [pc, #28]	; (80059e4 <vTaskPlaceOnEventList+0x44>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	3318      	adds	r3, #24
 80059ca:	4619      	mov	r1, r3
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7fe feb3 	bl	8004738 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059d2:	2101      	movs	r1, #1
 80059d4:	6838      	ldr	r0, [r7, #0]
 80059d6:	f000 fa75 	bl	8005ec4 <prvAddCurrentTaskToDelayedList>
}
 80059da:	bf00      	nop
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	200008cc 	.word	0x200008cc

080059e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d109      	bne.n	8005a0e <vTaskPlaceOnEventListRestricted+0x26>
 80059fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fe:	f383 8811 	msr	BASEPRI, r3
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	617b      	str	r3, [r7, #20]
 8005a0c:	e7fe      	b.n	8005a0c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a0e:	4b0a      	ldr	r3, [pc, #40]	; (8005a38 <vTaskPlaceOnEventListRestricted+0x50>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	3318      	adds	r3, #24
 8005a14:	4619      	mov	r1, r3
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f7fe fe6b 	bl	80046f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d002      	beq.n	8005a28 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005a22:	f04f 33ff 	mov.w	r3, #4294967295
 8005a26:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a28:	6879      	ldr	r1, [r7, #4]
 8005a2a:	68b8      	ldr	r0, [r7, #8]
 8005a2c:	f000 fa4a 	bl	8005ec4 <prvAddCurrentTaskToDelayedList>
	}
 8005a30:	bf00      	nop
 8005a32:	3718      	adds	r7, #24
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	200008cc 	.word	0x200008cc

08005a3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d109      	bne.n	8005a66 <xTaskRemoveFromEventList+0x2a>
 8005a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a56:	f383 8811 	msr	BASEPRI, r3
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	60fb      	str	r3, [r7, #12]
 8005a64:	e7fe      	b.n	8005a64 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	3318      	adds	r3, #24
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fe fe9c 	bl	80047a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a70:	4b1d      	ldr	r3, [pc, #116]	; (8005ae8 <xTaskRemoveFromEventList+0xac>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d11d      	bne.n	8005ab4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7fe fe93 	bl	80047a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a86:	4b19      	ldr	r3, [pc, #100]	; (8005aec <xTaskRemoveFromEventList+0xb0>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d903      	bls.n	8005a96 <xTaskRemoveFromEventList+0x5a>
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a92:	4a16      	ldr	r2, [pc, #88]	; (8005aec <xTaskRemoveFromEventList+0xb0>)
 8005a94:	6013      	str	r3, [r2, #0]
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4413      	add	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4a13      	ldr	r2, [pc, #76]	; (8005af0 <xTaskRemoveFromEventList+0xb4>)
 8005aa4:	441a      	add	r2, r3
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	3304      	adds	r3, #4
 8005aaa:	4619      	mov	r1, r3
 8005aac:	4610      	mov	r0, r2
 8005aae:	f7fe fe20 	bl	80046f2 <vListInsertEnd>
 8005ab2:	e005      	b.n	8005ac0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	3318      	adds	r3, #24
 8005ab8:	4619      	mov	r1, r3
 8005aba:	480e      	ldr	r0, [pc, #56]	; (8005af4 <xTaskRemoveFromEventList+0xb8>)
 8005abc:	f7fe fe19 	bl	80046f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac4:	4b0c      	ldr	r3, [pc, #48]	; (8005af8 <xTaskRemoveFromEventList+0xbc>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d905      	bls.n	8005ada <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005ad2:	4b0a      	ldr	r3, [pc, #40]	; (8005afc <xTaskRemoveFromEventList+0xc0>)
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	e001      	b.n	8005ade <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005ada:	2300      	movs	r3, #0
 8005adc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005ade:	697b      	ldr	r3, [r7, #20]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3718      	adds	r7, #24
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	20000dc8 	.word	0x20000dc8
 8005aec:	20000da8 	.word	0x20000da8
 8005af0:	200008d0 	.word	0x200008d0
 8005af4:	20000d60 	.word	0x20000d60
 8005af8:	200008cc 	.word	0x200008cc
 8005afc:	20000db4 	.word	0x20000db4

08005b00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b08:	4b06      	ldr	r3, [pc, #24]	; (8005b24 <vTaskInternalSetTimeOutState+0x24>)
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b10:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <vTaskInternalSetTimeOutState+0x28>)
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	605a      	str	r2, [r3, #4]
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bc80      	pop	{r7}
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	20000db8 	.word	0x20000db8
 8005b28:	20000da4 	.word	0x20000da4

08005b2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b088      	sub	sp, #32
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d109      	bne.n	8005b50 <xTaskCheckForTimeOut+0x24>
 8005b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	613b      	str	r3, [r7, #16]
 8005b4e:	e7fe      	b.n	8005b4e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d109      	bne.n	8005b6a <xTaskCheckForTimeOut+0x3e>
 8005b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5a:	f383 8811 	msr	BASEPRI, r3
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	60fb      	str	r3, [r7, #12]
 8005b68:	e7fe      	b.n	8005b68 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005b6a:	f000 fdf5 	bl	8006758 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b6e:	4b1d      	ldr	r3, [pc, #116]	; (8005be4 <xTaskCheckForTimeOut+0xb8>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b86:	d102      	bne.n	8005b8e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	61fb      	str	r3, [r7, #28]
 8005b8c:	e023      	b.n	8005bd6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	4b15      	ldr	r3, [pc, #84]	; (8005be8 <xTaskCheckForTimeOut+0xbc>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d007      	beq.n	8005baa <xTaskCheckForTimeOut+0x7e>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d302      	bcc.n	8005baa <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	61fb      	str	r3, [r7, #28]
 8005ba8:	e015      	b.n	8005bd6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d20b      	bcs.n	8005bcc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	1ad2      	subs	r2, r2, r3
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f7ff ff9d 	bl	8005b00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	61fb      	str	r3, [r7, #28]
 8005bca:	e004      	b.n	8005bd6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005bd6:	f000 fded 	bl	80067b4 <vPortExitCritical>

	return xReturn;
 8005bda:	69fb      	ldr	r3, [r7, #28]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3720      	adds	r7, #32
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	20000da4 	.word	0x20000da4
 8005be8:	20000db8 	.word	0x20000db8

08005bec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005bec:	b480      	push	{r7}
 8005bee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005bf0:	4b03      	ldr	r3, [pc, #12]	; (8005c00 <vTaskMissedYield+0x14>)
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	601a      	str	r2, [r3, #0]
}
 8005bf6:	bf00      	nop
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bc80      	pop	{r7}
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	20000db4 	.word	0x20000db4

08005c04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c0c:	f000 f852 	bl	8005cb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c10:	4b06      	ldr	r3, [pc, #24]	; (8005c2c <prvIdleTask+0x28>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d9f9      	bls.n	8005c0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c18:	4b05      	ldr	r3, [pc, #20]	; (8005c30 <prvIdleTask+0x2c>)
 8005c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	f3bf 8f4f 	dsb	sy
 8005c24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c28:	e7f0      	b.n	8005c0c <prvIdleTask+0x8>
 8005c2a:	bf00      	nop
 8005c2c:	200008d0 	.word	0x200008d0
 8005c30:	e000ed04 	.word	0xe000ed04

08005c34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	607b      	str	r3, [r7, #4]
 8005c3e:	e00c      	b.n	8005c5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	4613      	mov	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4a12      	ldr	r2, [pc, #72]	; (8005c94 <prvInitialiseTaskLists+0x60>)
 8005c4c:	4413      	add	r3, r2
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7fe fd24 	bl	800469c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3301      	adds	r3, #1
 8005c58:	607b      	str	r3, [r7, #4]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b37      	cmp	r3, #55	; 0x37
 8005c5e:	d9ef      	bls.n	8005c40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c60:	480d      	ldr	r0, [pc, #52]	; (8005c98 <prvInitialiseTaskLists+0x64>)
 8005c62:	f7fe fd1b 	bl	800469c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c66:	480d      	ldr	r0, [pc, #52]	; (8005c9c <prvInitialiseTaskLists+0x68>)
 8005c68:	f7fe fd18 	bl	800469c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c6c:	480c      	ldr	r0, [pc, #48]	; (8005ca0 <prvInitialiseTaskLists+0x6c>)
 8005c6e:	f7fe fd15 	bl	800469c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c72:	480c      	ldr	r0, [pc, #48]	; (8005ca4 <prvInitialiseTaskLists+0x70>)
 8005c74:	f7fe fd12 	bl	800469c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c78:	480b      	ldr	r0, [pc, #44]	; (8005ca8 <prvInitialiseTaskLists+0x74>)
 8005c7a:	f7fe fd0f 	bl	800469c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c7e:	4b0b      	ldr	r3, [pc, #44]	; (8005cac <prvInitialiseTaskLists+0x78>)
 8005c80:	4a05      	ldr	r2, [pc, #20]	; (8005c98 <prvInitialiseTaskLists+0x64>)
 8005c82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c84:	4b0a      	ldr	r3, [pc, #40]	; (8005cb0 <prvInitialiseTaskLists+0x7c>)
 8005c86:	4a05      	ldr	r2, [pc, #20]	; (8005c9c <prvInitialiseTaskLists+0x68>)
 8005c88:	601a      	str	r2, [r3, #0]
}
 8005c8a:	bf00      	nop
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	200008d0 	.word	0x200008d0
 8005c98:	20000d30 	.word	0x20000d30
 8005c9c:	20000d44 	.word	0x20000d44
 8005ca0:	20000d60 	.word	0x20000d60
 8005ca4:	20000d74 	.word	0x20000d74
 8005ca8:	20000d8c 	.word	0x20000d8c
 8005cac:	20000d58 	.word	0x20000d58
 8005cb0:	20000d5c 	.word	0x20000d5c

08005cb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cba:	e019      	b.n	8005cf0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005cbc:	f000 fd4c 	bl	8006758 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005cc0:	4b0f      	ldr	r3, [pc, #60]	; (8005d00 <prvCheckTasksWaitingTermination+0x4c>)
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	3304      	adds	r3, #4
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7fe fd6b 	bl	80047a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005cd2:	4b0c      	ldr	r3, [pc, #48]	; (8005d04 <prvCheckTasksWaitingTermination+0x50>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	4a0a      	ldr	r2, [pc, #40]	; (8005d04 <prvCheckTasksWaitingTermination+0x50>)
 8005cda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005cdc:	4b0a      	ldr	r3, [pc, #40]	; (8005d08 <prvCheckTasksWaitingTermination+0x54>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	4a09      	ldr	r2, [pc, #36]	; (8005d08 <prvCheckTasksWaitingTermination+0x54>)
 8005ce4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ce6:	f000 fd65 	bl	80067b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f80e 	bl	8005d0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cf0:	4b05      	ldr	r3, [pc, #20]	; (8005d08 <prvCheckTasksWaitingTermination+0x54>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1e1      	bne.n	8005cbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005cf8:	bf00      	nop
 8005cfa:	3708      	adds	r7, #8
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	20000d74 	.word	0x20000d74
 8005d04:	20000da0 	.word	0x20000da0
 8005d08:	20000d88 	.word	0x20000d88

08005d0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d108      	bne.n	8005d30 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 fed0 	bl	8006ac8 <vPortFree>
				vPortFree( pxTCB );
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 fecd 	bl	8006ac8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d2e:	e017      	b.n	8005d60 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d103      	bne.n	8005d42 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 fec4 	bl	8006ac8 <vPortFree>
	}
 8005d40:	e00e      	b.n	8005d60 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d009      	beq.n	8005d60 <prvDeleteTCB+0x54>
 8005d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d50:	f383 8811 	msr	BASEPRI, r3
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	60fb      	str	r3, [r7, #12]
 8005d5e:	e7fe      	b.n	8005d5e <prvDeleteTCB+0x52>
	}
 8005d60:	bf00      	nop
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d6e:	4b0e      	ldr	r3, [pc, #56]	; (8005da8 <prvResetNextTaskUnblockTime+0x40>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <prvResetNextTaskUnblockTime+0x14>
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e000      	b.n	8005d7e <prvResetNextTaskUnblockTime+0x16>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d004      	beq.n	8005d8c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d82:	4b0a      	ldr	r3, [pc, #40]	; (8005dac <prvResetNextTaskUnblockTime+0x44>)
 8005d84:	f04f 32ff 	mov.w	r2, #4294967295
 8005d88:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d8a:	e008      	b.n	8005d9e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005d8c:	4b06      	ldr	r3, [pc, #24]	; (8005da8 <prvResetNextTaskUnblockTime+0x40>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	4a04      	ldr	r2, [pc, #16]	; (8005dac <prvResetNextTaskUnblockTime+0x44>)
 8005d9c:	6013      	str	r3, [r2, #0]
}
 8005d9e:	bf00      	nop
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bc80      	pop	{r7}
 8005da6:	4770      	bx	lr
 8005da8:	20000d58 	.word	0x20000d58
 8005dac:	20000dc0 	.word	0x20000dc0

08005db0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005db6:	4b0b      	ldr	r3, [pc, #44]	; (8005de4 <xTaskGetSchedulerState+0x34>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d102      	bne.n	8005dc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	607b      	str	r3, [r7, #4]
 8005dc2:	e008      	b.n	8005dd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dc4:	4b08      	ldr	r3, [pc, #32]	; (8005de8 <xTaskGetSchedulerState+0x38>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d102      	bne.n	8005dd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005dcc:	2302      	movs	r3, #2
 8005dce:	607b      	str	r3, [r7, #4]
 8005dd0:	e001      	b.n	8005dd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005dd6:	687b      	ldr	r3, [r7, #4]
	}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bc80      	pop	{r7}
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	20000dac 	.word	0x20000dac
 8005de8:	20000dc8 	.word	0x20000dc8

08005dec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d054      	beq.n	8005eac <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e02:	4b2d      	ldr	r3, [pc, #180]	; (8005eb8 <xTaskPriorityDisinherit+0xcc>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d009      	beq.n	8005e20 <xTaskPriorityDisinherit+0x34>
 8005e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	60fb      	str	r3, [r7, #12]
 8005e1e:	e7fe      	b.n	8005e1e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d109      	bne.n	8005e3c <xTaskPriorityDisinherit+0x50>
 8005e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2c:	f383 8811 	msr	BASEPRI, r3
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	60bb      	str	r3, [r7, #8]
 8005e3a:	e7fe      	b.n	8005e3a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e40:	1e5a      	subs	r2, r3, #1
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d02c      	beq.n	8005eac <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d128      	bne.n	8005eac <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fe fca2 	bl	80047a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e70:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7c:	4b0f      	ldr	r3, [pc, #60]	; (8005ebc <xTaskPriorityDisinherit+0xd0>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d903      	bls.n	8005e8c <xTaskPriorityDisinherit+0xa0>
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e88:	4a0c      	ldr	r2, [pc, #48]	; (8005ebc <xTaskPriorityDisinherit+0xd0>)
 8005e8a:	6013      	str	r3, [r2, #0]
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e90:	4613      	mov	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4a09      	ldr	r2, [pc, #36]	; (8005ec0 <xTaskPriorityDisinherit+0xd4>)
 8005e9a:	441a      	add	r2, r3
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	3304      	adds	r3, #4
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	4610      	mov	r0, r2
 8005ea4:	f7fe fc25 	bl	80046f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005eac:	697b      	ldr	r3, [r7, #20]
	}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	200008cc 	.word	0x200008cc
 8005ebc:	20000da8 	.word	0x20000da8
 8005ec0:	200008d0 	.word	0x200008d0

08005ec4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ece:	4b21      	ldr	r3, [pc, #132]	; (8005f54 <prvAddCurrentTaskToDelayedList+0x90>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ed4:	4b20      	ldr	r3, [pc, #128]	; (8005f58 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	3304      	adds	r3, #4
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7fe fc64 	bl	80047a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee6:	d10a      	bne.n	8005efe <prvAddCurrentTaskToDelayedList+0x3a>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d007      	beq.n	8005efe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eee:	4b1a      	ldr	r3, [pc, #104]	; (8005f58 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3304      	adds	r3, #4
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	4819      	ldr	r0, [pc, #100]	; (8005f5c <prvAddCurrentTaskToDelayedList+0x98>)
 8005ef8:	f7fe fbfb 	bl	80046f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005efc:	e026      	b.n	8005f4c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4413      	add	r3, r2
 8005f04:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f06:	4b14      	ldr	r3, [pc, #80]	; (8005f58 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d209      	bcs.n	8005f2a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f16:	4b12      	ldr	r3, [pc, #72]	; (8005f60 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	4b0f      	ldr	r3, [pc, #60]	; (8005f58 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	3304      	adds	r3, #4
 8005f20:	4619      	mov	r1, r3
 8005f22:	4610      	mov	r0, r2
 8005f24:	f7fe fc08 	bl	8004738 <vListInsert>
}
 8005f28:	e010      	b.n	8005f4c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f2a:	4b0e      	ldr	r3, [pc, #56]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	4b0a      	ldr	r3, [pc, #40]	; (8005f58 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	3304      	adds	r3, #4
 8005f34:	4619      	mov	r1, r3
 8005f36:	4610      	mov	r0, r2
 8005f38:	f7fe fbfe 	bl	8004738 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f3c:	4b0a      	ldr	r3, [pc, #40]	; (8005f68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d202      	bcs.n	8005f4c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005f46:	4a08      	ldr	r2, [pc, #32]	; (8005f68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	6013      	str	r3, [r2, #0]
}
 8005f4c:	bf00      	nop
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	20000da4 	.word	0x20000da4
 8005f58:	200008cc 	.word	0x200008cc
 8005f5c:	20000d8c 	.word	0x20000d8c
 8005f60:	20000d5c 	.word	0x20000d5c
 8005f64:	20000d58 	.word	0x20000d58
 8005f68:	20000dc0 	.word	0x20000dc0

08005f6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b08a      	sub	sp, #40	; 0x28
 8005f70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005f72:	2300      	movs	r3, #0
 8005f74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005f76:	f000 fac3 	bl	8006500 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005f7a:	4b1c      	ldr	r3, [pc, #112]	; (8005fec <xTimerCreateTimerTask+0x80>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d021      	beq.n	8005fc6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005f82:	2300      	movs	r3, #0
 8005f84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f86:	2300      	movs	r3, #0
 8005f88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f8a:	1d3a      	adds	r2, r7, #4
 8005f8c:	f107 0108 	add.w	r1, r7, #8
 8005f90:	f107 030c 	add.w	r3, r7, #12
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7fe fb67 	bl	8004668 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005f9a:	6879      	ldr	r1, [r7, #4]
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	9202      	str	r2, [sp, #8]
 8005fa2:	9301      	str	r3, [sp, #4]
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	9300      	str	r3, [sp, #0]
 8005fa8:	2300      	movs	r3, #0
 8005faa:	460a      	mov	r2, r1
 8005fac:	4910      	ldr	r1, [pc, #64]	; (8005ff0 <xTimerCreateTimerTask+0x84>)
 8005fae:	4811      	ldr	r0, [pc, #68]	; (8005ff4 <xTimerCreateTimerTask+0x88>)
 8005fb0:	f7ff f8f8 	bl	80051a4 <xTaskCreateStatic>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	4b10      	ldr	r3, [pc, #64]	; (8005ff8 <xTimerCreateTimerTask+0x8c>)
 8005fb8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005fba:	4b0f      	ldr	r3, [pc, #60]	; (8005ff8 <xTimerCreateTimerTask+0x8c>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d109      	bne.n	8005fe0 <xTimerCreateTimerTask+0x74>
 8005fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd0:	f383 8811 	msr	BASEPRI, r3
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	613b      	str	r3, [r7, #16]
 8005fde:	e7fe      	b.n	8005fde <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005fe0:	697b      	ldr	r3, [r7, #20]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3718      	adds	r7, #24
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	20000dfc 	.word	0x20000dfc
 8005ff0:	080086cc 	.word	0x080086cc
 8005ff4:	08006115 	.word	0x08006115
 8005ff8:	20000e00 	.word	0x20000e00

08005ffc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b08a      	sub	sp, #40	; 0x28
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
 8006008:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800600a:	2300      	movs	r3, #0
 800600c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d109      	bne.n	8006028 <xTimerGenericCommand+0x2c>
 8006014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006018:	f383 8811 	msr	BASEPRI, r3
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	f3bf 8f4f 	dsb	sy
 8006024:	623b      	str	r3, [r7, #32]
 8006026:	e7fe      	b.n	8006026 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006028:	4b19      	ldr	r3, [pc, #100]	; (8006090 <xTimerGenericCommand+0x94>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d02a      	beq.n	8006086 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2b05      	cmp	r3, #5
 8006040:	dc18      	bgt.n	8006074 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006042:	f7ff feb5 	bl	8005db0 <xTaskGetSchedulerState>
 8006046:	4603      	mov	r3, r0
 8006048:	2b02      	cmp	r3, #2
 800604a:	d109      	bne.n	8006060 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800604c:	4b10      	ldr	r3, [pc, #64]	; (8006090 <xTimerGenericCommand+0x94>)
 800604e:	6818      	ldr	r0, [r3, #0]
 8006050:	f107 0110 	add.w	r1, r7, #16
 8006054:	2300      	movs	r3, #0
 8006056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006058:	f7fe fcce 	bl	80049f8 <xQueueGenericSend>
 800605c:	6278      	str	r0, [r7, #36]	; 0x24
 800605e:	e012      	b.n	8006086 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006060:	4b0b      	ldr	r3, [pc, #44]	; (8006090 <xTimerGenericCommand+0x94>)
 8006062:	6818      	ldr	r0, [r3, #0]
 8006064:	f107 0110 	add.w	r1, r7, #16
 8006068:	2300      	movs	r3, #0
 800606a:	2200      	movs	r2, #0
 800606c:	f7fe fcc4 	bl	80049f8 <xQueueGenericSend>
 8006070:	6278      	str	r0, [r7, #36]	; 0x24
 8006072:	e008      	b.n	8006086 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006074:	4b06      	ldr	r3, [pc, #24]	; (8006090 <xTimerGenericCommand+0x94>)
 8006076:	6818      	ldr	r0, [r3, #0]
 8006078:	f107 0110 	add.w	r1, r7, #16
 800607c:	2300      	movs	r3, #0
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	f7fe fdb4 	bl	8004bec <xQueueGenericSendFromISR>
 8006084:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006088:	4618      	mov	r0, r3
 800608a:	3728      	adds	r7, #40	; 0x28
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	20000dfc 	.word	0x20000dfc

08006094 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b088      	sub	sp, #32
 8006098:	af02      	add	r7, sp, #8
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800609e:	4b1c      	ldr	r3, [pc, #112]	; (8006110 <prvProcessExpiredTimer+0x7c>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	3304      	adds	r3, #4
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7fe fb7b 	bl	80047a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d121      	bne.n	80060fe <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	699a      	ldr	r2, [r3, #24]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	18d1      	adds	r1, r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	6978      	ldr	r0, [r7, #20]
 80060c8:	f000 f8c8 	bl	800625c <prvInsertTimerInActiveList>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d015      	beq.n	80060fe <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060d2:	2300      	movs	r3, #0
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	2300      	movs	r3, #0
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	2100      	movs	r1, #0
 80060dc:	6978      	ldr	r0, [r7, #20]
 80060de:	f7ff ff8d 	bl	8005ffc <xTimerGenericCommand>
 80060e2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d109      	bne.n	80060fe <prvProcessExpiredTimer+0x6a>
 80060ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ee:	f383 8811 	msr	BASEPRI, r3
 80060f2:	f3bf 8f6f 	isb	sy
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	60fb      	str	r3, [r7, #12]
 80060fc:	e7fe      	b.n	80060fc <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006102:	6978      	ldr	r0, [r7, #20]
 8006104:	4798      	blx	r3
}
 8006106:	bf00      	nop
 8006108:	3718      	adds	r7, #24
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	20000df4 	.word	0x20000df4

08006114 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800611c:	f107 0308 	add.w	r3, r7, #8
 8006120:	4618      	mov	r0, r3
 8006122:	f000 f857 	bl	80061d4 <prvGetNextExpireTime>
 8006126:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	4619      	mov	r1, r3
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 f803 	bl	8006138 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006132:	f000 f8d5 	bl	80062e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006136:	e7f1      	b.n	800611c <prvTimerTask+0x8>

08006138 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006142:	f7ff fa5b 	bl	80055fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006146:	f107 0308 	add.w	r3, r7, #8
 800614a:	4618      	mov	r0, r3
 800614c:	f000 f866 	bl	800621c <prvSampleTimeNow>
 8006150:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d130      	bne.n	80061ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10a      	bne.n	8006174 <prvProcessTimerOrBlockTask+0x3c>
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	429a      	cmp	r2, r3
 8006164:	d806      	bhi.n	8006174 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006166:	f7ff fa57 	bl	8005618 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800616a:	68f9      	ldr	r1, [r7, #12]
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f7ff ff91 	bl	8006094 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006172:	e024      	b.n	80061be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d008      	beq.n	800618c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800617a:	4b13      	ldr	r3, [pc, #76]	; (80061c8 <prvProcessTimerOrBlockTask+0x90>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	bf0c      	ite	eq
 8006184:	2301      	moveq	r3, #1
 8006186:	2300      	movne	r3, #0
 8006188:	b2db      	uxtb	r3, r3
 800618a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800618c:	4b0f      	ldr	r3, [pc, #60]	; (80061cc <prvProcessTimerOrBlockTask+0x94>)
 800618e:	6818      	ldr	r0, [r3, #0]
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	683a      	ldr	r2, [r7, #0]
 8006198:	4619      	mov	r1, r3
 800619a:	f7fe ffcf 	bl	800513c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800619e:	f7ff fa3b 	bl	8005618 <xTaskResumeAll>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10a      	bne.n	80061be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80061a8:	4b09      	ldr	r3, [pc, #36]	; (80061d0 <prvProcessTimerOrBlockTask+0x98>)
 80061aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ae:	601a      	str	r2, [r3, #0]
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	f3bf 8f6f 	isb	sy
}
 80061b8:	e001      	b.n	80061be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80061ba:	f7ff fa2d 	bl	8005618 <xTaskResumeAll>
}
 80061be:	bf00      	nop
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	20000df8 	.word	0x20000df8
 80061cc:	20000dfc 	.word	0x20000dfc
 80061d0:	e000ed04 	.word	0xe000ed04

080061d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80061dc:	4b0e      	ldr	r3, [pc, #56]	; (8006218 <prvGetNextExpireTime+0x44>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	bf0c      	ite	eq
 80061e6:	2301      	moveq	r3, #1
 80061e8:	2300      	movne	r3, #0
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	461a      	mov	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d105      	bne.n	8006206 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061fa:	4b07      	ldr	r3, [pc, #28]	; (8006218 <prvGetNextExpireTime+0x44>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	60fb      	str	r3, [r7, #12]
 8006204:	e001      	b.n	800620a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006206:	2300      	movs	r3, #0
 8006208:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800620a:	68fb      	ldr	r3, [r7, #12]
}
 800620c:	4618      	mov	r0, r3
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	bc80      	pop	{r7}
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	20000df4 	.word	0x20000df4

0800621c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006224:	f7ff fa94 	bl	8005750 <xTaskGetTickCount>
 8006228:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800622a:	4b0b      	ldr	r3, [pc, #44]	; (8006258 <prvSampleTimeNow+0x3c>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	429a      	cmp	r2, r3
 8006232:	d205      	bcs.n	8006240 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006234:	f000 f904 	bl	8006440 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	601a      	str	r2, [r3, #0]
 800623e:	e002      	b.n	8006246 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006246:	4a04      	ldr	r2, [pc, #16]	; (8006258 <prvSampleTimeNow+0x3c>)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800624c:	68fb      	ldr	r3, [r7, #12]
}
 800624e:	4618      	mov	r0, r3
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	20000e04 	.word	0x20000e04

0800625c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b086      	sub	sp, #24
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
 8006268:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800626a:	2300      	movs	r3, #0
 800626c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	429a      	cmp	r2, r3
 8006280:	d812      	bhi.n	80062a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	1ad2      	subs	r2, r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	429a      	cmp	r2, r3
 800628e:	d302      	bcc.n	8006296 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006290:	2301      	movs	r3, #1
 8006292:	617b      	str	r3, [r7, #20]
 8006294:	e01b      	b.n	80062ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006296:	4b10      	ldr	r3, [pc, #64]	; (80062d8 <prvInsertTimerInActiveList+0x7c>)
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	3304      	adds	r3, #4
 800629e:	4619      	mov	r1, r3
 80062a0:	4610      	mov	r0, r2
 80062a2:	f7fe fa49 	bl	8004738 <vListInsert>
 80062a6:	e012      	b.n	80062ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d206      	bcs.n	80062be <prvInsertTimerInActiveList+0x62>
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d302      	bcc.n	80062be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80062b8:	2301      	movs	r3, #1
 80062ba:	617b      	str	r3, [r7, #20]
 80062bc:	e007      	b.n	80062ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062be:	4b07      	ldr	r3, [pc, #28]	; (80062dc <prvInsertTimerInActiveList+0x80>)
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	3304      	adds	r3, #4
 80062c6:	4619      	mov	r1, r3
 80062c8:	4610      	mov	r0, r2
 80062ca:	f7fe fa35 	bl	8004738 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80062ce:	697b      	ldr	r3, [r7, #20]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3718      	adds	r7, #24
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	20000df8 	.word	0x20000df8
 80062dc:	20000df4 	.word	0x20000df4

080062e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b08e      	sub	sp, #56	; 0x38
 80062e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062e6:	e099      	b.n	800641c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	da17      	bge.n	800631e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80062ee:	1d3b      	adds	r3, r7, #4
 80062f0:	3304      	adds	r3, #4
 80062f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80062f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d109      	bne.n	800630e <prvProcessReceivedCommands+0x2e>
 80062fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fe:	f383 8811 	msr	BASEPRI, r3
 8006302:	f3bf 8f6f 	isb	sy
 8006306:	f3bf 8f4f 	dsb	sy
 800630a:	61fb      	str	r3, [r7, #28]
 800630c:	e7fe      	b.n	800630c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800630e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006314:	6850      	ldr	r0, [r2, #4]
 8006316:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006318:	6892      	ldr	r2, [r2, #8]
 800631a:	4611      	mov	r1, r2
 800631c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2b00      	cmp	r3, #0
 8006322:	db7a      	blt.n	800641a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d004      	beq.n	800633a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006332:	3304      	adds	r3, #4
 8006334:	4618      	mov	r0, r3
 8006336:	f7fe fa37 	bl	80047a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800633a:	463b      	mov	r3, r7
 800633c:	4618      	mov	r0, r3
 800633e:	f7ff ff6d 	bl	800621c <prvSampleTimeNow>
 8006342:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b09      	cmp	r3, #9
 8006348:	d868      	bhi.n	800641c <prvProcessReceivedCommands+0x13c>
 800634a:	a201      	add	r2, pc, #4	; (adr r2, 8006350 <prvProcessReceivedCommands+0x70>)
 800634c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006350:	08006379 	.word	0x08006379
 8006354:	08006379 	.word	0x08006379
 8006358:	08006379 	.word	0x08006379
 800635c:	0800641d 	.word	0x0800641d
 8006360:	080063d3 	.word	0x080063d3
 8006364:	08006409 	.word	0x08006409
 8006368:	08006379 	.word	0x08006379
 800636c:	08006379 	.word	0x08006379
 8006370:	0800641d 	.word	0x0800641d
 8006374:	080063d3 	.word	0x080063d3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	18d1      	adds	r1, r2, r3
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006384:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006386:	f7ff ff69 	bl	800625c <prvInsertTimerInActiveList>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d045      	beq.n	800641c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006396:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639a:	69db      	ldr	r3, [r3, #28]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d13d      	bne.n	800641c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	441a      	add	r2, r3
 80063a8:	2300      	movs	r3, #0
 80063aa:	9300      	str	r3, [sp, #0]
 80063ac:	2300      	movs	r3, #0
 80063ae:	2100      	movs	r1, #0
 80063b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063b2:	f7ff fe23 	bl	8005ffc <xTimerGenericCommand>
 80063b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80063b8:	6a3b      	ldr	r3, [r7, #32]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d12e      	bne.n	800641c <prvProcessReceivedCommands+0x13c>
 80063be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
 80063ca:	f3bf 8f4f 	dsb	sy
 80063ce:	61bb      	str	r3, [r7, #24]
 80063d0:	e7fe      	b.n	80063d0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80063d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d109      	bne.n	80063f4 <prvProcessReceivedCommands+0x114>
 80063e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	617b      	str	r3, [r7, #20]
 80063f2:	e7fe      	b.n	80063f2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80063f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f6:	699a      	ldr	r2, [r3, #24]
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	18d1      	adds	r1, r2, r3
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006402:	f7ff ff2b 	bl	800625c <prvInsertTimerInActiveList>
					break;
 8006406:	e009      	b.n	800641c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800640e:	2b00      	cmp	r3, #0
 8006410:	d104      	bne.n	800641c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8006412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006414:	f000 fb58 	bl	8006ac8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006418:	e000      	b.n	800641c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800641a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800641c:	4b07      	ldr	r3, [pc, #28]	; (800643c <prvProcessReceivedCommands+0x15c>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	1d39      	adds	r1, r7, #4
 8006422:	2200      	movs	r2, #0
 8006424:	4618      	mov	r0, r3
 8006426:	f7fe fc75 	bl	8004d14 <xQueueReceive>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	f47f af5b 	bne.w	80062e8 <prvProcessReceivedCommands+0x8>
	}
}
 8006432:	bf00      	nop
 8006434:	3730      	adds	r7, #48	; 0x30
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	20000dfc 	.word	0x20000dfc

08006440 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b088      	sub	sp, #32
 8006444:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006446:	e044      	b.n	80064d2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006448:	4b2b      	ldr	r3, [pc, #172]	; (80064f8 <prvSwitchTimerLists+0xb8>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006452:	4b29      	ldr	r3, [pc, #164]	; (80064f8 <prvSwitchTimerLists+0xb8>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	3304      	adds	r3, #4
 8006460:	4618      	mov	r0, r3
 8006462:	f7fe f9a1 	bl	80047a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d12d      	bne.n	80064d2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	4413      	add	r3, r2
 800647e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	429a      	cmp	r2, r3
 8006486:	d90e      	bls.n	80064a6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006494:	4b18      	ldr	r3, [pc, #96]	; (80064f8 <prvSwitchTimerLists+0xb8>)
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	3304      	adds	r3, #4
 800649c:	4619      	mov	r1, r3
 800649e:	4610      	mov	r0, r2
 80064a0:	f7fe f94a 	bl	8004738 <vListInsert>
 80064a4:	e015      	b.n	80064d2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064a6:	2300      	movs	r3, #0
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	2300      	movs	r3, #0
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	2100      	movs	r1, #0
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f7ff fda3 	bl	8005ffc <xTimerGenericCommand>
 80064b6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d109      	bne.n	80064d2 <prvSwitchTimerLists+0x92>
 80064be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	603b      	str	r3, [r7, #0]
 80064d0:	e7fe      	b.n	80064d0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80064d2:	4b09      	ldr	r3, [pc, #36]	; (80064f8 <prvSwitchTimerLists+0xb8>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1b5      	bne.n	8006448 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80064dc:	4b06      	ldr	r3, [pc, #24]	; (80064f8 <prvSwitchTimerLists+0xb8>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80064e2:	4b06      	ldr	r3, [pc, #24]	; (80064fc <prvSwitchTimerLists+0xbc>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a04      	ldr	r2, [pc, #16]	; (80064f8 <prvSwitchTimerLists+0xb8>)
 80064e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80064ea:	4a04      	ldr	r2, [pc, #16]	; (80064fc <prvSwitchTimerLists+0xbc>)
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	6013      	str	r3, [r2, #0]
}
 80064f0:	bf00      	nop
 80064f2:	3718      	adds	r7, #24
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	20000df4 	.word	0x20000df4
 80064fc:	20000df8 	.word	0x20000df8

08006500 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006506:	f000 f927 	bl	8006758 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800650a:	4b15      	ldr	r3, [pc, #84]	; (8006560 <prvCheckForValidListAndQueue+0x60>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d120      	bne.n	8006554 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006512:	4814      	ldr	r0, [pc, #80]	; (8006564 <prvCheckForValidListAndQueue+0x64>)
 8006514:	f7fe f8c2 	bl	800469c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006518:	4813      	ldr	r0, [pc, #76]	; (8006568 <prvCheckForValidListAndQueue+0x68>)
 800651a:	f7fe f8bf 	bl	800469c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800651e:	4b13      	ldr	r3, [pc, #76]	; (800656c <prvCheckForValidListAndQueue+0x6c>)
 8006520:	4a10      	ldr	r2, [pc, #64]	; (8006564 <prvCheckForValidListAndQueue+0x64>)
 8006522:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006524:	4b12      	ldr	r3, [pc, #72]	; (8006570 <prvCheckForValidListAndQueue+0x70>)
 8006526:	4a10      	ldr	r2, [pc, #64]	; (8006568 <prvCheckForValidListAndQueue+0x68>)
 8006528:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800652a:	2300      	movs	r3, #0
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	4b11      	ldr	r3, [pc, #68]	; (8006574 <prvCheckForValidListAndQueue+0x74>)
 8006530:	4a11      	ldr	r2, [pc, #68]	; (8006578 <prvCheckForValidListAndQueue+0x78>)
 8006532:	2110      	movs	r1, #16
 8006534:	200a      	movs	r0, #10
 8006536:	f7fe f9c9 	bl	80048cc <xQueueGenericCreateStatic>
 800653a:	4602      	mov	r2, r0
 800653c:	4b08      	ldr	r3, [pc, #32]	; (8006560 <prvCheckForValidListAndQueue+0x60>)
 800653e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006540:	4b07      	ldr	r3, [pc, #28]	; (8006560 <prvCheckForValidListAndQueue+0x60>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d005      	beq.n	8006554 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006548:	4b05      	ldr	r3, [pc, #20]	; (8006560 <prvCheckForValidListAndQueue+0x60>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	490b      	ldr	r1, [pc, #44]	; (800657c <prvCheckForValidListAndQueue+0x7c>)
 800654e:	4618      	mov	r0, r3
 8006550:	f7fe fdcc 	bl	80050ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006554:	f000 f92e 	bl	80067b4 <vPortExitCritical>
}
 8006558:	bf00      	nop
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	20000dfc 	.word	0x20000dfc
 8006564:	20000dcc 	.word	0x20000dcc
 8006568:	20000de0 	.word	0x20000de0
 800656c:	20000df4 	.word	0x20000df4
 8006570:	20000df8 	.word	0x20000df8
 8006574:	20000ea8 	.word	0x20000ea8
 8006578:	20000e08 	.word	0x20000e08
 800657c:	080086d4 	.word	0x080086d4

08006580 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	3b04      	subs	r3, #4
 8006590:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006598:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	3b04      	subs	r3, #4
 800659e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f023 0201 	bic.w	r2, r3, #1
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	3b04      	subs	r3, #4
 80065ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065b0:	4a08      	ldr	r2, [pc, #32]	; (80065d4 <pxPortInitialiseStack+0x54>)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	3b14      	subs	r3, #20
 80065ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	3b20      	subs	r3, #32
 80065c6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80065c8:	68fb      	ldr	r3, [r7, #12]
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bc80      	pop	{r7}
 80065d2:	4770      	bx	lr
 80065d4:	080065d9 	.word	0x080065d9

080065d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80065de:	2300      	movs	r3, #0
 80065e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80065e2:	4b10      	ldr	r3, [pc, #64]	; (8006624 <prvTaskExitError+0x4c>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ea:	d009      	beq.n	8006600 <prvTaskExitError+0x28>
 80065ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f0:	f383 8811 	msr	BASEPRI, r3
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	60fb      	str	r3, [r7, #12]
 80065fe:	e7fe      	b.n	80065fe <prvTaskExitError+0x26>
 8006600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006612:	bf00      	nop
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d0fc      	beq.n	8006614 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800661a:	bf00      	nop
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	bc80      	pop	{r7}
 8006622:	4770      	bx	lr
 8006624:	2000000c 	.word	0x2000000c
	...

08006630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006630:	4b07      	ldr	r3, [pc, #28]	; (8006650 <pxCurrentTCBConst2>)
 8006632:	6819      	ldr	r1, [r3, #0]
 8006634:	6808      	ldr	r0, [r1, #0]
 8006636:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800663a:	f380 8809 	msr	PSP, r0
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	f04f 0000 	mov.w	r0, #0
 8006646:	f380 8811 	msr	BASEPRI, r0
 800664a:	f04e 0e0d 	orr.w	lr, lr, #13
 800664e:	4770      	bx	lr

08006650 <pxCurrentTCBConst2>:
 8006650:	200008cc 	.word	0x200008cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006654:	bf00      	nop
 8006656:	bf00      	nop

08006658 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006658:	4806      	ldr	r0, [pc, #24]	; (8006674 <prvPortStartFirstTask+0x1c>)
 800665a:	6800      	ldr	r0, [r0, #0]
 800665c:	6800      	ldr	r0, [r0, #0]
 800665e:	f380 8808 	msr	MSP, r0
 8006662:	b662      	cpsie	i
 8006664:	b661      	cpsie	f
 8006666:	f3bf 8f4f 	dsb	sy
 800666a:	f3bf 8f6f 	isb	sy
 800666e:	df00      	svc	0
 8006670:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006672:	bf00      	nop
 8006674:	e000ed08 	.word	0xe000ed08

08006678 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800667e:	4b31      	ldr	r3, [pc, #196]	; (8006744 <xPortStartScheduler+0xcc>)
 8006680:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	b2db      	uxtb	r3, r3
 8006688:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	22ff      	movs	r2, #255	; 0xff
 800668e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	b2db      	uxtb	r3, r3
 8006696:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006698:	78fb      	ldrb	r3, [r7, #3]
 800669a:	b2db      	uxtb	r3, r3
 800669c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	4b29      	ldr	r3, [pc, #164]	; (8006748 <xPortStartScheduler+0xd0>)
 80066a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80066a6:	4b29      	ldr	r3, [pc, #164]	; (800674c <xPortStartScheduler+0xd4>)
 80066a8:	2207      	movs	r2, #7
 80066aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066ac:	e009      	b.n	80066c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80066ae:	4b27      	ldr	r3, [pc, #156]	; (800674c <xPortStartScheduler+0xd4>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	3b01      	subs	r3, #1
 80066b4:	4a25      	ldr	r2, [pc, #148]	; (800674c <xPortStartScheduler+0xd4>)
 80066b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80066b8:	78fb      	ldrb	r3, [r7, #3]
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	005b      	lsls	r3, r3, #1
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066c2:	78fb      	ldrb	r3, [r7, #3]
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ca:	2b80      	cmp	r3, #128	; 0x80
 80066cc:	d0ef      	beq.n	80066ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80066ce:	4b1f      	ldr	r3, [pc, #124]	; (800674c <xPortStartScheduler+0xd4>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f1c3 0307 	rsb	r3, r3, #7
 80066d6:	2b04      	cmp	r3, #4
 80066d8:	d009      	beq.n	80066ee <xPortStartScheduler+0x76>
 80066da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	60bb      	str	r3, [r7, #8]
 80066ec:	e7fe      	b.n	80066ec <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80066ee:	4b17      	ldr	r3, [pc, #92]	; (800674c <xPortStartScheduler+0xd4>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	021b      	lsls	r3, r3, #8
 80066f4:	4a15      	ldr	r2, [pc, #84]	; (800674c <xPortStartScheduler+0xd4>)
 80066f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80066f8:	4b14      	ldr	r3, [pc, #80]	; (800674c <xPortStartScheduler+0xd4>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006700:	4a12      	ldr	r2, [pc, #72]	; (800674c <xPortStartScheduler+0xd4>)
 8006702:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	b2da      	uxtb	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800670c:	4b10      	ldr	r3, [pc, #64]	; (8006750 <xPortStartScheduler+0xd8>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a0f      	ldr	r2, [pc, #60]	; (8006750 <xPortStartScheduler+0xd8>)
 8006712:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006716:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006718:	4b0d      	ldr	r3, [pc, #52]	; (8006750 <xPortStartScheduler+0xd8>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a0c      	ldr	r2, [pc, #48]	; (8006750 <xPortStartScheduler+0xd8>)
 800671e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006722:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006724:	f000 f8b0 	bl	8006888 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006728:	4b0a      	ldr	r3, [pc, #40]	; (8006754 <xPortStartScheduler+0xdc>)
 800672a:	2200      	movs	r2, #0
 800672c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800672e:	f7ff ff93 	bl	8006658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006732:	f7ff f8d9 	bl	80058e8 <vTaskSwitchContext>
	prvTaskExitError();
 8006736:	f7ff ff4f 	bl	80065d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	e000e400 	.word	0xe000e400
 8006748:	20000ef8 	.word	0x20000ef8
 800674c:	20000efc 	.word	0x20000efc
 8006750:	e000ed20 	.word	0xe000ed20
 8006754:	2000000c 	.word	0x2000000c

08006758 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006770:	4b0e      	ldr	r3, [pc, #56]	; (80067ac <vPortEnterCritical+0x54>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	3301      	adds	r3, #1
 8006776:	4a0d      	ldr	r2, [pc, #52]	; (80067ac <vPortEnterCritical+0x54>)
 8006778:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800677a:	4b0c      	ldr	r3, [pc, #48]	; (80067ac <vPortEnterCritical+0x54>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d10e      	bne.n	80067a0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006782:	4b0b      	ldr	r3, [pc, #44]	; (80067b0 <vPortEnterCritical+0x58>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b00      	cmp	r3, #0
 800678a:	d009      	beq.n	80067a0 <vPortEnterCritical+0x48>
 800678c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006790:	f383 8811 	msr	BASEPRI, r3
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	603b      	str	r3, [r7, #0]
 800679e:	e7fe      	b.n	800679e <vPortEnterCritical+0x46>
	}
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bc80      	pop	{r7}
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	2000000c 	.word	0x2000000c
 80067b0:	e000ed04 	.word	0xe000ed04

080067b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80067ba:	4b10      	ldr	r3, [pc, #64]	; (80067fc <vPortExitCritical+0x48>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d109      	bne.n	80067d6 <vPortExitCritical+0x22>
 80067c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	607b      	str	r3, [r7, #4]
 80067d4:	e7fe      	b.n	80067d4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80067d6:	4b09      	ldr	r3, [pc, #36]	; (80067fc <vPortExitCritical+0x48>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	3b01      	subs	r3, #1
 80067dc:	4a07      	ldr	r2, [pc, #28]	; (80067fc <vPortExitCritical+0x48>)
 80067de:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80067e0:	4b06      	ldr	r3, [pc, #24]	; (80067fc <vPortExitCritical+0x48>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d104      	bne.n	80067f2 <vPortExitCritical+0x3e>
 80067e8:	2300      	movs	r3, #0
 80067ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80067f2:	bf00      	nop
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bc80      	pop	{r7}
 80067fa:	4770      	bx	lr
 80067fc:	2000000c 	.word	0x2000000c

08006800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006800:	f3ef 8009 	mrs	r0, PSP
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	4b0d      	ldr	r3, [pc, #52]	; (8006840 <pxCurrentTCBConst>)
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006810:	6010      	str	r0, [r2, #0]
 8006812:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006816:	f04f 0050 	mov.w	r0, #80	; 0x50
 800681a:	f380 8811 	msr	BASEPRI, r0
 800681e:	f7ff f863 	bl	80058e8 <vTaskSwitchContext>
 8006822:	f04f 0000 	mov.w	r0, #0
 8006826:	f380 8811 	msr	BASEPRI, r0
 800682a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800682e:	6819      	ldr	r1, [r3, #0]
 8006830:	6808      	ldr	r0, [r1, #0]
 8006832:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006836:	f380 8809 	msr	PSP, r0
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	4770      	bx	lr

08006840 <pxCurrentTCBConst>:
 8006840:	200008cc 	.word	0x200008cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006844:	bf00      	nop
 8006846:	bf00      	nop

08006848 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
	__asm volatile
 800684e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006852:	f383 8811 	msr	BASEPRI, r3
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006860:	f7fe ff84 	bl	800576c <xTaskIncrementTick>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d003      	beq.n	8006872 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800686a:	4b06      	ldr	r3, [pc, #24]	; (8006884 <SysTick_Handler+0x3c>)
 800686c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006870:	601a      	str	r2, [r3, #0]
 8006872:	2300      	movs	r3, #0
 8006874:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800687c:	bf00      	nop
 800687e:	3708      	adds	r7, #8
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	e000ed04 	.word	0xe000ed04

08006888 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006888:	b480      	push	{r7}
 800688a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800688c:	4b0a      	ldr	r3, [pc, #40]	; (80068b8 <vPortSetupTimerInterrupt+0x30>)
 800688e:	2200      	movs	r2, #0
 8006890:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006892:	4b0a      	ldr	r3, [pc, #40]	; (80068bc <vPortSetupTimerInterrupt+0x34>)
 8006894:	2200      	movs	r2, #0
 8006896:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006898:	4b09      	ldr	r3, [pc, #36]	; (80068c0 <vPortSetupTimerInterrupt+0x38>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a09      	ldr	r2, [pc, #36]	; (80068c4 <vPortSetupTimerInterrupt+0x3c>)
 800689e:	fba2 2303 	umull	r2, r3, r2, r3
 80068a2:	099b      	lsrs	r3, r3, #6
 80068a4:	4a08      	ldr	r2, [pc, #32]	; (80068c8 <vPortSetupTimerInterrupt+0x40>)
 80068a6:	3b01      	subs	r3, #1
 80068a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80068aa:	4b03      	ldr	r3, [pc, #12]	; (80068b8 <vPortSetupTimerInterrupt+0x30>)
 80068ac:	2207      	movs	r2, #7
 80068ae:	601a      	str	r2, [r3, #0]
}
 80068b0:	bf00      	nop
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bc80      	pop	{r7}
 80068b6:	4770      	bx	lr
 80068b8:	e000e010 	.word	0xe000e010
 80068bc:	e000e018 	.word	0xe000e018
 80068c0:	20000000 	.word	0x20000000
 80068c4:	10624dd3 	.word	0x10624dd3
 80068c8:	e000e014 	.word	0xe000e014

080068cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80068d2:	f3ef 8305 	mrs	r3, IPSR
 80068d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2b0f      	cmp	r3, #15
 80068dc:	d913      	bls.n	8006906 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80068de:	4a15      	ldr	r2, [pc, #84]	; (8006934 <vPortValidateInterruptPriority+0x68>)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	4413      	add	r3, r2
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80068e8:	4b13      	ldr	r3, [pc, #76]	; (8006938 <vPortValidateInterruptPriority+0x6c>)
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	7afa      	ldrb	r2, [r7, #11]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d209      	bcs.n	8006906 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80068f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f6:	f383 8811 	msr	BASEPRI, r3
 80068fa:	f3bf 8f6f 	isb	sy
 80068fe:	f3bf 8f4f 	dsb	sy
 8006902:	607b      	str	r3, [r7, #4]
 8006904:	e7fe      	b.n	8006904 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006906:	4b0d      	ldr	r3, [pc, #52]	; (800693c <vPortValidateInterruptPriority+0x70>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800690e:	4b0c      	ldr	r3, [pc, #48]	; (8006940 <vPortValidateInterruptPriority+0x74>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	429a      	cmp	r2, r3
 8006914:	d909      	bls.n	800692a <vPortValidateInterruptPriority+0x5e>
 8006916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	603b      	str	r3, [r7, #0]
 8006928:	e7fe      	b.n	8006928 <vPortValidateInterruptPriority+0x5c>
	}
 800692a:	bf00      	nop
 800692c:	3714      	adds	r7, #20
 800692e:	46bd      	mov	sp, r7
 8006930:	bc80      	pop	{r7}
 8006932:	4770      	bx	lr
 8006934:	e000e3f0 	.word	0xe000e3f0
 8006938:	20000ef8 	.word	0x20000ef8
 800693c:	e000ed0c 	.word	0xe000ed0c
 8006940:	20000efc 	.word	0x20000efc

08006944 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b08a      	sub	sp, #40	; 0x28
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800694c:	2300      	movs	r3, #0
 800694e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006950:	f7fe fe54 	bl	80055fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006954:	4b57      	ldr	r3, [pc, #348]	; (8006ab4 <pvPortMalloc+0x170>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d101      	bne.n	8006960 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800695c:	f000 f90c 	bl	8006b78 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006960:	4b55      	ldr	r3, [pc, #340]	; (8006ab8 <pvPortMalloc+0x174>)
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4013      	ands	r3, r2
 8006968:	2b00      	cmp	r3, #0
 800696a:	f040 808c 	bne.w	8006a86 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d01c      	beq.n	80069ae <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006974:	2208      	movs	r2, #8
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4413      	add	r3, r2
 800697a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f003 0307 	and.w	r3, r3, #7
 8006982:	2b00      	cmp	r3, #0
 8006984:	d013      	beq.n	80069ae <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f023 0307 	bic.w	r3, r3, #7
 800698c:	3308      	adds	r3, #8
 800698e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f003 0307 	and.w	r3, r3, #7
 8006996:	2b00      	cmp	r3, #0
 8006998:	d009      	beq.n	80069ae <pvPortMalloc+0x6a>
 800699a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699e:	f383 8811 	msr	BASEPRI, r3
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	617b      	str	r3, [r7, #20]
 80069ac:	e7fe      	b.n	80069ac <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d068      	beq.n	8006a86 <pvPortMalloc+0x142>
 80069b4:	4b41      	ldr	r3, [pc, #260]	; (8006abc <pvPortMalloc+0x178>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d863      	bhi.n	8006a86 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80069be:	4b40      	ldr	r3, [pc, #256]	; (8006ac0 <pvPortMalloc+0x17c>)
 80069c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80069c2:	4b3f      	ldr	r3, [pc, #252]	; (8006ac0 <pvPortMalloc+0x17c>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069c8:	e004      	b.n	80069d4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80069ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80069ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d903      	bls.n	80069e6 <pvPortMalloc+0xa2>
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1f1      	bne.n	80069ca <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80069e6:	4b33      	ldr	r3, [pc, #204]	; (8006ab4 <pvPortMalloc+0x170>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d04a      	beq.n	8006a86 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80069f0:	6a3b      	ldr	r3, [r7, #32]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2208      	movs	r2, #8
 80069f6:	4413      	add	r3, r2
 80069f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	6a3b      	ldr	r3, [r7, #32]
 8006a00:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	685a      	ldr	r2, [r3, #4]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	1ad2      	subs	r2, r2, r3
 8006a0a:	2308      	movs	r3, #8
 8006a0c:	005b      	lsls	r3, r3, #1
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d91e      	bls.n	8006a50 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4413      	add	r3, r2
 8006a18:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	f003 0307 	and.w	r3, r3, #7
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d009      	beq.n	8006a38 <pvPortMalloc+0xf4>
 8006a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a28:	f383 8811 	msr	BASEPRI, r3
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	613b      	str	r3, [r7, #16]
 8006a36:	e7fe      	b.n	8006a36 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	1ad2      	subs	r2, r2, r3
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a4a:	69b8      	ldr	r0, [r7, #24]
 8006a4c:	f000 f8f6 	bl	8006c3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a50:	4b1a      	ldr	r3, [pc, #104]	; (8006abc <pvPortMalloc+0x178>)
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	4a18      	ldr	r2, [pc, #96]	; (8006abc <pvPortMalloc+0x178>)
 8006a5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a5e:	4b17      	ldr	r3, [pc, #92]	; (8006abc <pvPortMalloc+0x178>)
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	4b18      	ldr	r3, [pc, #96]	; (8006ac4 <pvPortMalloc+0x180>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d203      	bcs.n	8006a72 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a6a:	4b14      	ldr	r3, [pc, #80]	; (8006abc <pvPortMalloc+0x178>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a15      	ldr	r2, [pc, #84]	; (8006ac4 <pvPortMalloc+0x180>)
 8006a70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a74:	685a      	ldr	r2, [r3, #4]
 8006a76:	4b10      	ldr	r3, [pc, #64]	; (8006ab8 <pvPortMalloc+0x174>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	431a      	orrs	r2, r3
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a82:	2200      	movs	r2, #0
 8006a84:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a86:	f7fe fdc7 	bl	8005618 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	f003 0307 	and.w	r3, r3, #7
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d009      	beq.n	8006aa8 <pvPortMalloc+0x164>
 8006a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a98:	f383 8811 	msr	BASEPRI, r3
 8006a9c:	f3bf 8f6f 	isb	sy
 8006aa0:	f3bf 8f4f 	dsb	sy
 8006aa4:	60fb      	str	r3, [r7, #12]
 8006aa6:	e7fe      	b.n	8006aa6 <pvPortMalloc+0x162>
	return pvReturn;
 8006aa8:	69fb      	ldr	r3, [r7, #28]
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3728      	adds	r7, #40	; 0x28
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	20001b08 	.word	0x20001b08
 8006ab8:	20001b14 	.word	0x20001b14
 8006abc:	20001b0c 	.word	0x20001b0c
 8006ac0:	20001b00 	.word	0x20001b00
 8006ac4:	20001b10 	.word	0x20001b10

08006ac8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d046      	beq.n	8006b68 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006ada:	2308      	movs	r3, #8
 8006adc:	425b      	negs	r3, r3
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	4b20      	ldr	r3, [pc, #128]	; (8006b70 <vPortFree+0xa8>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4013      	ands	r3, r2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d109      	bne.n	8006b0a <vPortFree+0x42>
 8006af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	60fb      	str	r3, [r7, #12]
 8006b08:	e7fe      	b.n	8006b08 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d009      	beq.n	8006b26 <vPortFree+0x5e>
 8006b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b16:	f383 8811 	msr	BASEPRI, r3
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	60bb      	str	r3, [r7, #8]
 8006b24:	e7fe      	b.n	8006b24 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	4b11      	ldr	r3, [pc, #68]	; (8006b70 <vPortFree+0xa8>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4013      	ands	r3, r2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d019      	beq.n	8006b68 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d115      	bne.n	8006b68 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	685a      	ldr	r2, [r3, #4]
 8006b40:	4b0b      	ldr	r3, [pc, #44]	; (8006b70 <vPortFree+0xa8>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	43db      	mvns	r3, r3
 8006b46:	401a      	ands	r2, r3
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b4c:	f7fe fd56 	bl	80055fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	685a      	ldr	r2, [r3, #4]
 8006b54:	4b07      	ldr	r3, [pc, #28]	; (8006b74 <vPortFree+0xac>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4413      	add	r3, r2
 8006b5a:	4a06      	ldr	r2, [pc, #24]	; (8006b74 <vPortFree+0xac>)
 8006b5c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b5e:	6938      	ldr	r0, [r7, #16]
 8006b60:	f000 f86c 	bl	8006c3c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006b64:	f7fe fd58 	bl	8005618 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b68:	bf00      	nop
 8006b6a:	3718      	adds	r7, #24
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	20001b14 	.word	0x20001b14
 8006b74:	20001b0c 	.word	0x20001b0c

08006b78 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006b7e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006b82:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006b84:	4b27      	ldr	r3, [pc, #156]	; (8006c24 <prvHeapInit+0xac>)
 8006b86:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f003 0307 	and.w	r3, r3, #7
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00c      	beq.n	8006bac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	3307      	adds	r3, #7
 8006b96:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f023 0307 	bic.w	r3, r3, #7
 8006b9e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ba0:	68ba      	ldr	r2, [r7, #8]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	4a1f      	ldr	r2, [pc, #124]	; (8006c24 <prvHeapInit+0xac>)
 8006ba8:	4413      	add	r3, r2
 8006baa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006bb0:	4a1d      	ldr	r2, [pc, #116]	; (8006c28 <prvHeapInit+0xb0>)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006bb6:	4b1c      	ldr	r3, [pc, #112]	; (8006c28 <prvHeapInit+0xb0>)
 8006bb8:	2200      	movs	r2, #0
 8006bba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006bc4:	2208      	movs	r2, #8
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	1a9b      	subs	r3, r3, r2
 8006bca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f023 0307 	bic.w	r3, r3, #7
 8006bd2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	4a15      	ldr	r2, [pc, #84]	; (8006c2c <prvHeapInit+0xb4>)
 8006bd8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006bda:	4b14      	ldr	r3, [pc, #80]	; (8006c2c <prvHeapInit+0xb4>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2200      	movs	r2, #0
 8006be0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006be2:	4b12      	ldr	r3, [pc, #72]	; (8006c2c <prvHeapInit+0xb4>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2200      	movs	r2, #0
 8006be8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	1ad2      	subs	r2, r2, r3
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006bf8:	4b0c      	ldr	r3, [pc, #48]	; (8006c2c <prvHeapInit+0xb4>)
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	4a0a      	ldr	r2, [pc, #40]	; (8006c30 <prvHeapInit+0xb8>)
 8006c06:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	4a09      	ldr	r2, [pc, #36]	; (8006c34 <prvHeapInit+0xbc>)
 8006c0e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c10:	4b09      	ldr	r3, [pc, #36]	; (8006c38 <prvHeapInit+0xc0>)
 8006c12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006c16:	601a      	str	r2, [r3, #0]
}
 8006c18:	bf00      	nop
 8006c1a:	3714      	adds	r7, #20
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bc80      	pop	{r7}
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	20000f00 	.word	0x20000f00
 8006c28:	20001b00 	.word	0x20001b00
 8006c2c:	20001b08 	.word	0x20001b08
 8006c30:	20001b10 	.word	0x20001b10
 8006c34:	20001b0c 	.word	0x20001b0c
 8006c38:	20001b14 	.word	0x20001b14

08006c3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c44:	4b27      	ldr	r3, [pc, #156]	; (8006ce4 <prvInsertBlockIntoFreeList+0xa8>)
 8006c46:	60fb      	str	r3, [r7, #12]
 8006c48:	e002      	b.n	8006c50 <prvInsertBlockIntoFreeList+0x14>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	60fb      	str	r3, [r7, #12]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d8f7      	bhi.n	8006c4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	4413      	add	r3, r2
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d108      	bne.n	8006c7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	685a      	ldr	r2, [r3, #4]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	441a      	add	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	441a      	add	r2, r3
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d118      	bne.n	8006cc4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	4b14      	ldr	r3, [pc, #80]	; (8006ce8 <prvInsertBlockIntoFreeList+0xac>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d00d      	beq.n	8006cba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685a      	ldr	r2, [r3, #4]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	441a      	add	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	e008      	b.n	8006ccc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006cba:	4b0b      	ldr	r3, [pc, #44]	; (8006ce8 <prvInsertBlockIntoFreeList+0xac>)
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	601a      	str	r2, [r3, #0]
 8006cc2:	e003      	b.n	8006ccc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d002      	beq.n	8006cda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cda:	bf00      	nop
 8006cdc:	3714      	adds	r7, #20
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bc80      	pop	{r7}
 8006ce2:	4770      	bx	lr
 8006ce4:	20001b00 	.word	0x20001b00
 8006ce8:	20001b08 	.word	0x20001b08

08006cec <atoi>:
 8006cec:	220a      	movs	r2, #10
 8006cee:	2100      	movs	r1, #0
 8006cf0:	f000 b932 	b.w	8006f58 <strtol>

08006cf4 <gcvt>:
 8006cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cf6:	461c      	mov	r4, r3
 8006cf8:	b085      	sub	sp, #20
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	4615      	mov	r5, r2
 8006cfe:	2200      	movs	r2, #0
 8006d00:	4606      	mov	r6, r0
 8006d02:	460f      	mov	r7, r1
 8006d04:	f7f9 fe5a 	bl	80009bc <__aeabi_dcmplt>
 8006d08:	4623      	mov	r3, r4
 8006d0a:	b118      	cbz	r0, 8006d14 <gcvt+0x20>
 8006d0c:	222d      	movs	r2, #45	; 0x2d
 8006d0e:	3d01      	subs	r5, #1
 8006d10:	f803 2b01 	strb.w	r2, [r3], #1
 8006d14:	2267      	movs	r2, #103	; 0x67
 8006d16:	2100      	movs	r1, #0
 8006d18:	e9cd 5300 	strd	r5, r3, [sp]
 8006d1c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8006d20:	4905      	ldr	r1, [pc, #20]	; (8006d38 <gcvt+0x44>)
 8006d22:	4632      	mov	r2, r6
 8006d24:	463b      	mov	r3, r7
 8006d26:	6808      	ldr	r0, [r1, #0]
 8006d28:	f000 f9a2 	bl	8007070 <_gcvt>
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	bf14      	ite	ne
 8006d30:	4620      	movne	r0, r4
 8006d32:	2000      	moveq	r0, #0
 8006d34:	b005      	add	sp, #20
 8006d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d38:	20000010 	.word	0x20000010

08006d3c <__errno>:
 8006d3c:	4b01      	ldr	r3, [pc, #4]	; (8006d44 <__errno+0x8>)
 8006d3e:	6818      	ldr	r0, [r3, #0]
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	20000010 	.word	0x20000010

08006d48 <__libc_init_array>:
 8006d48:	b570      	push	{r4, r5, r6, lr}
 8006d4a:	2500      	movs	r5, #0
 8006d4c:	4e0c      	ldr	r6, [pc, #48]	; (8006d80 <__libc_init_array+0x38>)
 8006d4e:	4c0d      	ldr	r4, [pc, #52]	; (8006d84 <__libc_init_array+0x3c>)
 8006d50:	1ba4      	subs	r4, r4, r6
 8006d52:	10a4      	asrs	r4, r4, #2
 8006d54:	42a5      	cmp	r5, r4
 8006d56:	d109      	bne.n	8006d6c <__libc_init_array+0x24>
 8006d58:	f001 fc40 	bl	80085dc <_init>
 8006d5c:	2500      	movs	r5, #0
 8006d5e:	4e0a      	ldr	r6, [pc, #40]	; (8006d88 <__libc_init_array+0x40>)
 8006d60:	4c0a      	ldr	r4, [pc, #40]	; (8006d8c <__libc_init_array+0x44>)
 8006d62:	1ba4      	subs	r4, r4, r6
 8006d64:	10a4      	asrs	r4, r4, #2
 8006d66:	42a5      	cmp	r5, r4
 8006d68:	d105      	bne.n	8006d76 <__libc_init_array+0x2e>
 8006d6a:	bd70      	pop	{r4, r5, r6, pc}
 8006d6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d70:	4798      	blx	r3
 8006d72:	3501      	adds	r5, #1
 8006d74:	e7ee      	b.n	8006d54 <__libc_init_array+0xc>
 8006d76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d7a:	4798      	blx	r3
 8006d7c:	3501      	adds	r5, #1
 8006d7e:	e7f2      	b.n	8006d66 <__libc_init_array+0x1e>
 8006d80:	0800899c 	.word	0x0800899c
 8006d84:	0800899c 	.word	0x0800899c
 8006d88:	0800899c 	.word	0x0800899c
 8006d8c:	080089a0 	.word	0x080089a0

08006d90 <memcpy>:
 8006d90:	b510      	push	{r4, lr}
 8006d92:	1e43      	subs	r3, r0, #1
 8006d94:	440a      	add	r2, r1
 8006d96:	4291      	cmp	r1, r2
 8006d98:	d100      	bne.n	8006d9c <memcpy+0xc>
 8006d9a:	bd10      	pop	{r4, pc}
 8006d9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006da0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006da4:	e7f7      	b.n	8006d96 <memcpy+0x6>

08006da6 <memset>:
 8006da6:	4603      	mov	r3, r0
 8006da8:	4402      	add	r2, r0
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d100      	bne.n	8006db0 <memset+0xa>
 8006dae:	4770      	bx	lr
 8006db0:	f803 1b01 	strb.w	r1, [r3], #1
 8006db4:	e7f9      	b.n	8006daa <memset+0x4>
	...

08006db8 <strtok>:
 8006db8:	4b13      	ldr	r3, [pc, #76]	; (8006e08 <strtok+0x50>)
 8006dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dbe:	681d      	ldr	r5, [r3, #0]
 8006dc0:	4606      	mov	r6, r0
 8006dc2:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8006dc4:	460f      	mov	r7, r1
 8006dc6:	b9b4      	cbnz	r4, 8006df6 <strtok+0x3e>
 8006dc8:	2050      	movs	r0, #80	; 0x50
 8006dca:	f000 fa23 	bl	8007214 <malloc>
 8006dce:	65a8      	str	r0, [r5, #88]	; 0x58
 8006dd0:	e9c0 4400 	strd	r4, r4, [r0]
 8006dd4:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006dd8:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006ddc:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006de0:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006de4:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006de8:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006dec:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006df0:	6184      	str	r4, [r0, #24]
 8006df2:	7704      	strb	r4, [r0, #28]
 8006df4:	6244      	str	r4, [r0, #36]	; 0x24
 8006df6:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8006df8:	4639      	mov	r1, r7
 8006dfa:	4630      	mov	r0, r6
 8006dfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e00:	2301      	movs	r3, #1
 8006e02:	f000 b803 	b.w	8006e0c <__strtok_r>
 8006e06:	bf00      	nop
 8006e08:	20000010 	.word	0x20000010

08006e0c <__strtok_r>:
 8006e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e0e:	b918      	cbnz	r0, 8006e18 <__strtok_r+0xc>
 8006e10:	6810      	ldr	r0, [r2, #0]
 8006e12:	b908      	cbnz	r0, 8006e18 <__strtok_r+0xc>
 8006e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e16:	4620      	mov	r0, r4
 8006e18:	4604      	mov	r4, r0
 8006e1a:	460f      	mov	r7, r1
 8006e1c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006e20:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006e24:	b91e      	cbnz	r6, 8006e2e <__strtok_r+0x22>
 8006e26:	b96d      	cbnz	r5, 8006e44 <__strtok_r+0x38>
 8006e28:	6015      	str	r5, [r2, #0]
 8006e2a:	4628      	mov	r0, r5
 8006e2c:	e7f2      	b.n	8006e14 <__strtok_r+0x8>
 8006e2e:	42b5      	cmp	r5, r6
 8006e30:	d1f6      	bne.n	8006e20 <__strtok_r+0x14>
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1ef      	bne.n	8006e16 <__strtok_r+0xa>
 8006e36:	6014      	str	r4, [r2, #0]
 8006e38:	7003      	strb	r3, [r0, #0]
 8006e3a:	e7eb      	b.n	8006e14 <__strtok_r+0x8>
 8006e3c:	462b      	mov	r3, r5
 8006e3e:	e00d      	b.n	8006e5c <__strtok_r+0x50>
 8006e40:	b926      	cbnz	r6, 8006e4c <__strtok_r+0x40>
 8006e42:	461c      	mov	r4, r3
 8006e44:	4623      	mov	r3, r4
 8006e46:	460f      	mov	r7, r1
 8006e48:	f813 5b01 	ldrb.w	r5, [r3], #1
 8006e4c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006e50:	42b5      	cmp	r5, r6
 8006e52:	d1f5      	bne.n	8006e40 <__strtok_r+0x34>
 8006e54:	2d00      	cmp	r5, #0
 8006e56:	d0f1      	beq.n	8006e3c <__strtok_r+0x30>
 8006e58:	2100      	movs	r1, #0
 8006e5a:	7021      	strb	r1, [r4, #0]
 8006e5c:	6013      	str	r3, [r2, #0]
 8006e5e:	e7d9      	b.n	8006e14 <__strtok_r+0x8>

08006e60 <_strtol_l.isra.0>:
 8006e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e64:	4680      	mov	r8, r0
 8006e66:	4689      	mov	r9, r1
 8006e68:	4692      	mov	sl, r2
 8006e6a:	461e      	mov	r6, r3
 8006e6c:	460f      	mov	r7, r1
 8006e6e:	463d      	mov	r5, r7
 8006e70:	9808      	ldr	r0, [sp, #32]
 8006e72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e76:	f000 f9c9 	bl	800720c <__locale_ctype_ptr_l>
 8006e7a:	4420      	add	r0, r4
 8006e7c:	7843      	ldrb	r3, [r0, #1]
 8006e7e:	f013 0308 	ands.w	r3, r3, #8
 8006e82:	d132      	bne.n	8006eea <_strtol_l.isra.0+0x8a>
 8006e84:	2c2d      	cmp	r4, #45	; 0x2d
 8006e86:	d132      	bne.n	8006eee <_strtol_l.isra.0+0x8e>
 8006e88:	2201      	movs	r2, #1
 8006e8a:	787c      	ldrb	r4, [r7, #1]
 8006e8c:	1cbd      	adds	r5, r7, #2
 8006e8e:	2e00      	cmp	r6, #0
 8006e90:	d05d      	beq.n	8006f4e <_strtol_l.isra.0+0xee>
 8006e92:	2e10      	cmp	r6, #16
 8006e94:	d109      	bne.n	8006eaa <_strtol_l.isra.0+0x4a>
 8006e96:	2c30      	cmp	r4, #48	; 0x30
 8006e98:	d107      	bne.n	8006eaa <_strtol_l.isra.0+0x4a>
 8006e9a:	782b      	ldrb	r3, [r5, #0]
 8006e9c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006ea0:	2b58      	cmp	r3, #88	; 0x58
 8006ea2:	d14f      	bne.n	8006f44 <_strtol_l.isra.0+0xe4>
 8006ea4:	2610      	movs	r6, #16
 8006ea6:	786c      	ldrb	r4, [r5, #1]
 8006ea8:	3502      	adds	r5, #2
 8006eaa:	2a00      	cmp	r2, #0
 8006eac:	bf14      	ite	ne
 8006eae:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006eb2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006eb6:	2700      	movs	r7, #0
 8006eb8:	fbb1 fcf6 	udiv	ip, r1, r6
 8006ebc:	4638      	mov	r0, r7
 8006ebe:	fb06 1e1c 	mls	lr, r6, ip, r1
 8006ec2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006ec6:	2b09      	cmp	r3, #9
 8006ec8:	d817      	bhi.n	8006efa <_strtol_l.isra.0+0x9a>
 8006eca:	461c      	mov	r4, r3
 8006ecc:	42a6      	cmp	r6, r4
 8006ece:	dd23      	ble.n	8006f18 <_strtol_l.isra.0+0xb8>
 8006ed0:	1c7b      	adds	r3, r7, #1
 8006ed2:	d007      	beq.n	8006ee4 <_strtol_l.isra.0+0x84>
 8006ed4:	4584      	cmp	ip, r0
 8006ed6:	d31c      	bcc.n	8006f12 <_strtol_l.isra.0+0xb2>
 8006ed8:	d101      	bne.n	8006ede <_strtol_l.isra.0+0x7e>
 8006eda:	45a6      	cmp	lr, r4
 8006edc:	db19      	blt.n	8006f12 <_strtol_l.isra.0+0xb2>
 8006ede:	2701      	movs	r7, #1
 8006ee0:	fb00 4006 	mla	r0, r0, r6, r4
 8006ee4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ee8:	e7eb      	b.n	8006ec2 <_strtol_l.isra.0+0x62>
 8006eea:	462f      	mov	r7, r5
 8006eec:	e7bf      	b.n	8006e6e <_strtol_l.isra.0+0xe>
 8006eee:	2c2b      	cmp	r4, #43	; 0x2b
 8006ef0:	bf04      	itt	eq
 8006ef2:	1cbd      	addeq	r5, r7, #2
 8006ef4:	787c      	ldrbeq	r4, [r7, #1]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	e7c9      	b.n	8006e8e <_strtol_l.isra.0+0x2e>
 8006efa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006efe:	2b19      	cmp	r3, #25
 8006f00:	d801      	bhi.n	8006f06 <_strtol_l.isra.0+0xa6>
 8006f02:	3c37      	subs	r4, #55	; 0x37
 8006f04:	e7e2      	b.n	8006ecc <_strtol_l.isra.0+0x6c>
 8006f06:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006f0a:	2b19      	cmp	r3, #25
 8006f0c:	d804      	bhi.n	8006f18 <_strtol_l.isra.0+0xb8>
 8006f0e:	3c57      	subs	r4, #87	; 0x57
 8006f10:	e7dc      	b.n	8006ecc <_strtol_l.isra.0+0x6c>
 8006f12:	f04f 37ff 	mov.w	r7, #4294967295
 8006f16:	e7e5      	b.n	8006ee4 <_strtol_l.isra.0+0x84>
 8006f18:	1c7b      	adds	r3, r7, #1
 8006f1a:	d108      	bne.n	8006f2e <_strtol_l.isra.0+0xce>
 8006f1c:	2322      	movs	r3, #34	; 0x22
 8006f1e:	4608      	mov	r0, r1
 8006f20:	f8c8 3000 	str.w	r3, [r8]
 8006f24:	f1ba 0f00 	cmp.w	sl, #0
 8006f28:	d107      	bne.n	8006f3a <_strtol_l.isra.0+0xda>
 8006f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f2e:	b102      	cbz	r2, 8006f32 <_strtol_l.isra.0+0xd2>
 8006f30:	4240      	negs	r0, r0
 8006f32:	f1ba 0f00 	cmp.w	sl, #0
 8006f36:	d0f8      	beq.n	8006f2a <_strtol_l.isra.0+0xca>
 8006f38:	b10f      	cbz	r7, 8006f3e <_strtol_l.isra.0+0xde>
 8006f3a:	f105 39ff 	add.w	r9, r5, #4294967295
 8006f3e:	f8ca 9000 	str.w	r9, [sl]
 8006f42:	e7f2      	b.n	8006f2a <_strtol_l.isra.0+0xca>
 8006f44:	2430      	movs	r4, #48	; 0x30
 8006f46:	2e00      	cmp	r6, #0
 8006f48:	d1af      	bne.n	8006eaa <_strtol_l.isra.0+0x4a>
 8006f4a:	2608      	movs	r6, #8
 8006f4c:	e7ad      	b.n	8006eaa <_strtol_l.isra.0+0x4a>
 8006f4e:	2c30      	cmp	r4, #48	; 0x30
 8006f50:	d0a3      	beq.n	8006e9a <_strtol_l.isra.0+0x3a>
 8006f52:	260a      	movs	r6, #10
 8006f54:	e7a9      	b.n	8006eaa <_strtol_l.isra.0+0x4a>
	...

08006f58 <strtol>:
 8006f58:	4b08      	ldr	r3, [pc, #32]	; (8006f7c <strtol+0x24>)
 8006f5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f5c:	681c      	ldr	r4, [r3, #0]
 8006f5e:	4d08      	ldr	r5, [pc, #32]	; (8006f80 <strtol+0x28>)
 8006f60:	6a23      	ldr	r3, [r4, #32]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	bf08      	it	eq
 8006f66:	462b      	moveq	r3, r5
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	460a      	mov	r2, r1
 8006f6e:	4601      	mov	r1, r0
 8006f70:	4620      	mov	r0, r4
 8006f72:	f7ff ff75 	bl	8006e60 <_strtol_l.isra.0>
 8006f76:	b003      	add	sp, #12
 8006f78:	bd30      	pop	{r4, r5, pc}
 8006f7a:	bf00      	nop
 8006f7c:	20000010 	.word	0x20000010
 8006f80:	20000074 	.word	0x20000074

08006f84 <print_e>:
 8006f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f86:	b08b      	sub	sp, #44	; 0x2c
 8006f88:	460f      	mov	r7, r1
 8006f8a:	a908      	add	r1, sp, #32
 8006f8c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8006f8e:	9104      	str	r1, [sp, #16]
 8006f90:	a907      	add	r1, sp, #28
 8006f92:	9103      	str	r1, [sp, #12]
 8006f94:	a909      	add	r1, sp, #36	; 0x24
 8006f96:	9102      	str	r1, [sp, #8]
 8006f98:	1c61      	adds	r1, r4, #1
 8006f9a:	9101      	str	r1, [sp, #4]
 8006f9c:	2102      	movs	r1, #2
 8006f9e:	9100      	str	r1, [sp, #0]
 8006fa0:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8006fa4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8006fa6:	f000 fd63 	bl	8007a70 <_dtoa_r>
 8006faa:	f242 730f 	movw	r3, #9999	; 0x270f
 8006fae:	4601      	mov	r1, r0
 8006fb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fb2:	4298      	cmp	r0, r3
 8006fb4:	d104      	bne.n	8006fc0 <print_e+0x3c>
 8006fb6:	4638      	mov	r0, r7
 8006fb8:	f000 fcb6 	bl	8007928 <strcpy>
 8006fbc:	b00b      	add	sp, #44	; 0x2c
 8006fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fc0:	780b      	ldrb	r3, [r1, #0]
 8006fc2:	703b      	strb	r3, [r7, #0]
 8006fc4:	2d00      	cmp	r5, #0
 8006fc6:	d142      	bne.n	800704e <print_e+0xca>
 8006fc8:	2c00      	cmp	r4, #0
 8006fca:	d140      	bne.n	800704e <print_e+0xca>
 8006fcc:	1c7b      	adds	r3, r7, #1
 8006fce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006fd2:	b10a      	cbz	r2, 8006fd8 <print_e+0x54>
 8006fd4:	2c00      	cmp	r4, #0
 8006fd6:	dc3e      	bgt.n	8007056 <print_e+0xd2>
 8006fd8:	2e67      	cmp	r6, #103	; 0x67
 8006fda:	d043      	beq.n	8007064 <print_e+0xe0>
 8006fdc:	2e47      	cmp	r6, #71	; 0x47
 8006fde:	d043      	beq.n	8007068 <print_e+0xe4>
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	2730      	movs	r7, #48	; 0x30
 8006fe4:	191d      	adds	r5, r3, r4
 8006fe6:	1aa9      	subs	r1, r5, r2
 8006fe8:	2900      	cmp	r1, #0
 8006fea:	dc38      	bgt.n	800705e <print_e+0xda>
 8006fec:	2c00      	cmp	r4, #0
 8006fee:	bfa8      	it	ge
 8006ff0:	191b      	addge	r3, r3, r4
 8006ff2:	1e41      	subs	r1, r0, #1
 8006ff4:	2900      	cmp	r1, #0
 8006ff6:	9109      	str	r1, [sp, #36]	; 0x24
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	bfb7      	itett	lt
 8006ffc:	212d      	movlt	r1, #45	; 0x2d
 8006ffe:	212b      	movge	r1, #43	; 0x2b
 8007000:	f1c0 0001 	rsblt	r0, r0, #1
 8007004:	9009      	strlt	r0, [sp, #36]	; 0x24
 8007006:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007008:	f802 6b02 	strb.w	r6, [r2], #2
 800700c:	bfb4      	ite	lt
 800700e:	7059      	strblt	r1, [r3, #1]
 8007010:	7059      	strbge	r1, [r3, #1]
 8007012:	2863      	cmp	r0, #99	; 0x63
 8007014:	dd0b      	ble.n	800702e <print_e+0xaa>
 8007016:	2164      	movs	r1, #100	; 0x64
 8007018:	fb90 f1f1 	sdiv	r1, r0, r1
 800701c:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8007020:	1cda      	adds	r2, r3, #3
 8007022:	709c      	strb	r4, [r3, #2]
 8007024:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8007028:	fb03 0101 	mla	r1, r3, r1, r0
 800702c:	9109      	str	r1, [sp, #36]	; 0x24
 800702e:	230a      	movs	r3, #10
 8007030:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007032:	fb91 f3f3 	sdiv	r3, r1, r3
 8007036:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800703a:	7010      	strb	r0, [r2, #0]
 800703c:	f06f 0009 	mvn.w	r0, #9
 8007040:	fb00 1303 	mla	r3, r0, r3, r1
 8007044:	3330      	adds	r3, #48	; 0x30
 8007046:	7053      	strb	r3, [r2, #1]
 8007048:	2300      	movs	r3, #0
 800704a:	7093      	strb	r3, [r2, #2]
 800704c:	e7b6      	b.n	8006fbc <print_e+0x38>
 800704e:	222e      	movs	r2, #46	; 0x2e
 8007050:	1cbb      	adds	r3, r7, #2
 8007052:	707a      	strb	r2, [r7, #1]
 8007054:	e7bb      	b.n	8006fce <print_e+0x4a>
 8007056:	f803 2b01 	strb.w	r2, [r3], #1
 800705a:	3c01      	subs	r4, #1
 800705c:	e7b7      	b.n	8006fce <print_e+0x4a>
 800705e:	f802 7b01 	strb.w	r7, [r2], #1
 8007062:	e7c0      	b.n	8006fe6 <print_e+0x62>
 8007064:	2665      	movs	r6, #101	; 0x65
 8007066:	e7c4      	b.n	8006ff2 <print_e+0x6e>
 8007068:	2645      	movs	r6, #69	; 0x45
 800706a:	e7c2      	b.n	8006ff2 <print_e+0x6e>
 800706c:	0000      	movs	r0, r0
	...

08007070 <_gcvt>:
 8007070:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007074:	4617      	mov	r7, r2
 8007076:	461d      	mov	r5, r3
 8007078:	b08b      	sub	sp, #44	; 0x2c
 800707a:	4681      	mov	r9, r0
 800707c:	e9dd 6412 	ldrd	r6, r4, [sp, #72]	; 0x48
 8007080:	2200      	movs	r2, #0
 8007082:	2300      	movs	r3, #0
 8007084:	4638      	mov	r0, r7
 8007086:	4629      	mov	r1, r5
 8007088:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 800708c:	f7f9 fc96 	bl	80009bc <__aeabi_dcmplt>
 8007090:	b108      	cbz	r0, 8007096 <_gcvt+0x26>
 8007092:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8007096:	2200      	movs	r2, #0
 8007098:	2300      	movs	r3, #0
 800709a:	4638      	mov	r0, r7
 800709c:	4629      	mov	r1, r5
 800709e:	f7f9 fc83 	bl	80009a8 <__aeabi_dcmpeq>
 80070a2:	b138      	cbz	r0, 80070b4 <_gcvt+0x44>
 80070a4:	2330      	movs	r3, #48	; 0x30
 80070a6:	7023      	strb	r3, [r4, #0]
 80070a8:	2300      	movs	r3, #0
 80070aa:	7063      	strb	r3, [r4, #1]
 80070ac:	4620      	mov	r0, r4
 80070ae:	b00b      	add	sp, #44	; 0x2c
 80070b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070b4:	a352      	add	r3, pc, #328	; (adr r3, 8007200 <_gcvt+0x190>)
 80070b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ba:	4638      	mov	r0, r7
 80070bc:	4629      	mov	r1, r5
 80070be:	f7f9 fc87 	bl	80009d0 <__aeabi_dcmple>
 80070c2:	b168      	cbz	r0, 80070e0 <_gcvt+0x70>
 80070c4:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80070c8:	3e01      	subs	r6, #1
 80070ca:	9301      	str	r3, [sp, #4]
 80070cc:	f8cd 8008 	str.w	r8, [sp, #8]
 80070d0:	9600      	str	r6, [sp, #0]
 80070d2:	463a      	mov	r2, r7
 80070d4:	462b      	mov	r3, r5
 80070d6:	4621      	mov	r1, r4
 80070d8:	4648      	mov	r0, r9
 80070da:	f7ff ff53 	bl	8006f84 <print_e>
 80070de:	e7e5      	b.n	80070ac <_gcvt+0x3c>
 80070e0:	4630      	mov	r0, r6
 80070e2:	f000 fb8d 	bl	8007800 <_mprec_log10>
 80070e6:	463a      	mov	r2, r7
 80070e8:	462b      	mov	r3, r5
 80070ea:	f7f9 fc71 	bl	80009d0 <__aeabi_dcmple>
 80070ee:	2800      	cmp	r0, #0
 80070f0:	d1e8      	bne.n	80070c4 <_gcvt+0x54>
 80070f2:	2200      	movs	r2, #0
 80070f4:	4b44      	ldr	r3, [pc, #272]	; (8007208 <_gcvt+0x198>)
 80070f6:	4629      	mov	r1, r5
 80070f8:	4638      	mov	r0, r7
 80070fa:	f7f9 fc5f 	bl	80009bc <__aeabi_dcmplt>
 80070fe:	a909      	add	r1, sp, #36	; 0x24
 8007100:	aa08      	add	r2, sp, #32
 8007102:	ab07      	add	r3, sp, #28
 8007104:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8007108:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800710c:	b388      	cbz	r0, 8007172 <_gcvt+0x102>
 800710e:	2303      	movs	r3, #3
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	463a      	mov	r2, r7
 8007114:	462b      	mov	r3, r5
 8007116:	4648      	mov	r0, r9
 8007118:	f000 fcaa 	bl	8007a70 <_dtoa_r>
 800711c:	f242 730f 	movw	r3, #9999	; 0x270f
 8007120:	9a07      	ldr	r2, [sp, #28]
 8007122:	429a      	cmp	r2, r3
 8007124:	d027      	beq.n	8007176 <_gcvt+0x106>
 8007126:	4623      	mov	r3, r4
 8007128:	4426      	add	r6, r4
 800712a:	4607      	mov	r7, r0
 800712c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8007130:	1af2      	subs	r2, r6, r3
 8007132:	9d07      	ldr	r5, [sp, #28]
 8007134:	b349      	cbz	r1, 800718a <_gcvt+0x11a>
 8007136:	2d00      	cmp	r5, #0
 8007138:	dc22      	bgt.n	8007180 <_gcvt+0x110>
 800713a:	f1b8 0f00 	cmp.w	r8, #0
 800713e:	d102      	bne.n	8007146 <_gcvt+0xd6>
 8007140:	7839      	ldrb	r1, [r7, #0]
 8007142:	2900      	cmp	r1, #0
 8007144:	d049      	beq.n	80071da <_gcvt+0x16a>
 8007146:	429c      	cmp	r4, r3
 8007148:	bf04      	itt	eq
 800714a:	2130      	moveq	r1, #48	; 0x30
 800714c:	7021      	strbeq	r1, [r4, #0]
 800714e:	f04f 012e 	mov.w	r1, #46	; 0x2e
 8007152:	f04f 0000 	mov.w	r0, #0
 8007156:	f04f 0630 	mov.w	r6, #48	; 0x30
 800715a:	bf08      	it	eq
 800715c:	1c63      	addeq	r3, r4, #1
 800715e:	7019      	strb	r1, [r3, #0]
 8007160:	9907      	ldr	r1, [sp, #28]
 8007162:	3301      	adds	r3, #1
 8007164:	2900      	cmp	r1, #0
 8007166:	460d      	mov	r5, r1
 8007168:	db24      	blt.n	80071b4 <_gcvt+0x144>
 800716a:	b100      	cbz	r0, 800716e <_gcvt+0xfe>
 800716c:	9107      	str	r1, [sp, #28]
 800716e:	1e79      	subs	r1, r7, #1
 8007170:	e02b      	b.n	80071ca <_gcvt+0x15a>
 8007172:	2302      	movs	r3, #2
 8007174:	e7cc      	b.n	8007110 <_gcvt+0xa0>
 8007176:	4601      	mov	r1, r0
 8007178:	4620      	mov	r0, r4
 800717a:	f000 fbd5 	bl	8007928 <strcpy>
 800717e:	e795      	b.n	80070ac <_gcvt+0x3c>
 8007180:	3d01      	subs	r5, #1
 8007182:	f803 1b01 	strb.w	r1, [r3], #1
 8007186:	9507      	str	r5, [sp, #28]
 8007188:	e7cf      	b.n	800712a <_gcvt+0xba>
 800718a:	1aad      	subs	r5, r5, r2
 800718c:	2630      	movs	r6, #48	; 0x30
 800718e:	e005      	b.n	800719c <_gcvt+0x12c>
 8007190:	2a00      	cmp	r2, #0
 8007192:	dd06      	ble.n	80071a2 <_gcvt+0x132>
 8007194:	2101      	movs	r1, #1
 8007196:	f803 6b01 	strb.w	r6, [r3], #1
 800719a:	3a01      	subs	r2, #1
 800719c:	18a8      	adds	r0, r5, r2
 800719e:	2800      	cmp	r0, #0
 80071a0:	dcf6      	bgt.n	8007190 <_gcvt+0x120>
 80071a2:	2900      	cmp	r1, #0
 80071a4:	d0c9      	beq.n	800713a <_gcvt+0xca>
 80071a6:	9007      	str	r0, [sp, #28]
 80071a8:	e7c7      	b.n	800713a <_gcvt+0xca>
 80071aa:	f803 6b01 	strb.w	r6, [r3], #1
 80071ae:	3a01      	subs	r2, #1
 80071b0:	2001      	movs	r0, #1
 80071b2:	e7d7      	b.n	8007164 <_gcvt+0xf4>
 80071b4:	2a00      	cmp	r2, #0
 80071b6:	f101 0101 	add.w	r1, r1, #1
 80071ba:	dcf6      	bgt.n	80071aa <_gcvt+0x13a>
 80071bc:	2800      	cmp	r0, #0
 80071be:	d0d6      	beq.n	800716e <_gcvt+0xfe>
 80071c0:	9507      	str	r5, [sp, #28]
 80071c2:	e7d4      	b.n	800716e <_gcvt+0xfe>
 80071c4:	f803 0b01 	strb.w	r0, [r3], #1
 80071c8:	3a01      	subs	r2, #1
 80071ca:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80071ce:	b108      	cbz	r0, 80071d4 <_gcvt+0x164>
 80071d0:	2a00      	cmp	r2, #0
 80071d2:	dcf7      	bgt.n	80071c4 <_gcvt+0x154>
 80071d4:	f1b8 0f00 	cmp.w	r8, #0
 80071d8:	d10b      	bne.n	80071f2 <_gcvt+0x182>
 80071da:	2200      	movs	r2, #0
 80071dc:	701a      	strb	r2, [r3, #0]
 80071de:	e765      	b.n	80070ac <_gcvt+0x3c>
 80071e0:	f801 6b01 	strb.w	r6, [r1], #1
 80071e4:	1a68      	subs	r0, r5, r1
 80071e6:	2800      	cmp	r0, #0
 80071e8:	dcfa      	bgt.n	80071e0 <_gcvt+0x170>
 80071ea:	2a00      	cmp	r2, #0
 80071ec:	bfa8      	it	ge
 80071ee:	189b      	addge	r3, r3, r2
 80071f0:	e7f3      	b.n	80071da <_gcvt+0x16a>
 80071f2:	4619      	mov	r1, r3
 80071f4:	189d      	adds	r5, r3, r2
 80071f6:	2630      	movs	r6, #48	; 0x30
 80071f8:	e7f4      	b.n	80071e4 <_gcvt+0x174>
 80071fa:	bf00      	nop
 80071fc:	f3af 8000 	nop.w
 8007200:	eb1c432d 	.word	0xeb1c432d
 8007204:	3f1a36e2 	.word	0x3f1a36e2
 8007208:	3ff00000 	.word	0x3ff00000

0800720c <__locale_ctype_ptr_l>:
 800720c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007210:	4770      	bx	lr
	...

08007214 <malloc>:
 8007214:	4b02      	ldr	r3, [pc, #8]	; (8007220 <malloc+0xc>)
 8007216:	4601      	mov	r1, r0
 8007218:	6818      	ldr	r0, [r3, #0]
 800721a:	f000 bb1b 	b.w	8007854 <_malloc_r>
 800721e:	bf00      	nop
 8007220:	20000010 	.word	0x20000010

08007224 <__ascii_mbtowc>:
 8007224:	b082      	sub	sp, #8
 8007226:	b901      	cbnz	r1, 800722a <__ascii_mbtowc+0x6>
 8007228:	a901      	add	r1, sp, #4
 800722a:	b142      	cbz	r2, 800723e <__ascii_mbtowc+0x1a>
 800722c:	b14b      	cbz	r3, 8007242 <__ascii_mbtowc+0x1e>
 800722e:	7813      	ldrb	r3, [r2, #0]
 8007230:	600b      	str	r3, [r1, #0]
 8007232:	7812      	ldrb	r2, [r2, #0]
 8007234:	1c10      	adds	r0, r2, #0
 8007236:	bf18      	it	ne
 8007238:	2001      	movne	r0, #1
 800723a:	b002      	add	sp, #8
 800723c:	4770      	bx	lr
 800723e:	4610      	mov	r0, r2
 8007240:	e7fb      	b.n	800723a <__ascii_mbtowc+0x16>
 8007242:	f06f 0001 	mvn.w	r0, #1
 8007246:	e7f8      	b.n	800723a <__ascii_mbtowc+0x16>

08007248 <_Balloc>:
 8007248:	b570      	push	{r4, r5, r6, lr}
 800724a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800724c:	4604      	mov	r4, r0
 800724e:	460e      	mov	r6, r1
 8007250:	b93d      	cbnz	r5, 8007262 <_Balloc+0x1a>
 8007252:	2010      	movs	r0, #16
 8007254:	f7ff ffde 	bl	8007214 <malloc>
 8007258:	6260      	str	r0, [r4, #36]	; 0x24
 800725a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800725e:	6005      	str	r5, [r0, #0]
 8007260:	60c5      	str	r5, [r0, #12]
 8007262:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007264:	68eb      	ldr	r3, [r5, #12]
 8007266:	b183      	cbz	r3, 800728a <_Balloc+0x42>
 8007268:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007270:	b9b8      	cbnz	r0, 80072a2 <_Balloc+0x5a>
 8007272:	2101      	movs	r1, #1
 8007274:	fa01 f506 	lsl.w	r5, r1, r6
 8007278:	1d6a      	adds	r2, r5, #5
 800727a:	0092      	lsls	r2, r2, #2
 800727c:	4620      	mov	r0, r4
 800727e:	f000 fadb 	bl	8007838 <_calloc_r>
 8007282:	b160      	cbz	r0, 800729e <_Balloc+0x56>
 8007284:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007288:	e00e      	b.n	80072a8 <_Balloc+0x60>
 800728a:	2221      	movs	r2, #33	; 0x21
 800728c:	2104      	movs	r1, #4
 800728e:	4620      	mov	r0, r4
 8007290:	f000 fad2 	bl	8007838 <_calloc_r>
 8007294:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007296:	60e8      	str	r0, [r5, #12]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1e4      	bne.n	8007268 <_Balloc+0x20>
 800729e:	2000      	movs	r0, #0
 80072a0:	bd70      	pop	{r4, r5, r6, pc}
 80072a2:	6802      	ldr	r2, [r0, #0]
 80072a4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80072a8:	2300      	movs	r3, #0
 80072aa:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072ae:	e7f7      	b.n	80072a0 <_Balloc+0x58>

080072b0 <_Bfree>:
 80072b0:	b570      	push	{r4, r5, r6, lr}
 80072b2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80072b4:	4606      	mov	r6, r0
 80072b6:	460d      	mov	r5, r1
 80072b8:	b93c      	cbnz	r4, 80072ca <_Bfree+0x1a>
 80072ba:	2010      	movs	r0, #16
 80072bc:	f7ff ffaa 	bl	8007214 <malloc>
 80072c0:	6270      	str	r0, [r6, #36]	; 0x24
 80072c2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072c6:	6004      	str	r4, [r0, #0]
 80072c8:	60c4      	str	r4, [r0, #12]
 80072ca:	b13d      	cbz	r5, 80072dc <_Bfree+0x2c>
 80072cc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80072ce:	686a      	ldr	r2, [r5, #4]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072d6:	6029      	str	r1, [r5, #0]
 80072d8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80072dc:	bd70      	pop	{r4, r5, r6, pc}

080072de <__multadd>:
 80072de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072e2:	461f      	mov	r7, r3
 80072e4:	4606      	mov	r6, r0
 80072e6:	460c      	mov	r4, r1
 80072e8:	2300      	movs	r3, #0
 80072ea:	690d      	ldr	r5, [r1, #16]
 80072ec:	f101 0c14 	add.w	ip, r1, #20
 80072f0:	f8dc 0000 	ldr.w	r0, [ip]
 80072f4:	3301      	adds	r3, #1
 80072f6:	b281      	uxth	r1, r0
 80072f8:	fb02 7101 	mla	r1, r2, r1, r7
 80072fc:	0c00      	lsrs	r0, r0, #16
 80072fe:	0c0f      	lsrs	r7, r1, #16
 8007300:	fb02 7000 	mla	r0, r2, r0, r7
 8007304:	b289      	uxth	r1, r1
 8007306:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800730a:	429d      	cmp	r5, r3
 800730c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007310:	f84c 1b04 	str.w	r1, [ip], #4
 8007314:	dcec      	bgt.n	80072f0 <__multadd+0x12>
 8007316:	b1d7      	cbz	r7, 800734e <__multadd+0x70>
 8007318:	68a3      	ldr	r3, [r4, #8]
 800731a:	42ab      	cmp	r3, r5
 800731c:	dc12      	bgt.n	8007344 <__multadd+0x66>
 800731e:	6861      	ldr	r1, [r4, #4]
 8007320:	4630      	mov	r0, r6
 8007322:	3101      	adds	r1, #1
 8007324:	f7ff ff90 	bl	8007248 <_Balloc>
 8007328:	4680      	mov	r8, r0
 800732a:	6922      	ldr	r2, [r4, #16]
 800732c:	f104 010c 	add.w	r1, r4, #12
 8007330:	3202      	adds	r2, #2
 8007332:	0092      	lsls	r2, r2, #2
 8007334:	300c      	adds	r0, #12
 8007336:	f7ff fd2b 	bl	8006d90 <memcpy>
 800733a:	4621      	mov	r1, r4
 800733c:	4630      	mov	r0, r6
 800733e:	f7ff ffb7 	bl	80072b0 <_Bfree>
 8007342:	4644      	mov	r4, r8
 8007344:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007348:	3501      	adds	r5, #1
 800734a:	615f      	str	r7, [r3, #20]
 800734c:	6125      	str	r5, [r4, #16]
 800734e:	4620      	mov	r0, r4
 8007350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007354 <__hi0bits>:
 8007354:	0c02      	lsrs	r2, r0, #16
 8007356:	0412      	lsls	r2, r2, #16
 8007358:	4603      	mov	r3, r0
 800735a:	b9b2      	cbnz	r2, 800738a <__hi0bits+0x36>
 800735c:	0403      	lsls	r3, r0, #16
 800735e:	2010      	movs	r0, #16
 8007360:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007364:	bf04      	itt	eq
 8007366:	021b      	lsleq	r3, r3, #8
 8007368:	3008      	addeq	r0, #8
 800736a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800736e:	bf04      	itt	eq
 8007370:	011b      	lsleq	r3, r3, #4
 8007372:	3004      	addeq	r0, #4
 8007374:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007378:	bf04      	itt	eq
 800737a:	009b      	lsleq	r3, r3, #2
 800737c:	3002      	addeq	r0, #2
 800737e:	2b00      	cmp	r3, #0
 8007380:	db06      	blt.n	8007390 <__hi0bits+0x3c>
 8007382:	005b      	lsls	r3, r3, #1
 8007384:	d503      	bpl.n	800738e <__hi0bits+0x3a>
 8007386:	3001      	adds	r0, #1
 8007388:	4770      	bx	lr
 800738a:	2000      	movs	r0, #0
 800738c:	e7e8      	b.n	8007360 <__hi0bits+0xc>
 800738e:	2020      	movs	r0, #32
 8007390:	4770      	bx	lr

08007392 <__lo0bits>:
 8007392:	6803      	ldr	r3, [r0, #0]
 8007394:	4601      	mov	r1, r0
 8007396:	f013 0207 	ands.w	r2, r3, #7
 800739a:	d00b      	beq.n	80073b4 <__lo0bits+0x22>
 800739c:	07da      	lsls	r2, r3, #31
 800739e:	d423      	bmi.n	80073e8 <__lo0bits+0x56>
 80073a0:	0798      	lsls	r0, r3, #30
 80073a2:	bf49      	itett	mi
 80073a4:	085b      	lsrmi	r3, r3, #1
 80073a6:	089b      	lsrpl	r3, r3, #2
 80073a8:	2001      	movmi	r0, #1
 80073aa:	600b      	strmi	r3, [r1, #0]
 80073ac:	bf5c      	itt	pl
 80073ae:	600b      	strpl	r3, [r1, #0]
 80073b0:	2002      	movpl	r0, #2
 80073b2:	4770      	bx	lr
 80073b4:	b298      	uxth	r0, r3
 80073b6:	b9a8      	cbnz	r0, 80073e4 <__lo0bits+0x52>
 80073b8:	2010      	movs	r0, #16
 80073ba:	0c1b      	lsrs	r3, r3, #16
 80073bc:	f013 0fff 	tst.w	r3, #255	; 0xff
 80073c0:	bf04      	itt	eq
 80073c2:	0a1b      	lsreq	r3, r3, #8
 80073c4:	3008      	addeq	r0, #8
 80073c6:	071a      	lsls	r2, r3, #28
 80073c8:	bf04      	itt	eq
 80073ca:	091b      	lsreq	r3, r3, #4
 80073cc:	3004      	addeq	r0, #4
 80073ce:	079a      	lsls	r2, r3, #30
 80073d0:	bf04      	itt	eq
 80073d2:	089b      	lsreq	r3, r3, #2
 80073d4:	3002      	addeq	r0, #2
 80073d6:	07da      	lsls	r2, r3, #31
 80073d8:	d402      	bmi.n	80073e0 <__lo0bits+0x4e>
 80073da:	085b      	lsrs	r3, r3, #1
 80073dc:	d006      	beq.n	80073ec <__lo0bits+0x5a>
 80073de:	3001      	adds	r0, #1
 80073e0:	600b      	str	r3, [r1, #0]
 80073e2:	4770      	bx	lr
 80073e4:	4610      	mov	r0, r2
 80073e6:	e7e9      	b.n	80073bc <__lo0bits+0x2a>
 80073e8:	2000      	movs	r0, #0
 80073ea:	4770      	bx	lr
 80073ec:	2020      	movs	r0, #32
 80073ee:	4770      	bx	lr

080073f0 <__i2b>:
 80073f0:	b510      	push	{r4, lr}
 80073f2:	460c      	mov	r4, r1
 80073f4:	2101      	movs	r1, #1
 80073f6:	f7ff ff27 	bl	8007248 <_Balloc>
 80073fa:	2201      	movs	r2, #1
 80073fc:	6144      	str	r4, [r0, #20]
 80073fe:	6102      	str	r2, [r0, #16]
 8007400:	bd10      	pop	{r4, pc}

08007402 <__multiply>:
 8007402:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007406:	4614      	mov	r4, r2
 8007408:	690a      	ldr	r2, [r1, #16]
 800740a:	6923      	ldr	r3, [r4, #16]
 800740c:	4688      	mov	r8, r1
 800740e:	429a      	cmp	r2, r3
 8007410:	bfbe      	ittt	lt
 8007412:	460b      	movlt	r3, r1
 8007414:	46a0      	movlt	r8, r4
 8007416:	461c      	movlt	r4, r3
 8007418:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800741c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007420:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007424:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007428:	eb07 0609 	add.w	r6, r7, r9
 800742c:	42b3      	cmp	r3, r6
 800742e:	bfb8      	it	lt
 8007430:	3101      	addlt	r1, #1
 8007432:	f7ff ff09 	bl	8007248 <_Balloc>
 8007436:	f100 0514 	add.w	r5, r0, #20
 800743a:	462b      	mov	r3, r5
 800743c:	2200      	movs	r2, #0
 800743e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007442:	4573      	cmp	r3, lr
 8007444:	d316      	bcc.n	8007474 <__multiply+0x72>
 8007446:	f104 0214 	add.w	r2, r4, #20
 800744a:	f108 0114 	add.w	r1, r8, #20
 800744e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007452:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	9b00      	ldr	r3, [sp, #0]
 800745a:	9201      	str	r2, [sp, #4]
 800745c:	4293      	cmp	r3, r2
 800745e:	d80c      	bhi.n	800747a <__multiply+0x78>
 8007460:	2e00      	cmp	r6, #0
 8007462:	dd03      	ble.n	800746c <__multiply+0x6a>
 8007464:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007468:	2b00      	cmp	r3, #0
 800746a:	d05d      	beq.n	8007528 <__multiply+0x126>
 800746c:	6106      	str	r6, [r0, #16]
 800746e:	b003      	add	sp, #12
 8007470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007474:	f843 2b04 	str.w	r2, [r3], #4
 8007478:	e7e3      	b.n	8007442 <__multiply+0x40>
 800747a:	f8b2 b000 	ldrh.w	fp, [r2]
 800747e:	f1bb 0f00 	cmp.w	fp, #0
 8007482:	d023      	beq.n	80074cc <__multiply+0xca>
 8007484:	4689      	mov	r9, r1
 8007486:	46ac      	mov	ip, r5
 8007488:	f04f 0800 	mov.w	r8, #0
 800748c:	f859 4b04 	ldr.w	r4, [r9], #4
 8007490:	f8dc a000 	ldr.w	sl, [ip]
 8007494:	b2a3      	uxth	r3, r4
 8007496:	fa1f fa8a 	uxth.w	sl, sl
 800749a:	fb0b a303 	mla	r3, fp, r3, sl
 800749e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80074a2:	f8dc 4000 	ldr.w	r4, [ip]
 80074a6:	4443      	add	r3, r8
 80074a8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80074ac:	fb0b 840a 	mla	r4, fp, sl, r8
 80074b0:	46e2      	mov	sl, ip
 80074b2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80074bc:	454f      	cmp	r7, r9
 80074be:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80074c2:	f84a 3b04 	str.w	r3, [sl], #4
 80074c6:	d82b      	bhi.n	8007520 <__multiply+0x11e>
 80074c8:	f8cc 8004 	str.w	r8, [ip, #4]
 80074cc:	9b01      	ldr	r3, [sp, #4]
 80074ce:	3204      	adds	r2, #4
 80074d0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80074d4:	f1ba 0f00 	cmp.w	sl, #0
 80074d8:	d020      	beq.n	800751c <__multiply+0x11a>
 80074da:	4689      	mov	r9, r1
 80074dc:	46a8      	mov	r8, r5
 80074de:	f04f 0b00 	mov.w	fp, #0
 80074e2:	682b      	ldr	r3, [r5, #0]
 80074e4:	f8b9 c000 	ldrh.w	ip, [r9]
 80074e8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	fb0a 440c 	mla	r4, sl, ip, r4
 80074f2:	46c4      	mov	ip, r8
 80074f4:	445c      	add	r4, fp
 80074f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80074fa:	f84c 3b04 	str.w	r3, [ip], #4
 80074fe:	f859 3b04 	ldr.w	r3, [r9], #4
 8007502:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007506:	0c1b      	lsrs	r3, r3, #16
 8007508:	fb0a b303 	mla	r3, sl, r3, fp
 800750c:	454f      	cmp	r7, r9
 800750e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007512:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007516:	d805      	bhi.n	8007524 <__multiply+0x122>
 8007518:	f8c8 3004 	str.w	r3, [r8, #4]
 800751c:	3504      	adds	r5, #4
 800751e:	e79b      	b.n	8007458 <__multiply+0x56>
 8007520:	46d4      	mov	ip, sl
 8007522:	e7b3      	b.n	800748c <__multiply+0x8a>
 8007524:	46e0      	mov	r8, ip
 8007526:	e7dd      	b.n	80074e4 <__multiply+0xe2>
 8007528:	3e01      	subs	r6, #1
 800752a:	e799      	b.n	8007460 <__multiply+0x5e>

0800752c <__pow5mult>:
 800752c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007530:	4615      	mov	r5, r2
 8007532:	f012 0203 	ands.w	r2, r2, #3
 8007536:	4606      	mov	r6, r0
 8007538:	460f      	mov	r7, r1
 800753a:	d007      	beq.n	800754c <__pow5mult+0x20>
 800753c:	4c21      	ldr	r4, [pc, #132]	; (80075c4 <__pow5mult+0x98>)
 800753e:	3a01      	subs	r2, #1
 8007540:	2300      	movs	r3, #0
 8007542:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007546:	f7ff feca 	bl	80072de <__multadd>
 800754a:	4607      	mov	r7, r0
 800754c:	10ad      	asrs	r5, r5, #2
 800754e:	d035      	beq.n	80075bc <__pow5mult+0x90>
 8007550:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007552:	b93c      	cbnz	r4, 8007564 <__pow5mult+0x38>
 8007554:	2010      	movs	r0, #16
 8007556:	f7ff fe5d 	bl	8007214 <malloc>
 800755a:	6270      	str	r0, [r6, #36]	; 0x24
 800755c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007560:	6004      	str	r4, [r0, #0]
 8007562:	60c4      	str	r4, [r0, #12]
 8007564:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007568:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800756c:	b94c      	cbnz	r4, 8007582 <__pow5mult+0x56>
 800756e:	f240 2171 	movw	r1, #625	; 0x271
 8007572:	4630      	mov	r0, r6
 8007574:	f7ff ff3c 	bl	80073f0 <__i2b>
 8007578:	2300      	movs	r3, #0
 800757a:	4604      	mov	r4, r0
 800757c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007580:	6003      	str	r3, [r0, #0]
 8007582:	f04f 0800 	mov.w	r8, #0
 8007586:	07eb      	lsls	r3, r5, #31
 8007588:	d50a      	bpl.n	80075a0 <__pow5mult+0x74>
 800758a:	4639      	mov	r1, r7
 800758c:	4622      	mov	r2, r4
 800758e:	4630      	mov	r0, r6
 8007590:	f7ff ff37 	bl	8007402 <__multiply>
 8007594:	4681      	mov	r9, r0
 8007596:	4639      	mov	r1, r7
 8007598:	4630      	mov	r0, r6
 800759a:	f7ff fe89 	bl	80072b0 <_Bfree>
 800759e:	464f      	mov	r7, r9
 80075a0:	106d      	asrs	r5, r5, #1
 80075a2:	d00b      	beq.n	80075bc <__pow5mult+0x90>
 80075a4:	6820      	ldr	r0, [r4, #0]
 80075a6:	b938      	cbnz	r0, 80075b8 <__pow5mult+0x8c>
 80075a8:	4622      	mov	r2, r4
 80075aa:	4621      	mov	r1, r4
 80075ac:	4630      	mov	r0, r6
 80075ae:	f7ff ff28 	bl	8007402 <__multiply>
 80075b2:	6020      	str	r0, [r4, #0]
 80075b4:	f8c0 8000 	str.w	r8, [r0]
 80075b8:	4604      	mov	r4, r0
 80075ba:	e7e4      	b.n	8007586 <__pow5mult+0x5a>
 80075bc:	4638      	mov	r0, r7
 80075be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075c2:	bf00      	nop
 80075c4:	08008880 	.word	0x08008880

080075c8 <__lshift>:
 80075c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075cc:	460c      	mov	r4, r1
 80075ce:	4607      	mov	r7, r0
 80075d0:	4616      	mov	r6, r2
 80075d2:	6923      	ldr	r3, [r4, #16]
 80075d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075d8:	eb0a 0903 	add.w	r9, sl, r3
 80075dc:	6849      	ldr	r1, [r1, #4]
 80075de:	68a3      	ldr	r3, [r4, #8]
 80075e0:	f109 0501 	add.w	r5, r9, #1
 80075e4:	42ab      	cmp	r3, r5
 80075e6:	db32      	blt.n	800764e <__lshift+0x86>
 80075e8:	4638      	mov	r0, r7
 80075ea:	f7ff fe2d 	bl	8007248 <_Balloc>
 80075ee:	2300      	movs	r3, #0
 80075f0:	4680      	mov	r8, r0
 80075f2:	461a      	mov	r2, r3
 80075f4:	f100 0114 	add.w	r1, r0, #20
 80075f8:	4553      	cmp	r3, sl
 80075fa:	db2b      	blt.n	8007654 <__lshift+0x8c>
 80075fc:	6920      	ldr	r0, [r4, #16]
 80075fe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007602:	f104 0314 	add.w	r3, r4, #20
 8007606:	f016 021f 	ands.w	r2, r6, #31
 800760a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800760e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007612:	d025      	beq.n	8007660 <__lshift+0x98>
 8007614:	2000      	movs	r0, #0
 8007616:	f1c2 0e20 	rsb	lr, r2, #32
 800761a:	468a      	mov	sl, r1
 800761c:	681e      	ldr	r6, [r3, #0]
 800761e:	4096      	lsls	r6, r2
 8007620:	4330      	orrs	r0, r6
 8007622:	f84a 0b04 	str.w	r0, [sl], #4
 8007626:	f853 0b04 	ldr.w	r0, [r3], #4
 800762a:	459c      	cmp	ip, r3
 800762c:	fa20 f00e 	lsr.w	r0, r0, lr
 8007630:	d814      	bhi.n	800765c <__lshift+0x94>
 8007632:	6048      	str	r0, [r1, #4]
 8007634:	b108      	cbz	r0, 800763a <__lshift+0x72>
 8007636:	f109 0502 	add.w	r5, r9, #2
 800763a:	3d01      	subs	r5, #1
 800763c:	4638      	mov	r0, r7
 800763e:	f8c8 5010 	str.w	r5, [r8, #16]
 8007642:	4621      	mov	r1, r4
 8007644:	f7ff fe34 	bl	80072b0 <_Bfree>
 8007648:	4640      	mov	r0, r8
 800764a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800764e:	3101      	adds	r1, #1
 8007650:	005b      	lsls	r3, r3, #1
 8007652:	e7c7      	b.n	80075e4 <__lshift+0x1c>
 8007654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007658:	3301      	adds	r3, #1
 800765a:	e7cd      	b.n	80075f8 <__lshift+0x30>
 800765c:	4651      	mov	r1, sl
 800765e:	e7dc      	b.n	800761a <__lshift+0x52>
 8007660:	3904      	subs	r1, #4
 8007662:	f853 2b04 	ldr.w	r2, [r3], #4
 8007666:	459c      	cmp	ip, r3
 8007668:	f841 2f04 	str.w	r2, [r1, #4]!
 800766c:	d8f9      	bhi.n	8007662 <__lshift+0x9a>
 800766e:	e7e4      	b.n	800763a <__lshift+0x72>

08007670 <__mcmp>:
 8007670:	6903      	ldr	r3, [r0, #16]
 8007672:	690a      	ldr	r2, [r1, #16]
 8007674:	b530      	push	{r4, r5, lr}
 8007676:	1a9b      	subs	r3, r3, r2
 8007678:	d10c      	bne.n	8007694 <__mcmp+0x24>
 800767a:	0092      	lsls	r2, r2, #2
 800767c:	3014      	adds	r0, #20
 800767e:	3114      	adds	r1, #20
 8007680:	1884      	adds	r4, r0, r2
 8007682:	4411      	add	r1, r2
 8007684:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007688:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800768c:	4295      	cmp	r5, r2
 800768e:	d003      	beq.n	8007698 <__mcmp+0x28>
 8007690:	d305      	bcc.n	800769e <__mcmp+0x2e>
 8007692:	2301      	movs	r3, #1
 8007694:	4618      	mov	r0, r3
 8007696:	bd30      	pop	{r4, r5, pc}
 8007698:	42a0      	cmp	r0, r4
 800769a:	d3f3      	bcc.n	8007684 <__mcmp+0x14>
 800769c:	e7fa      	b.n	8007694 <__mcmp+0x24>
 800769e:	f04f 33ff 	mov.w	r3, #4294967295
 80076a2:	e7f7      	b.n	8007694 <__mcmp+0x24>

080076a4 <__mdiff>:
 80076a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076a8:	460d      	mov	r5, r1
 80076aa:	4607      	mov	r7, r0
 80076ac:	4611      	mov	r1, r2
 80076ae:	4628      	mov	r0, r5
 80076b0:	4614      	mov	r4, r2
 80076b2:	f7ff ffdd 	bl	8007670 <__mcmp>
 80076b6:	1e06      	subs	r6, r0, #0
 80076b8:	d108      	bne.n	80076cc <__mdiff+0x28>
 80076ba:	4631      	mov	r1, r6
 80076bc:	4638      	mov	r0, r7
 80076be:	f7ff fdc3 	bl	8007248 <_Balloc>
 80076c2:	2301      	movs	r3, #1
 80076c4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80076c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076cc:	bfa4      	itt	ge
 80076ce:	4623      	movge	r3, r4
 80076d0:	462c      	movge	r4, r5
 80076d2:	4638      	mov	r0, r7
 80076d4:	6861      	ldr	r1, [r4, #4]
 80076d6:	bfa6      	itte	ge
 80076d8:	461d      	movge	r5, r3
 80076da:	2600      	movge	r6, #0
 80076dc:	2601      	movlt	r6, #1
 80076de:	f7ff fdb3 	bl	8007248 <_Balloc>
 80076e2:	f04f 0e00 	mov.w	lr, #0
 80076e6:	60c6      	str	r6, [r0, #12]
 80076e8:	692b      	ldr	r3, [r5, #16]
 80076ea:	6926      	ldr	r6, [r4, #16]
 80076ec:	f104 0214 	add.w	r2, r4, #20
 80076f0:	f105 0914 	add.w	r9, r5, #20
 80076f4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80076f8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80076fc:	f100 0114 	add.w	r1, r0, #20
 8007700:	f852 ab04 	ldr.w	sl, [r2], #4
 8007704:	f859 5b04 	ldr.w	r5, [r9], #4
 8007708:	fa1f f38a 	uxth.w	r3, sl
 800770c:	4473      	add	r3, lr
 800770e:	b2ac      	uxth	r4, r5
 8007710:	1b1b      	subs	r3, r3, r4
 8007712:	0c2c      	lsrs	r4, r5, #16
 8007714:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8007718:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800771c:	b29b      	uxth	r3, r3
 800771e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8007722:	45c8      	cmp	r8, r9
 8007724:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007728:	4694      	mov	ip, r2
 800772a:	f841 4b04 	str.w	r4, [r1], #4
 800772e:	d8e7      	bhi.n	8007700 <__mdiff+0x5c>
 8007730:	45bc      	cmp	ip, r7
 8007732:	d304      	bcc.n	800773e <__mdiff+0x9a>
 8007734:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007738:	b183      	cbz	r3, 800775c <__mdiff+0xb8>
 800773a:	6106      	str	r6, [r0, #16]
 800773c:	e7c4      	b.n	80076c8 <__mdiff+0x24>
 800773e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8007742:	b2a2      	uxth	r2, r4
 8007744:	4472      	add	r2, lr
 8007746:	1413      	asrs	r3, r2, #16
 8007748:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800774c:	b292      	uxth	r2, r2
 800774e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007752:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007756:	f841 2b04 	str.w	r2, [r1], #4
 800775a:	e7e9      	b.n	8007730 <__mdiff+0x8c>
 800775c:	3e01      	subs	r6, #1
 800775e:	e7e9      	b.n	8007734 <__mdiff+0x90>

08007760 <__d2b>:
 8007760:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007764:	461c      	mov	r4, r3
 8007766:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800776a:	2101      	movs	r1, #1
 800776c:	4690      	mov	r8, r2
 800776e:	f7ff fd6b 	bl	8007248 <_Balloc>
 8007772:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007776:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800777a:	4607      	mov	r7, r0
 800777c:	bb34      	cbnz	r4, 80077cc <__d2b+0x6c>
 800777e:	9201      	str	r2, [sp, #4]
 8007780:	f1b8 0200 	subs.w	r2, r8, #0
 8007784:	d027      	beq.n	80077d6 <__d2b+0x76>
 8007786:	a802      	add	r0, sp, #8
 8007788:	f840 2d08 	str.w	r2, [r0, #-8]!
 800778c:	f7ff fe01 	bl	8007392 <__lo0bits>
 8007790:	9900      	ldr	r1, [sp, #0]
 8007792:	b1f0      	cbz	r0, 80077d2 <__d2b+0x72>
 8007794:	9a01      	ldr	r2, [sp, #4]
 8007796:	f1c0 0320 	rsb	r3, r0, #32
 800779a:	fa02 f303 	lsl.w	r3, r2, r3
 800779e:	430b      	orrs	r3, r1
 80077a0:	40c2      	lsrs	r2, r0
 80077a2:	617b      	str	r3, [r7, #20]
 80077a4:	9201      	str	r2, [sp, #4]
 80077a6:	9b01      	ldr	r3, [sp, #4]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	bf14      	ite	ne
 80077ac:	2102      	movne	r1, #2
 80077ae:	2101      	moveq	r1, #1
 80077b0:	61bb      	str	r3, [r7, #24]
 80077b2:	6139      	str	r1, [r7, #16]
 80077b4:	b1c4      	cbz	r4, 80077e8 <__d2b+0x88>
 80077b6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80077ba:	4404      	add	r4, r0
 80077bc:	6034      	str	r4, [r6, #0]
 80077be:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80077c2:	6028      	str	r0, [r5, #0]
 80077c4:	4638      	mov	r0, r7
 80077c6:	b002      	add	sp, #8
 80077c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077cc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80077d0:	e7d5      	b.n	800777e <__d2b+0x1e>
 80077d2:	6179      	str	r1, [r7, #20]
 80077d4:	e7e7      	b.n	80077a6 <__d2b+0x46>
 80077d6:	a801      	add	r0, sp, #4
 80077d8:	f7ff fddb 	bl	8007392 <__lo0bits>
 80077dc:	2101      	movs	r1, #1
 80077de:	9b01      	ldr	r3, [sp, #4]
 80077e0:	6139      	str	r1, [r7, #16]
 80077e2:	617b      	str	r3, [r7, #20]
 80077e4:	3020      	adds	r0, #32
 80077e6:	e7e5      	b.n	80077b4 <__d2b+0x54>
 80077e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80077ec:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80077f0:	6030      	str	r0, [r6, #0]
 80077f2:	6918      	ldr	r0, [r3, #16]
 80077f4:	f7ff fdae 	bl	8007354 <__hi0bits>
 80077f8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80077fc:	e7e1      	b.n	80077c2 <__d2b+0x62>
	...

08007800 <_mprec_log10>:
 8007800:	2817      	cmp	r0, #23
 8007802:	b5d0      	push	{r4, r6, r7, lr}
 8007804:	4604      	mov	r4, r0
 8007806:	dc05      	bgt.n	8007814 <_mprec_log10+0x14>
 8007808:	4b08      	ldr	r3, [pc, #32]	; (800782c <_mprec_log10+0x2c>)
 800780a:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 800780e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007812:	bdd0      	pop	{r4, r6, r7, pc}
 8007814:	2000      	movs	r0, #0
 8007816:	2600      	movs	r6, #0
 8007818:	4905      	ldr	r1, [pc, #20]	; (8007830 <_mprec_log10+0x30>)
 800781a:	4f06      	ldr	r7, [pc, #24]	; (8007834 <_mprec_log10+0x34>)
 800781c:	4632      	mov	r2, r6
 800781e:	463b      	mov	r3, r7
 8007820:	f7f8 fe5a 	bl	80004d8 <__aeabi_dmul>
 8007824:	3c01      	subs	r4, #1
 8007826:	d1f9      	bne.n	800781c <_mprec_log10+0x1c>
 8007828:	e7f3      	b.n	8007812 <_mprec_log10+0x12>
 800782a:	bf00      	nop
 800782c:	080087b8 	.word	0x080087b8
 8007830:	3ff00000 	.word	0x3ff00000
 8007834:	40240000 	.word	0x40240000

08007838 <_calloc_r>:
 8007838:	b538      	push	{r3, r4, r5, lr}
 800783a:	fb02 f401 	mul.w	r4, r2, r1
 800783e:	4621      	mov	r1, r4
 8007840:	f000 f808 	bl	8007854 <_malloc_r>
 8007844:	4605      	mov	r5, r0
 8007846:	b118      	cbz	r0, 8007850 <_calloc_r+0x18>
 8007848:	4622      	mov	r2, r4
 800784a:	2100      	movs	r1, #0
 800784c:	f7ff faab 	bl	8006da6 <memset>
 8007850:	4628      	mov	r0, r5
 8007852:	bd38      	pop	{r3, r4, r5, pc}

08007854 <_malloc_r>:
 8007854:	b570      	push	{r4, r5, r6, lr}
 8007856:	1ccd      	adds	r5, r1, #3
 8007858:	f025 0503 	bic.w	r5, r5, #3
 800785c:	3508      	adds	r5, #8
 800785e:	2d0c      	cmp	r5, #12
 8007860:	bf38      	it	cc
 8007862:	250c      	movcc	r5, #12
 8007864:	2d00      	cmp	r5, #0
 8007866:	4606      	mov	r6, r0
 8007868:	db01      	blt.n	800786e <_malloc_r+0x1a>
 800786a:	42a9      	cmp	r1, r5
 800786c:	d903      	bls.n	8007876 <_malloc_r+0x22>
 800786e:	230c      	movs	r3, #12
 8007870:	6033      	str	r3, [r6, #0]
 8007872:	2000      	movs	r0, #0
 8007874:	bd70      	pop	{r4, r5, r6, pc}
 8007876:	f000 feaf 	bl	80085d8 <__malloc_lock>
 800787a:	4a21      	ldr	r2, [pc, #132]	; (8007900 <_malloc_r+0xac>)
 800787c:	6814      	ldr	r4, [r2, #0]
 800787e:	4621      	mov	r1, r4
 8007880:	b991      	cbnz	r1, 80078a8 <_malloc_r+0x54>
 8007882:	4c20      	ldr	r4, [pc, #128]	; (8007904 <_malloc_r+0xb0>)
 8007884:	6823      	ldr	r3, [r4, #0]
 8007886:	b91b      	cbnz	r3, 8007890 <_malloc_r+0x3c>
 8007888:	4630      	mov	r0, r6
 800788a:	f000 f83d 	bl	8007908 <_sbrk_r>
 800788e:	6020      	str	r0, [r4, #0]
 8007890:	4629      	mov	r1, r5
 8007892:	4630      	mov	r0, r6
 8007894:	f000 f838 	bl	8007908 <_sbrk_r>
 8007898:	1c43      	adds	r3, r0, #1
 800789a:	d124      	bne.n	80078e6 <_malloc_r+0x92>
 800789c:	230c      	movs	r3, #12
 800789e:	4630      	mov	r0, r6
 80078a0:	6033      	str	r3, [r6, #0]
 80078a2:	f000 fe9a 	bl	80085da <__malloc_unlock>
 80078a6:	e7e4      	b.n	8007872 <_malloc_r+0x1e>
 80078a8:	680b      	ldr	r3, [r1, #0]
 80078aa:	1b5b      	subs	r3, r3, r5
 80078ac:	d418      	bmi.n	80078e0 <_malloc_r+0x8c>
 80078ae:	2b0b      	cmp	r3, #11
 80078b0:	d90f      	bls.n	80078d2 <_malloc_r+0x7e>
 80078b2:	600b      	str	r3, [r1, #0]
 80078b4:	18cc      	adds	r4, r1, r3
 80078b6:	50cd      	str	r5, [r1, r3]
 80078b8:	4630      	mov	r0, r6
 80078ba:	f000 fe8e 	bl	80085da <__malloc_unlock>
 80078be:	f104 000b 	add.w	r0, r4, #11
 80078c2:	1d23      	adds	r3, r4, #4
 80078c4:	f020 0007 	bic.w	r0, r0, #7
 80078c8:	1ac3      	subs	r3, r0, r3
 80078ca:	d0d3      	beq.n	8007874 <_malloc_r+0x20>
 80078cc:	425a      	negs	r2, r3
 80078ce:	50e2      	str	r2, [r4, r3]
 80078d0:	e7d0      	b.n	8007874 <_malloc_r+0x20>
 80078d2:	684b      	ldr	r3, [r1, #4]
 80078d4:	428c      	cmp	r4, r1
 80078d6:	bf16      	itet	ne
 80078d8:	6063      	strne	r3, [r4, #4]
 80078da:	6013      	streq	r3, [r2, #0]
 80078dc:	460c      	movne	r4, r1
 80078de:	e7eb      	b.n	80078b8 <_malloc_r+0x64>
 80078e0:	460c      	mov	r4, r1
 80078e2:	6849      	ldr	r1, [r1, #4]
 80078e4:	e7cc      	b.n	8007880 <_malloc_r+0x2c>
 80078e6:	1cc4      	adds	r4, r0, #3
 80078e8:	f024 0403 	bic.w	r4, r4, #3
 80078ec:	42a0      	cmp	r0, r4
 80078ee:	d005      	beq.n	80078fc <_malloc_r+0xa8>
 80078f0:	1a21      	subs	r1, r4, r0
 80078f2:	4630      	mov	r0, r6
 80078f4:	f000 f808 	bl	8007908 <_sbrk_r>
 80078f8:	3001      	adds	r0, #1
 80078fa:	d0cf      	beq.n	800789c <_malloc_r+0x48>
 80078fc:	6025      	str	r5, [r4, #0]
 80078fe:	e7db      	b.n	80078b8 <_malloc_r+0x64>
 8007900:	20001b18 	.word	0x20001b18
 8007904:	20001b1c 	.word	0x20001b1c

08007908 <_sbrk_r>:
 8007908:	b538      	push	{r3, r4, r5, lr}
 800790a:	2300      	movs	r3, #0
 800790c:	4c05      	ldr	r4, [pc, #20]	; (8007924 <_sbrk_r+0x1c>)
 800790e:	4605      	mov	r5, r0
 8007910:	4608      	mov	r0, r1
 8007912:	6023      	str	r3, [r4, #0]
 8007914:	f7f9 fece 	bl	80016b4 <_sbrk>
 8007918:	1c43      	adds	r3, r0, #1
 800791a:	d102      	bne.n	8007922 <_sbrk_r+0x1a>
 800791c:	6823      	ldr	r3, [r4, #0]
 800791e:	b103      	cbz	r3, 8007922 <_sbrk_r+0x1a>
 8007920:	602b      	str	r3, [r5, #0]
 8007922:	bd38      	pop	{r3, r4, r5, pc}
 8007924:	20001cb4 	.word	0x20001cb4

08007928 <strcpy>:
 8007928:	4603      	mov	r3, r0
 800792a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800792e:	f803 2b01 	strb.w	r2, [r3], #1
 8007932:	2a00      	cmp	r2, #0
 8007934:	d1f9      	bne.n	800792a <strcpy+0x2>
 8007936:	4770      	bx	lr

08007938 <__ascii_wctomb>:
 8007938:	b149      	cbz	r1, 800794e <__ascii_wctomb+0x16>
 800793a:	2aff      	cmp	r2, #255	; 0xff
 800793c:	bf8b      	itete	hi
 800793e:	238a      	movhi	r3, #138	; 0x8a
 8007940:	700a      	strbls	r2, [r1, #0]
 8007942:	6003      	strhi	r3, [r0, #0]
 8007944:	2001      	movls	r0, #1
 8007946:	bf88      	it	hi
 8007948:	f04f 30ff 	movhi.w	r0, #4294967295
 800794c:	4770      	bx	lr
 800794e:	4608      	mov	r0, r1
 8007950:	4770      	bx	lr

08007952 <quorem>:
 8007952:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007956:	6903      	ldr	r3, [r0, #16]
 8007958:	690c      	ldr	r4, [r1, #16]
 800795a:	4680      	mov	r8, r0
 800795c:	42a3      	cmp	r3, r4
 800795e:	f2c0 8084 	blt.w	8007a6a <quorem+0x118>
 8007962:	3c01      	subs	r4, #1
 8007964:	f101 0714 	add.w	r7, r1, #20
 8007968:	f100 0614 	add.w	r6, r0, #20
 800796c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007970:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007974:	3501      	adds	r5, #1
 8007976:	fbb0 f5f5 	udiv	r5, r0, r5
 800797a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800797e:	eb06 030c 	add.w	r3, r6, ip
 8007982:	eb07 090c 	add.w	r9, r7, ip
 8007986:	9301      	str	r3, [sp, #4]
 8007988:	b39d      	cbz	r5, 80079f2 <quorem+0xa0>
 800798a:	f04f 0a00 	mov.w	sl, #0
 800798e:	4638      	mov	r0, r7
 8007990:	46b6      	mov	lr, r6
 8007992:	46d3      	mov	fp, sl
 8007994:	f850 2b04 	ldr.w	r2, [r0], #4
 8007998:	b293      	uxth	r3, r2
 800799a:	fb05 a303 	mla	r3, r5, r3, sl
 800799e:	0c12      	lsrs	r2, r2, #16
 80079a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079a4:	fb05 a202 	mla	r2, r5, r2, sl
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	ebab 0303 	sub.w	r3, fp, r3
 80079ae:	f8de b000 	ldr.w	fp, [lr]
 80079b2:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80079b6:	fa1f fb8b 	uxth.w	fp, fp
 80079ba:	445b      	add	r3, fp
 80079bc:	fa1f fb82 	uxth.w	fp, r2
 80079c0:	f8de 2000 	ldr.w	r2, [lr]
 80079c4:	4581      	cmp	r9, r0
 80079c6:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80079ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079d4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80079d8:	f84e 3b04 	str.w	r3, [lr], #4
 80079dc:	d2da      	bcs.n	8007994 <quorem+0x42>
 80079de:	f856 300c 	ldr.w	r3, [r6, ip]
 80079e2:	b933      	cbnz	r3, 80079f2 <quorem+0xa0>
 80079e4:	9b01      	ldr	r3, [sp, #4]
 80079e6:	3b04      	subs	r3, #4
 80079e8:	429e      	cmp	r6, r3
 80079ea:	461a      	mov	r2, r3
 80079ec:	d331      	bcc.n	8007a52 <quorem+0x100>
 80079ee:	f8c8 4010 	str.w	r4, [r8, #16]
 80079f2:	4640      	mov	r0, r8
 80079f4:	f7ff fe3c 	bl	8007670 <__mcmp>
 80079f8:	2800      	cmp	r0, #0
 80079fa:	db26      	blt.n	8007a4a <quorem+0xf8>
 80079fc:	4630      	mov	r0, r6
 80079fe:	f04f 0c00 	mov.w	ip, #0
 8007a02:	3501      	adds	r5, #1
 8007a04:	f857 1b04 	ldr.w	r1, [r7], #4
 8007a08:	f8d0 e000 	ldr.w	lr, [r0]
 8007a0c:	b28b      	uxth	r3, r1
 8007a0e:	ebac 0303 	sub.w	r3, ip, r3
 8007a12:	fa1f f28e 	uxth.w	r2, lr
 8007a16:	4413      	add	r3, r2
 8007a18:	0c0a      	lsrs	r2, r1, #16
 8007a1a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007a1e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a28:	45b9      	cmp	r9, r7
 8007a2a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007a2e:	f840 3b04 	str.w	r3, [r0], #4
 8007a32:	d2e7      	bcs.n	8007a04 <quorem+0xb2>
 8007a34:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007a38:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007a3c:	b92a      	cbnz	r2, 8007a4a <quorem+0xf8>
 8007a3e:	3b04      	subs	r3, #4
 8007a40:	429e      	cmp	r6, r3
 8007a42:	461a      	mov	r2, r3
 8007a44:	d30b      	bcc.n	8007a5e <quorem+0x10c>
 8007a46:	f8c8 4010 	str.w	r4, [r8, #16]
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	b003      	add	sp, #12
 8007a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a52:	6812      	ldr	r2, [r2, #0]
 8007a54:	3b04      	subs	r3, #4
 8007a56:	2a00      	cmp	r2, #0
 8007a58:	d1c9      	bne.n	80079ee <quorem+0x9c>
 8007a5a:	3c01      	subs	r4, #1
 8007a5c:	e7c4      	b.n	80079e8 <quorem+0x96>
 8007a5e:	6812      	ldr	r2, [r2, #0]
 8007a60:	3b04      	subs	r3, #4
 8007a62:	2a00      	cmp	r2, #0
 8007a64:	d1ef      	bne.n	8007a46 <quorem+0xf4>
 8007a66:	3c01      	subs	r4, #1
 8007a68:	e7ea      	b.n	8007a40 <quorem+0xee>
 8007a6a:	2000      	movs	r0, #0
 8007a6c:	e7ee      	b.n	8007a4c <quorem+0xfa>
	...

08007a70 <_dtoa_r>:
 8007a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a74:	4616      	mov	r6, r2
 8007a76:	461f      	mov	r7, r3
 8007a78:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007a7a:	b095      	sub	sp, #84	; 0x54
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8007a82:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007a86:	b93d      	cbnz	r5, 8007a98 <_dtoa_r+0x28>
 8007a88:	2010      	movs	r0, #16
 8007a8a:	f7ff fbc3 	bl	8007214 <malloc>
 8007a8e:	6260      	str	r0, [r4, #36]	; 0x24
 8007a90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007a94:	6005      	str	r5, [r0, #0]
 8007a96:	60c5      	str	r5, [r0, #12]
 8007a98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a9a:	6819      	ldr	r1, [r3, #0]
 8007a9c:	b151      	cbz	r1, 8007ab4 <_dtoa_r+0x44>
 8007a9e:	685a      	ldr	r2, [r3, #4]
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	4093      	lsls	r3, r2
 8007aa4:	604a      	str	r2, [r1, #4]
 8007aa6:	608b      	str	r3, [r1, #8]
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	f7ff fc01 	bl	80072b0 <_Bfree>
 8007aae:	2200      	movs	r2, #0
 8007ab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	1e3b      	subs	r3, r7, #0
 8007ab6:	bfaf      	iteee	ge
 8007ab8:	2300      	movge	r3, #0
 8007aba:	2201      	movlt	r2, #1
 8007abc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007ac0:	9303      	strlt	r3, [sp, #12]
 8007ac2:	bfac      	ite	ge
 8007ac4:	f8c8 3000 	strge.w	r3, [r8]
 8007ac8:	f8c8 2000 	strlt.w	r2, [r8]
 8007acc:	4bae      	ldr	r3, [pc, #696]	; (8007d88 <_dtoa_r+0x318>)
 8007ace:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007ad2:	ea33 0308 	bics.w	r3, r3, r8
 8007ad6:	d11b      	bne.n	8007b10 <_dtoa_r+0xa0>
 8007ad8:	f242 730f 	movw	r3, #9999	; 0x270f
 8007adc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007ade:	6013      	str	r3, [r2, #0]
 8007ae0:	9b02      	ldr	r3, [sp, #8]
 8007ae2:	b923      	cbnz	r3, 8007aee <_dtoa_r+0x7e>
 8007ae4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	f000 8545 	beq.w	8008578 <_dtoa_r+0xb08>
 8007aee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007af0:	b953      	cbnz	r3, 8007b08 <_dtoa_r+0x98>
 8007af2:	4ba6      	ldr	r3, [pc, #664]	; (8007d8c <_dtoa_r+0x31c>)
 8007af4:	e021      	b.n	8007b3a <_dtoa_r+0xca>
 8007af6:	4ba6      	ldr	r3, [pc, #664]	; (8007d90 <_dtoa_r+0x320>)
 8007af8:	9306      	str	r3, [sp, #24]
 8007afa:	3308      	adds	r3, #8
 8007afc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007afe:	6013      	str	r3, [r2, #0]
 8007b00:	9806      	ldr	r0, [sp, #24]
 8007b02:	b015      	add	sp, #84	; 0x54
 8007b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b08:	4ba0      	ldr	r3, [pc, #640]	; (8007d8c <_dtoa_r+0x31c>)
 8007b0a:	9306      	str	r3, [sp, #24]
 8007b0c:	3303      	adds	r3, #3
 8007b0e:	e7f5      	b.n	8007afc <_dtoa_r+0x8c>
 8007b10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007b14:	2200      	movs	r2, #0
 8007b16:	2300      	movs	r3, #0
 8007b18:	4630      	mov	r0, r6
 8007b1a:	4639      	mov	r1, r7
 8007b1c:	f7f8 ff44 	bl	80009a8 <__aeabi_dcmpeq>
 8007b20:	4682      	mov	sl, r0
 8007b22:	b160      	cbz	r0, 8007b3e <_dtoa_r+0xce>
 8007b24:	2301      	movs	r3, #1
 8007b26:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007b28:	6013      	str	r3, [r2, #0]
 8007b2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f000 8520 	beq.w	8008572 <_dtoa_r+0xb02>
 8007b32:	4b98      	ldr	r3, [pc, #608]	; (8007d94 <_dtoa_r+0x324>)
 8007b34:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007b36:	6013      	str	r3, [r2, #0]
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	9306      	str	r3, [sp, #24]
 8007b3c:	e7e0      	b.n	8007b00 <_dtoa_r+0x90>
 8007b3e:	ab12      	add	r3, sp, #72	; 0x48
 8007b40:	9301      	str	r3, [sp, #4]
 8007b42:	ab13      	add	r3, sp, #76	; 0x4c
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	4632      	mov	r2, r6
 8007b48:	463b      	mov	r3, r7
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	f7ff fe08 	bl	8007760 <__d2b>
 8007b50:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007b54:	4683      	mov	fp, r0
 8007b56:	2d00      	cmp	r5, #0
 8007b58:	d07d      	beq.n	8007c56 <_dtoa_r+0x1e6>
 8007b5a:	46b0      	mov	r8, r6
 8007b5c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b60:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8007b64:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8007b68:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007b6c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8007b70:	2200      	movs	r2, #0
 8007b72:	4b89      	ldr	r3, [pc, #548]	; (8007d98 <_dtoa_r+0x328>)
 8007b74:	4640      	mov	r0, r8
 8007b76:	4649      	mov	r1, r9
 8007b78:	f7f8 faf6 	bl	8000168 <__aeabi_dsub>
 8007b7c:	a37c      	add	r3, pc, #496	; (adr r3, 8007d70 <_dtoa_r+0x300>)
 8007b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b82:	f7f8 fca9 	bl	80004d8 <__aeabi_dmul>
 8007b86:	a37c      	add	r3, pc, #496	; (adr r3, 8007d78 <_dtoa_r+0x308>)
 8007b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8c:	f7f8 faee 	bl	800016c <__adddf3>
 8007b90:	4606      	mov	r6, r0
 8007b92:	4628      	mov	r0, r5
 8007b94:	460f      	mov	r7, r1
 8007b96:	f7f8 fc35 	bl	8000404 <__aeabi_i2d>
 8007b9a:	a379      	add	r3, pc, #484	; (adr r3, 8007d80 <_dtoa_r+0x310>)
 8007b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba0:	f7f8 fc9a 	bl	80004d8 <__aeabi_dmul>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	4630      	mov	r0, r6
 8007baa:	4639      	mov	r1, r7
 8007bac:	f7f8 fade 	bl	800016c <__adddf3>
 8007bb0:	4606      	mov	r6, r0
 8007bb2:	460f      	mov	r7, r1
 8007bb4:	f7f8 ff2a 	bl	8000a0c <__aeabi_d2iz>
 8007bb8:	2200      	movs	r2, #0
 8007bba:	4682      	mov	sl, r0
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	4639      	mov	r1, r7
 8007bc2:	f7f8 fefb 	bl	80009bc <__aeabi_dcmplt>
 8007bc6:	b148      	cbz	r0, 8007bdc <_dtoa_r+0x16c>
 8007bc8:	4650      	mov	r0, sl
 8007bca:	f7f8 fc1b 	bl	8000404 <__aeabi_i2d>
 8007bce:	4632      	mov	r2, r6
 8007bd0:	463b      	mov	r3, r7
 8007bd2:	f7f8 fee9 	bl	80009a8 <__aeabi_dcmpeq>
 8007bd6:	b908      	cbnz	r0, 8007bdc <_dtoa_r+0x16c>
 8007bd8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007bdc:	f1ba 0f16 	cmp.w	sl, #22
 8007be0:	d85a      	bhi.n	8007c98 <_dtoa_r+0x228>
 8007be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007be6:	496d      	ldr	r1, [pc, #436]	; (8007d9c <_dtoa_r+0x32c>)
 8007be8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007bec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bf0:	f7f8 ff02 	bl	80009f8 <__aeabi_dcmpgt>
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	d051      	beq.n	8007c9c <_dtoa_r+0x22c>
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007bfe:	930d      	str	r3, [sp, #52]	; 0x34
 8007c00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c02:	1b5d      	subs	r5, r3, r5
 8007c04:	1e6b      	subs	r3, r5, #1
 8007c06:	9307      	str	r3, [sp, #28]
 8007c08:	bf43      	ittte	mi
 8007c0a:	2300      	movmi	r3, #0
 8007c0c:	f1c5 0901 	rsbmi	r9, r5, #1
 8007c10:	9307      	strmi	r3, [sp, #28]
 8007c12:	f04f 0900 	movpl.w	r9, #0
 8007c16:	f1ba 0f00 	cmp.w	sl, #0
 8007c1a:	db41      	blt.n	8007ca0 <_dtoa_r+0x230>
 8007c1c:	9b07      	ldr	r3, [sp, #28]
 8007c1e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8007c22:	4453      	add	r3, sl
 8007c24:	9307      	str	r3, [sp, #28]
 8007c26:	2300      	movs	r3, #0
 8007c28:	9308      	str	r3, [sp, #32]
 8007c2a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007c2c:	2b09      	cmp	r3, #9
 8007c2e:	f200 808f 	bhi.w	8007d50 <_dtoa_r+0x2e0>
 8007c32:	2b05      	cmp	r3, #5
 8007c34:	bfc4      	itt	gt
 8007c36:	3b04      	subgt	r3, #4
 8007c38:	931e      	strgt	r3, [sp, #120]	; 0x78
 8007c3a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007c3c:	bfc8      	it	gt
 8007c3e:	2500      	movgt	r5, #0
 8007c40:	f1a3 0302 	sub.w	r3, r3, #2
 8007c44:	bfd8      	it	le
 8007c46:	2501      	movle	r5, #1
 8007c48:	2b03      	cmp	r3, #3
 8007c4a:	f200 808d 	bhi.w	8007d68 <_dtoa_r+0x2f8>
 8007c4e:	e8df f003 	tbb	[pc, r3]
 8007c52:	7d7b      	.short	0x7d7b
 8007c54:	6f2f      	.short	0x6f2f
 8007c56:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007c5a:	441d      	add	r5, r3
 8007c5c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007c60:	2820      	cmp	r0, #32
 8007c62:	dd13      	ble.n	8007c8c <_dtoa_r+0x21c>
 8007c64:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007c68:	9b02      	ldr	r3, [sp, #8]
 8007c6a:	fa08 f800 	lsl.w	r8, r8, r0
 8007c6e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007c72:	fa23 f000 	lsr.w	r0, r3, r0
 8007c76:	ea48 0000 	orr.w	r0, r8, r0
 8007c7a:	f7f8 fbb3 	bl	80003e4 <__aeabi_ui2d>
 8007c7e:	2301      	movs	r3, #1
 8007c80:	4680      	mov	r8, r0
 8007c82:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8007c86:	3d01      	subs	r5, #1
 8007c88:	9310      	str	r3, [sp, #64]	; 0x40
 8007c8a:	e771      	b.n	8007b70 <_dtoa_r+0x100>
 8007c8c:	9b02      	ldr	r3, [sp, #8]
 8007c8e:	f1c0 0020 	rsb	r0, r0, #32
 8007c92:	fa03 f000 	lsl.w	r0, r3, r0
 8007c96:	e7f0      	b.n	8007c7a <_dtoa_r+0x20a>
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e7b0      	b.n	8007bfe <_dtoa_r+0x18e>
 8007c9c:	900d      	str	r0, [sp, #52]	; 0x34
 8007c9e:	e7af      	b.n	8007c00 <_dtoa_r+0x190>
 8007ca0:	f1ca 0300 	rsb	r3, sl, #0
 8007ca4:	9308      	str	r3, [sp, #32]
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	eba9 090a 	sub.w	r9, r9, sl
 8007cac:	930c      	str	r3, [sp, #48]	; 0x30
 8007cae:	e7bc      	b.n	8007c2a <_dtoa_r+0x1ba>
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8007cb4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	dd74      	ble.n	8007da4 <_dtoa_r+0x334>
 8007cba:	4698      	mov	r8, r3
 8007cbc:	9304      	str	r3, [sp, #16]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007cc2:	6072      	str	r2, [r6, #4]
 8007cc4:	2204      	movs	r2, #4
 8007cc6:	f102 0014 	add.w	r0, r2, #20
 8007cca:	4298      	cmp	r0, r3
 8007ccc:	6871      	ldr	r1, [r6, #4]
 8007cce:	d96e      	bls.n	8007dae <_dtoa_r+0x33e>
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	f7ff fab9 	bl	8007248 <_Balloc>
 8007cd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cd8:	6030      	str	r0, [r6, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f1b8 0f0e 	cmp.w	r8, #14
 8007ce0:	9306      	str	r3, [sp, #24]
 8007ce2:	f200 80ed 	bhi.w	8007ec0 <_dtoa_r+0x450>
 8007ce6:	2d00      	cmp	r5, #0
 8007ce8:	f000 80ea 	beq.w	8007ec0 <_dtoa_r+0x450>
 8007cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cf0:	f1ba 0f00 	cmp.w	sl, #0
 8007cf4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007cf8:	dd77      	ble.n	8007dea <_dtoa_r+0x37a>
 8007cfa:	4a28      	ldr	r2, [pc, #160]	; (8007d9c <_dtoa_r+0x32c>)
 8007cfc:	f00a 030f 	and.w	r3, sl, #15
 8007d00:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007d04:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007d08:	06f0      	lsls	r0, r6, #27
 8007d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007d12:	d568      	bpl.n	8007de6 <_dtoa_r+0x376>
 8007d14:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007d18:	4b21      	ldr	r3, [pc, #132]	; (8007da0 <_dtoa_r+0x330>)
 8007d1a:	2503      	movs	r5, #3
 8007d1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d20:	f7f8 fd04 	bl	800072c <__aeabi_ddiv>
 8007d24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d28:	f006 060f 	and.w	r6, r6, #15
 8007d2c:	4f1c      	ldr	r7, [pc, #112]	; (8007da0 <_dtoa_r+0x330>)
 8007d2e:	e04f      	b.n	8007dd0 <_dtoa_r+0x360>
 8007d30:	2301      	movs	r3, #1
 8007d32:	9309      	str	r3, [sp, #36]	; 0x24
 8007d34:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007d36:	4453      	add	r3, sl
 8007d38:	f103 0801 	add.w	r8, r3, #1
 8007d3c:	9304      	str	r3, [sp, #16]
 8007d3e:	4643      	mov	r3, r8
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	bfb8      	it	lt
 8007d44:	2301      	movlt	r3, #1
 8007d46:	e7ba      	b.n	8007cbe <_dtoa_r+0x24e>
 8007d48:	2300      	movs	r3, #0
 8007d4a:	e7b2      	b.n	8007cb2 <_dtoa_r+0x242>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	e7f0      	b.n	8007d32 <_dtoa_r+0x2c2>
 8007d50:	2501      	movs	r5, #1
 8007d52:	2300      	movs	r3, #0
 8007d54:	9509      	str	r5, [sp, #36]	; 0x24
 8007d56:	931e      	str	r3, [sp, #120]	; 0x78
 8007d58:	f04f 33ff 	mov.w	r3, #4294967295
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	9304      	str	r3, [sp, #16]
 8007d60:	4698      	mov	r8, r3
 8007d62:	2312      	movs	r3, #18
 8007d64:	921f      	str	r2, [sp, #124]	; 0x7c
 8007d66:	e7aa      	b.n	8007cbe <_dtoa_r+0x24e>
 8007d68:	2301      	movs	r3, #1
 8007d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d6c:	e7f4      	b.n	8007d58 <_dtoa_r+0x2e8>
 8007d6e:	bf00      	nop
 8007d70:	636f4361 	.word	0x636f4361
 8007d74:	3fd287a7 	.word	0x3fd287a7
 8007d78:	8b60c8b3 	.word	0x8b60c8b3
 8007d7c:	3fc68a28 	.word	0x3fc68a28
 8007d80:	509f79fb 	.word	0x509f79fb
 8007d84:	3fd34413 	.word	0x3fd34413
 8007d88:	7ff00000 	.word	0x7ff00000
 8007d8c:	08008996 	.word	0x08008996
 8007d90:	0800898d 	.word	0x0800898d
 8007d94:	0800899b 	.word	0x0800899b
 8007d98:	3ff80000 	.word	0x3ff80000
 8007d9c:	080087b8 	.word	0x080087b8
 8007da0:	08008790 	.word	0x08008790
 8007da4:	2301      	movs	r3, #1
 8007da6:	9304      	str	r3, [sp, #16]
 8007da8:	4698      	mov	r8, r3
 8007daa:	461a      	mov	r2, r3
 8007dac:	e7da      	b.n	8007d64 <_dtoa_r+0x2f4>
 8007dae:	3101      	adds	r1, #1
 8007db0:	6071      	str	r1, [r6, #4]
 8007db2:	0052      	lsls	r2, r2, #1
 8007db4:	e787      	b.n	8007cc6 <_dtoa_r+0x256>
 8007db6:	07f1      	lsls	r1, r6, #31
 8007db8:	d508      	bpl.n	8007dcc <_dtoa_r+0x35c>
 8007dba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007dbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dc2:	f7f8 fb89 	bl	80004d8 <__aeabi_dmul>
 8007dc6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007dca:	3501      	adds	r5, #1
 8007dcc:	1076      	asrs	r6, r6, #1
 8007dce:	3708      	adds	r7, #8
 8007dd0:	2e00      	cmp	r6, #0
 8007dd2:	d1f0      	bne.n	8007db6 <_dtoa_r+0x346>
 8007dd4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007dd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ddc:	f7f8 fca6 	bl	800072c <__aeabi_ddiv>
 8007de0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007de4:	e01b      	b.n	8007e1e <_dtoa_r+0x3ae>
 8007de6:	2502      	movs	r5, #2
 8007de8:	e7a0      	b.n	8007d2c <_dtoa_r+0x2bc>
 8007dea:	f000 80a4 	beq.w	8007f36 <_dtoa_r+0x4c6>
 8007dee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007df2:	f1ca 0600 	rsb	r6, sl, #0
 8007df6:	4ba0      	ldr	r3, [pc, #640]	; (8008078 <_dtoa_r+0x608>)
 8007df8:	f006 020f 	and.w	r2, r6, #15
 8007dfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e04:	f7f8 fb68 	bl	80004d8 <__aeabi_dmul>
 8007e08:	2502      	movs	r5, #2
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e10:	4f9a      	ldr	r7, [pc, #616]	; (800807c <_dtoa_r+0x60c>)
 8007e12:	1136      	asrs	r6, r6, #4
 8007e14:	2e00      	cmp	r6, #0
 8007e16:	f040 8083 	bne.w	8007f20 <_dtoa_r+0x4b0>
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1e0      	bne.n	8007de0 <_dtoa_r+0x370>
 8007e1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f000 808a 	beq.w	8007f3a <_dtoa_r+0x4ca>
 8007e26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e2a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007e2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e32:	2200      	movs	r2, #0
 8007e34:	4b92      	ldr	r3, [pc, #584]	; (8008080 <_dtoa_r+0x610>)
 8007e36:	f7f8 fdc1 	bl	80009bc <__aeabi_dcmplt>
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	d07d      	beq.n	8007f3a <_dtoa_r+0x4ca>
 8007e3e:	f1b8 0f00 	cmp.w	r8, #0
 8007e42:	d07a      	beq.n	8007f3a <_dtoa_r+0x4ca>
 8007e44:	9b04      	ldr	r3, [sp, #16]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	dd36      	ble.n	8007eb8 <_dtoa_r+0x448>
 8007e4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e4e:	2200      	movs	r2, #0
 8007e50:	4b8c      	ldr	r3, [pc, #560]	; (8008084 <_dtoa_r+0x614>)
 8007e52:	f7f8 fb41 	bl	80004d8 <__aeabi_dmul>
 8007e56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e5a:	9e04      	ldr	r6, [sp, #16]
 8007e5c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8007e60:	3501      	adds	r5, #1
 8007e62:	4628      	mov	r0, r5
 8007e64:	f7f8 face 	bl	8000404 <__aeabi_i2d>
 8007e68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e6c:	f7f8 fb34 	bl	80004d8 <__aeabi_dmul>
 8007e70:	2200      	movs	r2, #0
 8007e72:	4b85      	ldr	r3, [pc, #532]	; (8008088 <_dtoa_r+0x618>)
 8007e74:	f7f8 f97a 	bl	800016c <__adddf3>
 8007e78:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8007e7c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007e80:	950b      	str	r5, [sp, #44]	; 0x2c
 8007e82:	2e00      	cmp	r6, #0
 8007e84:	d15c      	bne.n	8007f40 <_dtoa_r+0x4d0>
 8007e86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	4b7f      	ldr	r3, [pc, #508]	; (800808c <_dtoa_r+0x61c>)
 8007e8e:	f7f8 f96b 	bl	8000168 <__aeabi_dsub>
 8007e92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e94:	462b      	mov	r3, r5
 8007e96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e9a:	f7f8 fdad 	bl	80009f8 <__aeabi_dcmpgt>
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	f040 8281 	bne.w	80083a6 <_dtoa_r+0x936>
 8007ea4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ea8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007eaa:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007eae:	f7f8 fd85 	bl	80009bc <__aeabi_dcmplt>
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	f040 8275 	bne.w	80083a2 <_dtoa_r+0x932>
 8007eb8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007ebc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ec0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f2c0 814b 	blt.w	800815e <_dtoa_r+0x6ee>
 8007ec8:	f1ba 0f0e 	cmp.w	sl, #14
 8007ecc:	f300 8147 	bgt.w	800815e <_dtoa_r+0x6ee>
 8007ed0:	4b69      	ldr	r3, [pc, #420]	; (8008078 <_dtoa_r+0x608>)
 8007ed2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007ede:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f280 80d7 	bge.w	8008094 <_dtoa_r+0x624>
 8007ee6:	f1b8 0f00 	cmp.w	r8, #0
 8007eea:	f300 80d3 	bgt.w	8008094 <_dtoa_r+0x624>
 8007eee:	f040 8257 	bne.w	80083a0 <_dtoa_r+0x930>
 8007ef2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	4b64      	ldr	r3, [pc, #400]	; (800808c <_dtoa_r+0x61c>)
 8007efa:	f7f8 faed 	bl	80004d8 <__aeabi_dmul>
 8007efe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f02:	f7f8 fd6f 	bl	80009e4 <__aeabi_dcmpge>
 8007f06:	4646      	mov	r6, r8
 8007f08:	4647      	mov	r7, r8
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	f040 822d 	bne.w	800836a <_dtoa_r+0x8fa>
 8007f10:	9b06      	ldr	r3, [sp, #24]
 8007f12:	9a06      	ldr	r2, [sp, #24]
 8007f14:	1c5d      	adds	r5, r3, #1
 8007f16:	2331      	movs	r3, #49	; 0x31
 8007f18:	f10a 0a01 	add.w	sl, sl, #1
 8007f1c:	7013      	strb	r3, [r2, #0]
 8007f1e:	e228      	b.n	8008372 <_dtoa_r+0x902>
 8007f20:	07f2      	lsls	r2, r6, #31
 8007f22:	d505      	bpl.n	8007f30 <_dtoa_r+0x4c0>
 8007f24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f28:	f7f8 fad6 	bl	80004d8 <__aeabi_dmul>
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	3501      	adds	r5, #1
 8007f30:	1076      	asrs	r6, r6, #1
 8007f32:	3708      	adds	r7, #8
 8007f34:	e76e      	b.n	8007e14 <_dtoa_r+0x3a4>
 8007f36:	2502      	movs	r5, #2
 8007f38:	e771      	b.n	8007e1e <_dtoa_r+0x3ae>
 8007f3a:	4657      	mov	r7, sl
 8007f3c:	4646      	mov	r6, r8
 8007f3e:	e790      	b.n	8007e62 <_dtoa_r+0x3f2>
 8007f40:	4b4d      	ldr	r3, [pc, #308]	; (8008078 <_dtoa_r+0x608>)
 8007f42:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007f46:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d048      	beq.n	8007fe2 <_dtoa_r+0x572>
 8007f50:	4602      	mov	r2, r0
 8007f52:	460b      	mov	r3, r1
 8007f54:	2000      	movs	r0, #0
 8007f56:	494e      	ldr	r1, [pc, #312]	; (8008090 <_dtoa_r+0x620>)
 8007f58:	f7f8 fbe8 	bl	800072c <__aeabi_ddiv>
 8007f5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007f60:	f7f8 f902 	bl	8000168 <__aeabi_dsub>
 8007f64:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007f68:	9d06      	ldr	r5, [sp, #24]
 8007f6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f6e:	f7f8 fd4d 	bl	8000a0c <__aeabi_d2iz>
 8007f72:	9011      	str	r0, [sp, #68]	; 0x44
 8007f74:	f7f8 fa46 	bl	8000404 <__aeabi_i2d>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f80:	f7f8 f8f2 	bl	8000168 <__aeabi_dsub>
 8007f84:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f8a:	3330      	adds	r3, #48	; 0x30
 8007f8c:	f805 3b01 	strb.w	r3, [r5], #1
 8007f90:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007f94:	f7f8 fd12 	bl	80009bc <__aeabi_dcmplt>
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	d163      	bne.n	8008064 <_dtoa_r+0x5f4>
 8007f9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fa0:	2000      	movs	r0, #0
 8007fa2:	4937      	ldr	r1, [pc, #220]	; (8008080 <_dtoa_r+0x610>)
 8007fa4:	f7f8 f8e0 	bl	8000168 <__aeabi_dsub>
 8007fa8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007fac:	f7f8 fd06 	bl	80009bc <__aeabi_dcmplt>
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	f040 80b5 	bne.w	8008120 <_dtoa_r+0x6b0>
 8007fb6:	9b06      	ldr	r3, [sp, #24]
 8007fb8:	1aeb      	subs	r3, r5, r3
 8007fba:	429e      	cmp	r6, r3
 8007fbc:	f77f af7c 	ble.w	8007eb8 <_dtoa_r+0x448>
 8007fc0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	4b2f      	ldr	r3, [pc, #188]	; (8008084 <_dtoa_r+0x614>)
 8007fc8:	f7f8 fa86 	bl	80004d8 <__aeabi_dmul>
 8007fcc:	2200      	movs	r2, #0
 8007fce:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007fd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fd6:	4b2b      	ldr	r3, [pc, #172]	; (8008084 <_dtoa_r+0x614>)
 8007fd8:	f7f8 fa7e 	bl	80004d8 <__aeabi_dmul>
 8007fdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fe0:	e7c3      	b.n	8007f6a <_dtoa_r+0x4fa>
 8007fe2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007fe6:	f7f8 fa77 	bl	80004d8 <__aeabi_dmul>
 8007fea:	9b06      	ldr	r3, [sp, #24]
 8007fec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007ff0:	199d      	adds	r5, r3, r6
 8007ff2:	461e      	mov	r6, r3
 8007ff4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ff8:	f7f8 fd08 	bl	8000a0c <__aeabi_d2iz>
 8007ffc:	9011      	str	r0, [sp, #68]	; 0x44
 8007ffe:	f7f8 fa01 	bl	8000404 <__aeabi_i2d>
 8008002:	4602      	mov	r2, r0
 8008004:	460b      	mov	r3, r1
 8008006:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800800a:	f7f8 f8ad 	bl	8000168 <__aeabi_dsub>
 800800e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008010:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008014:	3330      	adds	r3, #48	; 0x30
 8008016:	f806 3b01 	strb.w	r3, [r6], #1
 800801a:	42ae      	cmp	r6, r5
 800801c:	f04f 0200 	mov.w	r2, #0
 8008020:	d124      	bne.n	800806c <_dtoa_r+0x5fc>
 8008022:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008026:	4b1a      	ldr	r3, [pc, #104]	; (8008090 <_dtoa_r+0x620>)
 8008028:	f7f8 f8a0 	bl	800016c <__adddf3>
 800802c:	4602      	mov	r2, r0
 800802e:	460b      	mov	r3, r1
 8008030:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008034:	f7f8 fce0 	bl	80009f8 <__aeabi_dcmpgt>
 8008038:	2800      	cmp	r0, #0
 800803a:	d171      	bne.n	8008120 <_dtoa_r+0x6b0>
 800803c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008040:	2000      	movs	r0, #0
 8008042:	4913      	ldr	r1, [pc, #76]	; (8008090 <_dtoa_r+0x620>)
 8008044:	f7f8 f890 	bl	8000168 <__aeabi_dsub>
 8008048:	4602      	mov	r2, r0
 800804a:	460b      	mov	r3, r1
 800804c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008050:	f7f8 fcb4 	bl	80009bc <__aeabi_dcmplt>
 8008054:	2800      	cmp	r0, #0
 8008056:	f43f af2f 	beq.w	8007eb8 <_dtoa_r+0x448>
 800805a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800805e:	1e6a      	subs	r2, r5, #1
 8008060:	2b30      	cmp	r3, #48	; 0x30
 8008062:	d001      	beq.n	8008068 <_dtoa_r+0x5f8>
 8008064:	46ba      	mov	sl, r7
 8008066:	e04a      	b.n	80080fe <_dtoa_r+0x68e>
 8008068:	4615      	mov	r5, r2
 800806a:	e7f6      	b.n	800805a <_dtoa_r+0x5ea>
 800806c:	4b05      	ldr	r3, [pc, #20]	; (8008084 <_dtoa_r+0x614>)
 800806e:	f7f8 fa33 	bl	80004d8 <__aeabi_dmul>
 8008072:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008076:	e7bd      	b.n	8007ff4 <_dtoa_r+0x584>
 8008078:	080087b8 	.word	0x080087b8
 800807c:	08008790 	.word	0x08008790
 8008080:	3ff00000 	.word	0x3ff00000
 8008084:	40240000 	.word	0x40240000
 8008088:	401c0000 	.word	0x401c0000
 800808c:	40140000 	.word	0x40140000
 8008090:	3fe00000 	.word	0x3fe00000
 8008094:	9d06      	ldr	r5, [sp, #24]
 8008096:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800809a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800809e:	4630      	mov	r0, r6
 80080a0:	4639      	mov	r1, r7
 80080a2:	f7f8 fb43 	bl	800072c <__aeabi_ddiv>
 80080a6:	f7f8 fcb1 	bl	8000a0c <__aeabi_d2iz>
 80080aa:	4681      	mov	r9, r0
 80080ac:	f7f8 f9aa 	bl	8000404 <__aeabi_i2d>
 80080b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080b4:	f7f8 fa10 	bl	80004d8 <__aeabi_dmul>
 80080b8:	4602      	mov	r2, r0
 80080ba:	460b      	mov	r3, r1
 80080bc:	4630      	mov	r0, r6
 80080be:	4639      	mov	r1, r7
 80080c0:	f7f8 f852 	bl	8000168 <__aeabi_dsub>
 80080c4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80080c8:	f805 6b01 	strb.w	r6, [r5], #1
 80080cc:	9e06      	ldr	r6, [sp, #24]
 80080ce:	4602      	mov	r2, r0
 80080d0:	1bae      	subs	r6, r5, r6
 80080d2:	45b0      	cmp	r8, r6
 80080d4:	460b      	mov	r3, r1
 80080d6:	d135      	bne.n	8008144 <_dtoa_r+0x6d4>
 80080d8:	f7f8 f848 	bl	800016c <__adddf3>
 80080dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080e0:	4606      	mov	r6, r0
 80080e2:	460f      	mov	r7, r1
 80080e4:	f7f8 fc88 	bl	80009f8 <__aeabi_dcmpgt>
 80080e8:	b9c8      	cbnz	r0, 800811e <_dtoa_r+0x6ae>
 80080ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080ee:	4630      	mov	r0, r6
 80080f0:	4639      	mov	r1, r7
 80080f2:	f7f8 fc59 	bl	80009a8 <__aeabi_dcmpeq>
 80080f6:	b110      	cbz	r0, 80080fe <_dtoa_r+0x68e>
 80080f8:	f019 0f01 	tst.w	r9, #1
 80080fc:	d10f      	bne.n	800811e <_dtoa_r+0x6ae>
 80080fe:	4659      	mov	r1, fp
 8008100:	4620      	mov	r0, r4
 8008102:	f7ff f8d5 	bl	80072b0 <_Bfree>
 8008106:	2300      	movs	r3, #0
 8008108:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800810a:	702b      	strb	r3, [r5, #0]
 800810c:	f10a 0301 	add.w	r3, sl, #1
 8008110:	6013      	str	r3, [r2, #0]
 8008112:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008114:	2b00      	cmp	r3, #0
 8008116:	f43f acf3 	beq.w	8007b00 <_dtoa_r+0x90>
 800811a:	601d      	str	r5, [r3, #0]
 800811c:	e4f0      	b.n	8007b00 <_dtoa_r+0x90>
 800811e:	4657      	mov	r7, sl
 8008120:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008124:	1e6b      	subs	r3, r5, #1
 8008126:	2a39      	cmp	r2, #57	; 0x39
 8008128:	d106      	bne.n	8008138 <_dtoa_r+0x6c8>
 800812a:	9a06      	ldr	r2, [sp, #24]
 800812c:	429a      	cmp	r2, r3
 800812e:	d107      	bne.n	8008140 <_dtoa_r+0x6d0>
 8008130:	2330      	movs	r3, #48	; 0x30
 8008132:	7013      	strb	r3, [r2, #0]
 8008134:	4613      	mov	r3, r2
 8008136:	3701      	adds	r7, #1
 8008138:	781a      	ldrb	r2, [r3, #0]
 800813a:	3201      	adds	r2, #1
 800813c:	701a      	strb	r2, [r3, #0]
 800813e:	e791      	b.n	8008064 <_dtoa_r+0x5f4>
 8008140:	461d      	mov	r5, r3
 8008142:	e7ed      	b.n	8008120 <_dtoa_r+0x6b0>
 8008144:	2200      	movs	r2, #0
 8008146:	4b99      	ldr	r3, [pc, #612]	; (80083ac <_dtoa_r+0x93c>)
 8008148:	f7f8 f9c6 	bl	80004d8 <__aeabi_dmul>
 800814c:	2200      	movs	r2, #0
 800814e:	2300      	movs	r3, #0
 8008150:	4606      	mov	r6, r0
 8008152:	460f      	mov	r7, r1
 8008154:	f7f8 fc28 	bl	80009a8 <__aeabi_dcmpeq>
 8008158:	2800      	cmp	r0, #0
 800815a:	d09e      	beq.n	800809a <_dtoa_r+0x62a>
 800815c:	e7cf      	b.n	80080fe <_dtoa_r+0x68e>
 800815e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008160:	2a00      	cmp	r2, #0
 8008162:	f000 8088 	beq.w	8008276 <_dtoa_r+0x806>
 8008166:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008168:	2a01      	cmp	r2, #1
 800816a:	dc6d      	bgt.n	8008248 <_dtoa_r+0x7d8>
 800816c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800816e:	2a00      	cmp	r2, #0
 8008170:	d066      	beq.n	8008240 <_dtoa_r+0x7d0>
 8008172:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008176:	464d      	mov	r5, r9
 8008178:	9e08      	ldr	r6, [sp, #32]
 800817a:	9a07      	ldr	r2, [sp, #28]
 800817c:	2101      	movs	r1, #1
 800817e:	441a      	add	r2, r3
 8008180:	4620      	mov	r0, r4
 8008182:	4499      	add	r9, r3
 8008184:	9207      	str	r2, [sp, #28]
 8008186:	f7ff f933 	bl	80073f0 <__i2b>
 800818a:	4607      	mov	r7, r0
 800818c:	2d00      	cmp	r5, #0
 800818e:	dd0b      	ble.n	80081a8 <_dtoa_r+0x738>
 8008190:	9b07      	ldr	r3, [sp, #28]
 8008192:	2b00      	cmp	r3, #0
 8008194:	dd08      	ble.n	80081a8 <_dtoa_r+0x738>
 8008196:	42ab      	cmp	r3, r5
 8008198:	bfa8      	it	ge
 800819a:	462b      	movge	r3, r5
 800819c:	9a07      	ldr	r2, [sp, #28]
 800819e:	eba9 0903 	sub.w	r9, r9, r3
 80081a2:	1aed      	subs	r5, r5, r3
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	9307      	str	r3, [sp, #28]
 80081a8:	9b08      	ldr	r3, [sp, #32]
 80081aa:	b1eb      	cbz	r3, 80081e8 <_dtoa_r+0x778>
 80081ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d065      	beq.n	800827e <_dtoa_r+0x80e>
 80081b2:	b18e      	cbz	r6, 80081d8 <_dtoa_r+0x768>
 80081b4:	4639      	mov	r1, r7
 80081b6:	4632      	mov	r2, r6
 80081b8:	4620      	mov	r0, r4
 80081ba:	f7ff f9b7 	bl	800752c <__pow5mult>
 80081be:	465a      	mov	r2, fp
 80081c0:	4601      	mov	r1, r0
 80081c2:	4607      	mov	r7, r0
 80081c4:	4620      	mov	r0, r4
 80081c6:	f7ff f91c 	bl	8007402 <__multiply>
 80081ca:	4659      	mov	r1, fp
 80081cc:	900a      	str	r0, [sp, #40]	; 0x28
 80081ce:	4620      	mov	r0, r4
 80081d0:	f7ff f86e 	bl	80072b0 <_Bfree>
 80081d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081d6:	469b      	mov	fp, r3
 80081d8:	9b08      	ldr	r3, [sp, #32]
 80081da:	1b9a      	subs	r2, r3, r6
 80081dc:	d004      	beq.n	80081e8 <_dtoa_r+0x778>
 80081de:	4659      	mov	r1, fp
 80081e0:	4620      	mov	r0, r4
 80081e2:	f7ff f9a3 	bl	800752c <__pow5mult>
 80081e6:	4683      	mov	fp, r0
 80081e8:	2101      	movs	r1, #1
 80081ea:	4620      	mov	r0, r4
 80081ec:	f7ff f900 	bl	80073f0 <__i2b>
 80081f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081f2:	4606      	mov	r6, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f000 81c6 	beq.w	8008586 <_dtoa_r+0xb16>
 80081fa:	461a      	mov	r2, r3
 80081fc:	4601      	mov	r1, r0
 80081fe:	4620      	mov	r0, r4
 8008200:	f7ff f994 	bl	800752c <__pow5mult>
 8008204:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008206:	4606      	mov	r6, r0
 8008208:	2b01      	cmp	r3, #1
 800820a:	dc3e      	bgt.n	800828a <_dtoa_r+0x81a>
 800820c:	9b02      	ldr	r3, [sp, #8]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d137      	bne.n	8008282 <_dtoa_r+0x812>
 8008212:	9b03      	ldr	r3, [sp, #12]
 8008214:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008218:	2b00      	cmp	r3, #0
 800821a:	d134      	bne.n	8008286 <_dtoa_r+0x816>
 800821c:	9b03      	ldr	r3, [sp, #12]
 800821e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008222:	0d1b      	lsrs	r3, r3, #20
 8008224:	051b      	lsls	r3, r3, #20
 8008226:	b12b      	cbz	r3, 8008234 <_dtoa_r+0x7c4>
 8008228:	9b07      	ldr	r3, [sp, #28]
 800822a:	f109 0901 	add.w	r9, r9, #1
 800822e:	3301      	adds	r3, #1
 8008230:	9307      	str	r3, [sp, #28]
 8008232:	2301      	movs	r3, #1
 8008234:	9308      	str	r3, [sp, #32]
 8008236:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008238:	2b00      	cmp	r3, #0
 800823a:	d128      	bne.n	800828e <_dtoa_r+0x81e>
 800823c:	2001      	movs	r0, #1
 800823e:	e02e      	b.n	800829e <_dtoa_r+0x82e>
 8008240:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008242:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008246:	e796      	b.n	8008176 <_dtoa_r+0x706>
 8008248:	9b08      	ldr	r3, [sp, #32]
 800824a:	f108 36ff 	add.w	r6, r8, #4294967295
 800824e:	42b3      	cmp	r3, r6
 8008250:	bfb7      	itett	lt
 8008252:	9b08      	ldrlt	r3, [sp, #32]
 8008254:	1b9e      	subge	r6, r3, r6
 8008256:	1af2      	sublt	r2, r6, r3
 8008258:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800825a:	bfbf      	itttt	lt
 800825c:	9608      	strlt	r6, [sp, #32]
 800825e:	189b      	addlt	r3, r3, r2
 8008260:	930c      	strlt	r3, [sp, #48]	; 0x30
 8008262:	2600      	movlt	r6, #0
 8008264:	f1b8 0f00 	cmp.w	r8, #0
 8008268:	bfb9      	ittee	lt
 800826a:	eba9 0508 	sublt.w	r5, r9, r8
 800826e:	2300      	movlt	r3, #0
 8008270:	464d      	movge	r5, r9
 8008272:	4643      	movge	r3, r8
 8008274:	e781      	b.n	800817a <_dtoa_r+0x70a>
 8008276:	9e08      	ldr	r6, [sp, #32]
 8008278:	464d      	mov	r5, r9
 800827a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800827c:	e786      	b.n	800818c <_dtoa_r+0x71c>
 800827e:	9a08      	ldr	r2, [sp, #32]
 8008280:	e7ad      	b.n	80081de <_dtoa_r+0x76e>
 8008282:	2300      	movs	r3, #0
 8008284:	e7d6      	b.n	8008234 <_dtoa_r+0x7c4>
 8008286:	9b02      	ldr	r3, [sp, #8]
 8008288:	e7d4      	b.n	8008234 <_dtoa_r+0x7c4>
 800828a:	2300      	movs	r3, #0
 800828c:	9308      	str	r3, [sp, #32]
 800828e:	6933      	ldr	r3, [r6, #16]
 8008290:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008294:	6918      	ldr	r0, [r3, #16]
 8008296:	f7ff f85d 	bl	8007354 <__hi0bits>
 800829a:	f1c0 0020 	rsb	r0, r0, #32
 800829e:	9b07      	ldr	r3, [sp, #28]
 80082a0:	4418      	add	r0, r3
 80082a2:	f010 001f 	ands.w	r0, r0, #31
 80082a6:	d047      	beq.n	8008338 <_dtoa_r+0x8c8>
 80082a8:	f1c0 0320 	rsb	r3, r0, #32
 80082ac:	2b04      	cmp	r3, #4
 80082ae:	dd3b      	ble.n	8008328 <_dtoa_r+0x8b8>
 80082b0:	9b07      	ldr	r3, [sp, #28]
 80082b2:	f1c0 001c 	rsb	r0, r0, #28
 80082b6:	4481      	add	r9, r0
 80082b8:	4405      	add	r5, r0
 80082ba:	4403      	add	r3, r0
 80082bc:	9307      	str	r3, [sp, #28]
 80082be:	f1b9 0f00 	cmp.w	r9, #0
 80082c2:	dd05      	ble.n	80082d0 <_dtoa_r+0x860>
 80082c4:	4659      	mov	r1, fp
 80082c6:	464a      	mov	r2, r9
 80082c8:	4620      	mov	r0, r4
 80082ca:	f7ff f97d 	bl	80075c8 <__lshift>
 80082ce:	4683      	mov	fp, r0
 80082d0:	9b07      	ldr	r3, [sp, #28]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	dd05      	ble.n	80082e2 <_dtoa_r+0x872>
 80082d6:	4631      	mov	r1, r6
 80082d8:	461a      	mov	r2, r3
 80082da:	4620      	mov	r0, r4
 80082dc:	f7ff f974 	bl	80075c8 <__lshift>
 80082e0:	4606      	mov	r6, r0
 80082e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082e4:	b353      	cbz	r3, 800833c <_dtoa_r+0x8cc>
 80082e6:	4631      	mov	r1, r6
 80082e8:	4658      	mov	r0, fp
 80082ea:	f7ff f9c1 	bl	8007670 <__mcmp>
 80082ee:	2800      	cmp	r0, #0
 80082f0:	da24      	bge.n	800833c <_dtoa_r+0x8cc>
 80082f2:	2300      	movs	r3, #0
 80082f4:	4659      	mov	r1, fp
 80082f6:	220a      	movs	r2, #10
 80082f8:	4620      	mov	r0, r4
 80082fa:	f7fe fff0 	bl	80072de <__multadd>
 80082fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008300:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008304:	4683      	mov	fp, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	f000 8144 	beq.w	8008594 <_dtoa_r+0xb24>
 800830c:	2300      	movs	r3, #0
 800830e:	4639      	mov	r1, r7
 8008310:	220a      	movs	r2, #10
 8008312:	4620      	mov	r0, r4
 8008314:	f7fe ffe3 	bl	80072de <__multadd>
 8008318:	9b04      	ldr	r3, [sp, #16]
 800831a:	4607      	mov	r7, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	dc4d      	bgt.n	80083bc <_dtoa_r+0x94c>
 8008320:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008322:	2b02      	cmp	r3, #2
 8008324:	dd4a      	ble.n	80083bc <_dtoa_r+0x94c>
 8008326:	e011      	b.n	800834c <_dtoa_r+0x8dc>
 8008328:	d0c9      	beq.n	80082be <_dtoa_r+0x84e>
 800832a:	9a07      	ldr	r2, [sp, #28]
 800832c:	331c      	adds	r3, #28
 800832e:	441a      	add	r2, r3
 8008330:	4499      	add	r9, r3
 8008332:	441d      	add	r5, r3
 8008334:	4613      	mov	r3, r2
 8008336:	e7c1      	b.n	80082bc <_dtoa_r+0x84c>
 8008338:	4603      	mov	r3, r0
 800833a:	e7f6      	b.n	800832a <_dtoa_r+0x8ba>
 800833c:	f1b8 0f00 	cmp.w	r8, #0
 8008340:	dc36      	bgt.n	80083b0 <_dtoa_r+0x940>
 8008342:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008344:	2b02      	cmp	r3, #2
 8008346:	dd33      	ble.n	80083b0 <_dtoa_r+0x940>
 8008348:	f8cd 8010 	str.w	r8, [sp, #16]
 800834c:	9b04      	ldr	r3, [sp, #16]
 800834e:	b963      	cbnz	r3, 800836a <_dtoa_r+0x8fa>
 8008350:	4631      	mov	r1, r6
 8008352:	2205      	movs	r2, #5
 8008354:	4620      	mov	r0, r4
 8008356:	f7fe ffc2 	bl	80072de <__multadd>
 800835a:	4601      	mov	r1, r0
 800835c:	4606      	mov	r6, r0
 800835e:	4658      	mov	r0, fp
 8008360:	f7ff f986 	bl	8007670 <__mcmp>
 8008364:	2800      	cmp	r0, #0
 8008366:	f73f add3 	bgt.w	8007f10 <_dtoa_r+0x4a0>
 800836a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800836c:	9d06      	ldr	r5, [sp, #24]
 800836e:	ea6f 0a03 	mvn.w	sl, r3
 8008372:	f04f 0900 	mov.w	r9, #0
 8008376:	4631      	mov	r1, r6
 8008378:	4620      	mov	r0, r4
 800837a:	f7fe ff99 	bl	80072b0 <_Bfree>
 800837e:	2f00      	cmp	r7, #0
 8008380:	f43f aebd 	beq.w	80080fe <_dtoa_r+0x68e>
 8008384:	f1b9 0f00 	cmp.w	r9, #0
 8008388:	d005      	beq.n	8008396 <_dtoa_r+0x926>
 800838a:	45b9      	cmp	r9, r7
 800838c:	d003      	beq.n	8008396 <_dtoa_r+0x926>
 800838e:	4649      	mov	r1, r9
 8008390:	4620      	mov	r0, r4
 8008392:	f7fe ff8d 	bl	80072b0 <_Bfree>
 8008396:	4639      	mov	r1, r7
 8008398:	4620      	mov	r0, r4
 800839a:	f7fe ff89 	bl	80072b0 <_Bfree>
 800839e:	e6ae      	b.n	80080fe <_dtoa_r+0x68e>
 80083a0:	2600      	movs	r6, #0
 80083a2:	4637      	mov	r7, r6
 80083a4:	e7e1      	b.n	800836a <_dtoa_r+0x8fa>
 80083a6:	46ba      	mov	sl, r7
 80083a8:	4637      	mov	r7, r6
 80083aa:	e5b1      	b.n	8007f10 <_dtoa_r+0x4a0>
 80083ac:	40240000 	.word	0x40240000
 80083b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083b2:	f8cd 8010 	str.w	r8, [sp, #16]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f000 80f3 	beq.w	80085a2 <_dtoa_r+0xb32>
 80083bc:	2d00      	cmp	r5, #0
 80083be:	dd05      	ble.n	80083cc <_dtoa_r+0x95c>
 80083c0:	4639      	mov	r1, r7
 80083c2:	462a      	mov	r2, r5
 80083c4:	4620      	mov	r0, r4
 80083c6:	f7ff f8ff 	bl	80075c8 <__lshift>
 80083ca:	4607      	mov	r7, r0
 80083cc:	9b08      	ldr	r3, [sp, #32]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d04c      	beq.n	800846c <_dtoa_r+0x9fc>
 80083d2:	6879      	ldr	r1, [r7, #4]
 80083d4:	4620      	mov	r0, r4
 80083d6:	f7fe ff37 	bl	8007248 <_Balloc>
 80083da:	4605      	mov	r5, r0
 80083dc:	693a      	ldr	r2, [r7, #16]
 80083de:	f107 010c 	add.w	r1, r7, #12
 80083e2:	3202      	adds	r2, #2
 80083e4:	0092      	lsls	r2, r2, #2
 80083e6:	300c      	adds	r0, #12
 80083e8:	f7fe fcd2 	bl	8006d90 <memcpy>
 80083ec:	2201      	movs	r2, #1
 80083ee:	4629      	mov	r1, r5
 80083f0:	4620      	mov	r0, r4
 80083f2:	f7ff f8e9 	bl	80075c8 <__lshift>
 80083f6:	46b9      	mov	r9, r7
 80083f8:	4607      	mov	r7, r0
 80083fa:	9b06      	ldr	r3, [sp, #24]
 80083fc:	9307      	str	r3, [sp, #28]
 80083fe:	9b02      	ldr	r3, [sp, #8]
 8008400:	f003 0301 	and.w	r3, r3, #1
 8008404:	9308      	str	r3, [sp, #32]
 8008406:	4631      	mov	r1, r6
 8008408:	4658      	mov	r0, fp
 800840a:	f7ff faa2 	bl	8007952 <quorem>
 800840e:	4649      	mov	r1, r9
 8008410:	4605      	mov	r5, r0
 8008412:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008416:	4658      	mov	r0, fp
 8008418:	f7ff f92a 	bl	8007670 <__mcmp>
 800841c:	463a      	mov	r2, r7
 800841e:	9002      	str	r0, [sp, #8]
 8008420:	4631      	mov	r1, r6
 8008422:	4620      	mov	r0, r4
 8008424:	f7ff f93e 	bl	80076a4 <__mdiff>
 8008428:	68c3      	ldr	r3, [r0, #12]
 800842a:	4602      	mov	r2, r0
 800842c:	bb03      	cbnz	r3, 8008470 <_dtoa_r+0xa00>
 800842e:	4601      	mov	r1, r0
 8008430:	9009      	str	r0, [sp, #36]	; 0x24
 8008432:	4658      	mov	r0, fp
 8008434:	f7ff f91c 	bl	8007670 <__mcmp>
 8008438:	4603      	mov	r3, r0
 800843a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800843c:	4611      	mov	r1, r2
 800843e:	4620      	mov	r0, r4
 8008440:	9309      	str	r3, [sp, #36]	; 0x24
 8008442:	f7fe ff35 	bl	80072b0 <_Bfree>
 8008446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008448:	b9a3      	cbnz	r3, 8008474 <_dtoa_r+0xa04>
 800844a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800844c:	b992      	cbnz	r2, 8008474 <_dtoa_r+0xa04>
 800844e:	9a08      	ldr	r2, [sp, #32]
 8008450:	b982      	cbnz	r2, 8008474 <_dtoa_r+0xa04>
 8008452:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008456:	d029      	beq.n	80084ac <_dtoa_r+0xa3c>
 8008458:	9b02      	ldr	r3, [sp, #8]
 800845a:	2b00      	cmp	r3, #0
 800845c:	dd01      	ble.n	8008462 <_dtoa_r+0x9f2>
 800845e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008462:	9b07      	ldr	r3, [sp, #28]
 8008464:	1c5d      	adds	r5, r3, #1
 8008466:	f883 8000 	strb.w	r8, [r3]
 800846a:	e784      	b.n	8008376 <_dtoa_r+0x906>
 800846c:	4638      	mov	r0, r7
 800846e:	e7c2      	b.n	80083f6 <_dtoa_r+0x986>
 8008470:	2301      	movs	r3, #1
 8008472:	e7e3      	b.n	800843c <_dtoa_r+0x9cc>
 8008474:	9a02      	ldr	r2, [sp, #8]
 8008476:	2a00      	cmp	r2, #0
 8008478:	db04      	blt.n	8008484 <_dtoa_r+0xa14>
 800847a:	d123      	bne.n	80084c4 <_dtoa_r+0xa54>
 800847c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800847e:	bb0a      	cbnz	r2, 80084c4 <_dtoa_r+0xa54>
 8008480:	9a08      	ldr	r2, [sp, #32]
 8008482:	b9fa      	cbnz	r2, 80084c4 <_dtoa_r+0xa54>
 8008484:	2b00      	cmp	r3, #0
 8008486:	ddec      	ble.n	8008462 <_dtoa_r+0x9f2>
 8008488:	4659      	mov	r1, fp
 800848a:	2201      	movs	r2, #1
 800848c:	4620      	mov	r0, r4
 800848e:	f7ff f89b 	bl	80075c8 <__lshift>
 8008492:	4631      	mov	r1, r6
 8008494:	4683      	mov	fp, r0
 8008496:	f7ff f8eb 	bl	8007670 <__mcmp>
 800849a:	2800      	cmp	r0, #0
 800849c:	dc03      	bgt.n	80084a6 <_dtoa_r+0xa36>
 800849e:	d1e0      	bne.n	8008462 <_dtoa_r+0x9f2>
 80084a0:	f018 0f01 	tst.w	r8, #1
 80084a4:	d0dd      	beq.n	8008462 <_dtoa_r+0x9f2>
 80084a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80084aa:	d1d8      	bne.n	800845e <_dtoa_r+0x9ee>
 80084ac:	9b07      	ldr	r3, [sp, #28]
 80084ae:	9a07      	ldr	r2, [sp, #28]
 80084b0:	1c5d      	adds	r5, r3, #1
 80084b2:	2339      	movs	r3, #57	; 0x39
 80084b4:	7013      	strb	r3, [r2, #0]
 80084b6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80084ba:	1e6a      	subs	r2, r5, #1
 80084bc:	2b39      	cmp	r3, #57	; 0x39
 80084be:	d04d      	beq.n	800855c <_dtoa_r+0xaec>
 80084c0:	3301      	adds	r3, #1
 80084c2:	e052      	b.n	800856a <_dtoa_r+0xafa>
 80084c4:	9a07      	ldr	r2, [sp, #28]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	f102 0501 	add.w	r5, r2, #1
 80084cc:	dd06      	ble.n	80084dc <_dtoa_r+0xa6c>
 80084ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80084d2:	d0eb      	beq.n	80084ac <_dtoa_r+0xa3c>
 80084d4:	f108 0801 	add.w	r8, r8, #1
 80084d8:	9b07      	ldr	r3, [sp, #28]
 80084da:	e7c4      	b.n	8008466 <_dtoa_r+0x9f6>
 80084dc:	9b06      	ldr	r3, [sp, #24]
 80084de:	9a04      	ldr	r2, [sp, #16]
 80084e0:	1aeb      	subs	r3, r5, r3
 80084e2:	4293      	cmp	r3, r2
 80084e4:	f805 8c01 	strb.w	r8, [r5, #-1]
 80084e8:	d021      	beq.n	800852e <_dtoa_r+0xabe>
 80084ea:	4659      	mov	r1, fp
 80084ec:	2300      	movs	r3, #0
 80084ee:	220a      	movs	r2, #10
 80084f0:	4620      	mov	r0, r4
 80084f2:	f7fe fef4 	bl	80072de <__multadd>
 80084f6:	45b9      	cmp	r9, r7
 80084f8:	4683      	mov	fp, r0
 80084fa:	f04f 0300 	mov.w	r3, #0
 80084fe:	f04f 020a 	mov.w	r2, #10
 8008502:	4649      	mov	r1, r9
 8008504:	4620      	mov	r0, r4
 8008506:	d105      	bne.n	8008514 <_dtoa_r+0xaa4>
 8008508:	f7fe fee9 	bl	80072de <__multadd>
 800850c:	4681      	mov	r9, r0
 800850e:	4607      	mov	r7, r0
 8008510:	9507      	str	r5, [sp, #28]
 8008512:	e778      	b.n	8008406 <_dtoa_r+0x996>
 8008514:	f7fe fee3 	bl	80072de <__multadd>
 8008518:	4639      	mov	r1, r7
 800851a:	4681      	mov	r9, r0
 800851c:	2300      	movs	r3, #0
 800851e:	220a      	movs	r2, #10
 8008520:	4620      	mov	r0, r4
 8008522:	f7fe fedc 	bl	80072de <__multadd>
 8008526:	4607      	mov	r7, r0
 8008528:	e7f2      	b.n	8008510 <_dtoa_r+0xaa0>
 800852a:	f04f 0900 	mov.w	r9, #0
 800852e:	4659      	mov	r1, fp
 8008530:	2201      	movs	r2, #1
 8008532:	4620      	mov	r0, r4
 8008534:	f7ff f848 	bl	80075c8 <__lshift>
 8008538:	4631      	mov	r1, r6
 800853a:	4683      	mov	fp, r0
 800853c:	f7ff f898 	bl	8007670 <__mcmp>
 8008540:	2800      	cmp	r0, #0
 8008542:	dcb8      	bgt.n	80084b6 <_dtoa_r+0xa46>
 8008544:	d102      	bne.n	800854c <_dtoa_r+0xadc>
 8008546:	f018 0f01 	tst.w	r8, #1
 800854a:	d1b4      	bne.n	80084b6 <_dtoa_r+0xa46>
 800854c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008550:	1e6a      	subs	r2, r5, #1
 8008552:	2b30      	cmp	r3, #48	; 0x30
 8008554:	f47f af0f 	bne.w	8008376 <_dtoa_r+0x906>
 8008558:	4615      	mov	r5, r2
 800855a:	e7f7      	b.n	800854c <_dtoa_r+0xadc>
 800855c:	9b06      	ldr	r3, [sp, #24]
 800855e:	4293      	cmp	r3, r2
 8008560:	d105      	bne.n	800856e <_dtoa_r+0xafe>
 8008562:	2331      	movs	r3, #49	; 0x31
 8008564:	9a06      	ldr	r2, [sp, #24]
 8008566:	f10a 0a01 	add.w	sl, sl, #1
 800856a:	7013      	strb	r3, [r2, #0]
 800856c:	e703      	b.n	8008376 <_dtoa_r+0x906>
 800856e:	4615      	mov	r5, r2
 8008570:	e7a1      	b.n	80084b6 <_dtoa_r+0xa46>
 8008572:	4b17      	ldr	r3, [pc, #92]	; (80085d0 <_dtoa_r+0xb60>)
 8008574:	f7ff bae1 	b.w	8007b3a <_dtoa_r+0xca>
 8008578:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800857a:	2b00      	cmp	r3, #0
 800857c:	f47f aabb 	bne.w	8007af6 <_dtoa_r+0x86>
 8008580:	4b14      	ldr	r3, [pc, #80]	; (80085d4 <_dtoa_r+0xb64>)
 8008582:	f7ff bada 	b.w	8007b3a <_dtoa_r+0xca>
 8008586:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008588:	2b01      	cmp	r3, #1
 800858a:	f77f ae3f 	ble.w	800820c <_dtoa_r+0x79c>
 800858e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008590:	9308      	str	r3, [sp, #32]
 8008592:	e653      	b.n	800823c <_dtoa_r+0x7cc>
 8008594:	9b04      	ldr	r3, [sp, #16]
 8008596:	2b00      	cmp	r3, #0
 8008598:	dc03      	bgt.n	80085a2 <_dtoa_r+0xb32>
 800859a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800859c:	2b02      	cmp	r3, #2
 800859e:	f73f aed5 	bgt.w	800834c <_dtoa_r+0x8dc>
 80085a2:	9d06      	ldr	r5, [sp, #24]
 80085a4:	4631      	mov	r1, r6
 80085a6:	4658      	mov	r0, fp
 80085a8:	f7ff f9d3 	bl	8007952 <quorem>
 80085ac:	9b06      	ldr	r3, [sp, #24]
 80085ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80085b2:	f805 8b01 	strb.w	r8, [r5], #1
 80085b6:	9a04      	ldr	r2, [sp, #16]
 80085b8:	1aeb      	subs	r3, r5, r3
 80085ba:	429a      	cmp	r2, r3
 80085bc:	ddb5      	ble.n	800852a <_dtoa_r+0xaba>
 80085be:	4659      	mov	r1, fp
 80085c0:	2300      	movs	r3, #0
 80085c2:	220a      	movs	r2, #10
 80085c4:	4620      	mov	r0, r4
 80085c6:	f7fe fe8a 	bl	80072de <__multadd>
 80085ca:	4683      	mov	fp, r0
 80085cc:	e7ea      	b.n	80085a4 <_dtoa_r+0xb34>
 80085ce:	bf00      	nop
 80085d0:	0800899a 	.word	0x0800899a
 80085d4:	0800898d 	.word	0x0800898d

080085d8 <__malloc_lock>:
 80085d8:	4770      	bx	lr

080085da <__malloc_unlock>:
 80085da:	4770      	bx	lr

080085dc <_init>:
 80085dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085de:	bf00      	nop
 80085e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085e2:	bc08      	pop	{r3}
 80085e4:	469e      	mov	lr, r3
 80085e6:	4770      	bx	lr

080085e8 <_fini>:
 80085e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ea:	bf00      	nop
 80085ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ee:	bc08      	pop	{r3}
 80085f0:	469e      	mov	lr, r3
 80085f2:	4770      	bx	lr
